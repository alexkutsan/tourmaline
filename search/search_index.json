{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":".md-content__button { display: none; } .md-content .logo { width: 150px; display: block; margin: 0px auto 20px auto; } .md-content .md-typeset h1, .md-content .md-typeset h2 { text-align: center; margin: 0; } .md-content .md-typeset h1 { text-align: center; margin-bottom: 0.12em; } .md-content .md-typeset .headerlink { display: none; } .md-content .md-typeset .quickstart { display: flex; flex-direction: row; } .md-content .md-typeset .quickstart * { flex: 1 1 0; } .md-content .md-typeset .quickstart .sample-one { margin-right: 10px; } .md-content .md-typeset .quickstart .sample-two { margin-left: 10px; } Tourmaline Crystal Telegram Bot Framework Quickstart Tourmaline uses Crystal to communicate with the Telegram Bot API. Therefore to use Tourmaline you should be familiar with how Crystal works. Once inside of a Crystal project, add Tourmaline to your shard.yml file and run shards install to install it. For more information, see the getting started page. Using Annotations require \"tourmaline\" class EchoBot < Tourmaline :: Client @[ Command ( \"echo\" ) ] def echo_command ( ctx ) ctx . message . reply ( ctx . text ) end end bot = EchoBot . new ( bot_token : \"YOUR_API_TOKEN\" ) bot . poll More Procedural require \"tourmaline\" include Tourmaline # To shorten things bot = Client . new ( bot_token : \"YOUR_API_TOKEN\" ) echo_handler = Handlers :: CommandHandler . new ( \"echo\" ) do | ctx | ctx . message . reply ( ctx . text ) end bot . add_event_handler ( echo_handler ) bot . poll","title":"Home"},{"location":"SUMMARY/","text":"Home Usage Getting Started Features Handlers Async Stage Formatting Background Jobs Emoji Support Kemal Middleware Multilevel Menus Paginated Keyboards TDLight Resources FAQ Asking Questions API Reference Changelog Tourmaline String","title":"SUMMARY"},{"location":"changelog/","text":"Tourmaline Changelog # I will do my best to keep this updated with changes as they happen. 0.25.1 # Added sender_type method and SenderType enum to Message , allowing the user to easily figure out what type of user or channel sent the given message. Updated docs 0.25.0 # Removed Container class which was being used to maintain a global instance of Client . Added finish_init method to all models, allowing them to contain an instance of the Client that created them. 0.24.0 # Added full support for Bot API 5.4 and 5.5 More, see the official Bot API changelog for a complete list of changes. 0.23.0 # Added full support for Bot API 5.1 - 5.3 Fixed some dependencies. Added additional classes ChatInviteLink , VoiceChatStarted , VoiceChatEnded , VoiceChatParticipantInvited , VoiceChatScheduled , MessageAutoDeleteTimerChanged , InputInvoiceMessageContent , and BotCommandScope . Added scope and language_code options to set_my_commands and get_my_commands . Added method delete_my_commands . More, see the official Bot API changelog for a complete list of changes. 0.22.0 # Added support for TDLight. Added user_token argument to Client.new to support the TDLight user API. (breaking change) All arguments to Client.new are now keyword arguments. (breaking change) Removed async argument from event handlers. All events are now async by default. Async events can be disabled with the -Dno_async flag. UpdateHandler now accepts an array of UpdateAction , or a single one. Fixed an issue where poll always deletes a set webhook. Now it will only delete the webhook if delete_webhook is true. 0.20.0 # (breaking change) Removed the filters, replaced with new handlers (breaking change) Removed Granite specific DB includes from models (also commented out db_persistence.cr ; next update should make persistence better) (breaking change) Renamed PagedInlineKeyboard to PagedKeyboard Added RoutedMenu class for easy menu building 0.19.1 # Replace broken Int in unions with Int::Primitive Make Helpers.random_string actually return a random string, not just a number Change the first run logic in Stage 0.19.0 # Added support for Passport Added animated? to Sticker Added several new filters including InlineQueryFilter and CallbackQueryFilter Added connection pooling to fix concurrency errors Events are now async by default Added a new helper class PagedInlineKeyboard (breaking change) Moved KemalAdapter to tourmaline/extra Added proxy support based on mamantoha/http_proxy Added support for multiple prefixes with commands Allow changing the log level using the LOG environment variable Added an InstaBot example (breaking change) Disabled (commented out) DBPersistence for now Updated for bot API 4.9 Added support for the \ud83c\udfc0 emoji, including methods Client#send_basket , Message#reply_with_basket , and Message#respond_with_basket Added via_bot field to Message Added Stage (importable from tourmaline/extra ) for conversation handling 0.18.1 # Added ameba checks Replaced Halite with HTTP::Client , resulting in a major speed boost Rename persistent_init and persistent_cleanup to init and cleanup respectively Remove handle_error in favor of Error.from_code 0.18.0 # Updated polls for Quiz 2.0 Added new send_dart method 0.17.0 # KeyboardMarkup (breaking change) Replace Markup class with KeyboardBuilder abstract class and extend it with ReplyKeyboardMarkup::Builder and InlineKeyboardMarkup::Builder . Add .build methods to ReplyKeyboardMarkup and InlineKeyboardMarkup . (breaking change) Replace QueryResultBuilder with InlineQueryResult::Builder . Update examples with new Builder classes being used. InlineQueryResult (breaking change) Replace QueryResultBuilder with InlineQueryResult::Builder . Add .build method to InlineQueryResult . Update examples with new Builder classes being used. Persistence (breaking change) Made Persistence a class rather than a module and updated HashPersistence and JsonPersistence to use it. Add persistence instance variable to Client Add NilPersistence and make it the default persistence for new Client s Add DBPersistence 0.16.0 # Add CHANGELOG Add support for Filters. Add users methods to Update and Message to return all users included in the same. Replaced usage of the strange logger with the new Crystal Log class. Log all updates with Debug severity if VERBOSE environment variable is set to true . (breaking change) Renamed File to TFile to avoid conflicting with the builtin File class. (breaking change) removed the Handler class and all subclasses. Update handling is now done exclusively with the EventHandler class and Filter s. 0.15.1 # Fix bug with event handler that was causing On handlers to run on every update. Add CNAME file for tourmaline.dev Update the logo. Add DiceBot example. 0.15.0 # Updated to bot API 4.7 Add send_dice method to client. Add BotCommand model along with get_my_commands and set_my_commands methods. Add new sticker/sticker set methods. Add Dice update action.","title":"Changelog"},{"location":"changelog/#tourmaline-changelog","text":"I will do my best to keep this updated with changes as they happen.","title":"Tourmaline Changelog"},{"location":"changelog/#0251","text":"Added sender_type method and SenderType enum to Message , allowing the user to easily figure out what type of user or channel sent the given message. Updated docs","title":"0.25.1"},{"location":"changelog/#0250","text":"Removed Container class which was being used to maintain a global instance of Client . Added finish_init method to all models, allowing them to contain an instance of the Client that created them.","title":"0.25.0"},{"location":"changelog/#0240","text":"Added full support for Bot API 5.4 and 5.5 More, see the official Bot API changelog for a complete list of changes.","title":"0.24.0"},{"location":"changelog/#0230","text":"Added full support for Bot API 5.1 - 5.3 Fixed some dependencies. Added additional classes ChatInviteLink , VoiceChatStarted , VoiceChatEnded , VoiceChatParticipantInvited , VoiceChatScheduled , MessageAutoDeleteTimerChanged , InputInvoiceMessageContent , and BotCommandScope . Added scope and language_code options to set_my_commands and get_my_commands . Added method delete_my_commands . More, see the official Bot API changelog for a complete list of changes.","title":"0.23.0"},{"location":"changelog/#0220","text":"Added support for TDLight. Added user_token argument to Client.new to support the TDLight user API. (breaking change) All arguments to Client.new are now keyword arguments. (breaking change) Removed async argument from event handlers. All events are now async by default. Async events can be disabled with the -Dno_async flag. UpdateHandler now accepts an array of UpdateAction , or a single one. Fixed an issue where poll always deletes a set webhook. Now it will only delete the webhook if delete_webhook is true.","title":"0.22.0"},{"location":"changelog/#0200","text":"(breaking change) Removed the filters, replaced with new handlers (breaking change) Removed Granite specific DB includes from models (also commented out db_persistence.cr ; next update should make persistence better) (breaking change) Renamed PagedInlineKeyboard to PagedKeyboard Added RoutedMenu class for easy menu building","title":"0.20.0"},{"location":"changelog/#0191","text":"Replace broken Int in unions with Int::Primitive Make Helpers.random_string actually return a random string, not just a number Change the first run logic in Stage","title":"0.19.1"},{"location":"changelog/#0190","text":"Added support for Passport Added animated? to Sticker Added several new filters including InlineQueryFilter and CallbackQueryFilter Added connection pooling to fix concurrency errors Events are now async by default Added a new helper class PagedInlineKeyboard (breaking change) Moved KemalAdapter to tourmaline/extra Added proxy support based on mamantoha/http_proxy Added support for multiple prefixes with commands Allow changing the log level using the LOG environment variable Added an InstaBot example (breaking change) Disabled (commented out) DBPersistence for now Updated for bot API 4.9 Added support for the \ud83c\udfc0 emoji, including methods Client#send_basket , Message#reply_with_basket , and Message#respond_with_basket Added via_bot field to Message Added Stage (importable from tourmaline/extra ) for conversation handling","title":"0.19.0"},{"location":"changelog/#0181","text":"Added ameba checks Replaced Halite with HTTP::Client , resulting in a major speed boost Rename persistent_init and persistent_cleanup to init and cleanup respectively Remove handle_error in favor of Error.from_code","title":"0.18.1"},{"location":"changelog/#0180","text":"Updated polls for Quiz 2.0 Added new send_dart method","title":"0.18.0"},{"location":"changelog/#0170","text":"KeyboardMarkup (breaking change) Replace Markup class with KeyboardBuilder abstract class and extend it with ReplyKeyboardMarkup::Builder and InlineKeyboardMarkup::Builder . Add .build methods to ReplyKeyboardMarkup and InlineKeyboardMarkup . (breaking change) Replace QueryResultBuilder with InlineQueryResult::Builder . Update examples with new Builder classes being used. InlineQueryResult (breaking change) Replace QueryResultBuilder with InlineQueryResult::Builder . Add .build method to InlineQueryResult . Update examples with new Builder classes being used. Persistence (breaking change) Made Persistence a class rather than a module and updated HashPersistence and JsonPersistence to use it. Add persistence instance variable to Client Add NilPersistence and make it the default persistence for new Client s Add DBPersistence","title":"0.17.0"},{"location":"changelog/#0160","text":"Add CHANGELOG Add support for Filters. Add users methods to Update and Message to return all users included in the same. Replaced usage of the strange logger with the new Crystal Log class. Log all updates with Debug severity if VERBOSE environment variable is set to true . (breaking change) Renamed File to TFile to avoid conflicting with the builtin File class. (breaking change) removed the Handler class and all subclasses. Update handling is now done exclusively with the EventHandler class and Filter s.","title":"0.16.0"},{"location":"changelog/#0151","text":"Fix bug with event handler that was causing On handlers to run on every update. Add CNAME file for tourmaline.dev Update the logo. Add DiceBot example.","title":"0.15.1"},{"location":"changelog/#0150","text":"Updated to bot API 4.7 Add send_dice method to client. Add BotCommand model along with get_my_commands and set_my_commands methods. Add new sticker/sticker set methods. Add Dice update action.","title":"0.15.0"},{"location":"api_reference/String/","text":"class String inherits Reference # A String represents an immutable sequence of UTF-8 characters. A String is typically created with a string literal, enclosing UTF-8 characters in double quotes: \"hello world\" A backslash can be used to denote some characters inside the string: \" \\\" \" # double quote \" \\\\ \" # backslash \" \\e \" # escape \" \\f \" # form feed \" \\n \" # newline \" \\r \" # carriage return \" \\t \" # tab \" \\v \" # vertical tab You can use a backslash followed by an u and four hexadecimal characters to denote a unicode codepoint written: \" \\u0041 \" # == \"A\" Or you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF): \" \\u{41} \" # == \"A\" A string can span multiple lines: \"hello world\" # same as \"hello\\n world\" Note that in the above example trailing and leading spaces, as well as newlines, end up in the resulting string. To avoid this, you can split a string into multiple lines by joining multiple literals with a backslash: \"hello \" \\ \"world, \" \\ \"no newlines\" # same as \"hello world, no newlines\" Alternatively, a backslash followed by a newline can be inserted inside the string literal: \"hello \\ world, \\ no newlines\" # same as \"hello world, no newlines\" In this case, leading whitespace is not included in the resulting string. If you need to write a string that has many double quotes, parentheses, or similar characters, you can use alternative literals: # Supports double quotes and nested parentheses %(hello (\"world\")) # same as \"hello (\\\"world\\\")\" # Supports double quotes and nested brackets %[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\" # Supports double quotes and nested curlies %{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\" # Supports double quotes and nested angles %<hello <\"world\">> # same as \"hello <\\\"world\\\">\" To create a String with embedded expressions, you can use string interpolation: a = 1 b = 2 \"sum = #{ a + b } \" # \"sum = 3\" This ends up invoking Object#to_s(IO) on each expression enclosed by #{...} . If you need to dynamically build a string, use String#build or IO::Memory . Non UTF-8 valid strings # String might end up being conformed of bytes which are an invalid byte sequence according to UTF-8. This can happen if the string is created via one of the constructors that accept bytes, or when getting a string from String.build or IO::Memory . No exception will be raised, but invalid byte sequences, when asked as chars, will use the unicode replacement char (value 0xFFFD). For example: # here 255 is not a valid byte value in the UTF-8 encoding string = String . new ( Bytes [ 255 , 97 ] ) string . valid_encoding? # => false # The first char here is the unicode replacement char string . chars # => ['\ufffd', 'a'] One can also create strings with specific byte value in them by using octal and hexadecimal escape sequences: # Octal escape sequences \" \\101 \" # # => \"A\" \" \\12 \" # # => \"\\n\" \" \\1 \" # string with one character with code point 1 \" \\377 \" # string with one byte with value 255 # Hexadecimal escape sequences \" \\x41 \" # # => \"A\" \" \\xFF \" # string with one byte with value 255 The reason for allowing strings that don't have a valid UTF-8 sequence is that the world is full of content that isn't properly encoded, and having a program raise an exception or stop because of this is not good. It's better if programs are more resilient, but show a replacement character when there's an error in incoming data. Included modules Comparable Methods # #bold # Convert the string to a Tourmaline::Format::Bold View source #code # Convert the string to a Tourmaline::Format::Code View source #code_block # Convert the string to a Tourmaline::Format::CodeBlock View source #italic # Convert the string to a Tourmaline::Format::Italic View source #link ( to : String ) # Convert the string to a Tourmaline::Format::Link View source #to_html # Escspe the HTML in this string View source #to_md ( version = 2 ) # Escape the markdown in this string View source #underline # Convert the string to a Tourmaline::Format::Underline View source","title":"String"},{"location":"api_reference/String/#String","text":"A String represents an immutable sequence of UTF-8 characters. A String is typically created with a string literal, enclosing UTF-8 characters in double quotes: \"hello world\" A backslash can be used to denote some characters inside the string: \" \\\" \" # double quote \" \\\\ \" # backslash \" \\e \" # escape \" \\f \" # form feed \" \\n \" # newline \" \\r \" # carriage return \" \\t \" # tab \" \\v \" # vertical tab You can use a backslash followed by an u and four hexadecimal characters to denote a unicode codepoint written: \" \\u0041 \" # == \"A\" Or you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF): \" \\u{41} \" # == \"A\" A string can span multiple lines: \"hello world\" # same as \"hello\\n world\" Note that in the above example trailing and leading spaces, as well as newlines, end up in the resulting string. To avoid this, you can split a string into multiple lines by joining multiple literals with a backslash: \"hello \" \\ \"world, \" \\ \"no newlines\" # same as \"hello world, no newlines\" Alternatively, a backslash followed by a newline can be inserted inside the string literal: \"hello \\ world, \\ no newlines\" # same as \"hello world, no newlines\" In this case, leading whitespace is not included in the resulting string. If you need to write a string that has many double quotes, parentheses, or similar characters, you can use alternative literals: # Supports double quotes and nested parentheses %(hello (\"world\")) # same as \"hello (\\\"world\\\")\" # Supports double quotes and nested brackets %[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\" # Supports double quotes and nested curlies %{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\" # Supports double quotes and nested angles %<hello <\"world\">> # same as \"hello <\\\"world\\\">\" To create a String with embedded expressions, you can use string interpolation: a = 1 b = 2 \"sum = #{ a + b } \" # \"sum = 3\" This ends up invoking Object#to_s(IO) on each expression enclosed by #{...} . If you need to dynamically build a string, use String#build or IO::Memory .","title":"String"},{"location":"api_reference/String/#String--non-utf-8-valid-strings","text":"String might end up being conformed of bytes which are an invalid byte sequence according to UTF-8. This can happen if the string is created via one of the constructors that accept bytes, or when getting a string from String.build or IO::Memory . No exception will be raised, but invalid byte sequences, when asked as chars, will use the unicode replacement char (value 0xFFFD). For example: # here 255 is not a valid byte value in the UTF-8 encoding string = String . new ( Bytes [ 255 , 97 ] ) string . valid_encoding? # => false # The first char here is the unicode replacement char string . chars # => ['\ufffd', 'a'] One can also create strings with specific byte value in them by using octal and hexadecimal escape sequences: # Octal escape sequences \" \\101 \" # # => \"A\" \" \\12 \" # # => \"\\n\" \" \\1 \" # string with one character with code point 1 \" \\377 \" # string with one byte with value 255 # Hexadecimal escape sequences \" \\x41 \" # # => \"A\" \" \\xFF \" # string with one byte with value 255 The reason for allowing strings that don't have a valid UTF-8 sequence is that the world is full of content that isn't properly encoded, and having a program raise an exception or stop because of this is not good. It's better if programs are more resilient, but show a replacement character when there's an error in incoming data.","title":"Non UTF-8 valid strings"},{"location":"api_reference/String/#String-methods","text":"","title":"Methods"},{"location":"api_reference/String/#String#bold","text":"Convert the string to a Tourmaline::Format::Bold View source","title":"#bold"},{"location":"api_reference/String/#String#code","text":"Convert the string to a Tourmaline::Format::Code View source","title":"#code"},{"location":"api_reference/String/#String#code_block","text":"Convert the string to a Tourmaline::Format::CodeBlock View source","title":"#code_block"},{"location":"api_reference/String/#String#italic","text":"Convert the string to a Tourmaline::Format::Italic View source","title":"#italic"},{"location":"api_reference/String/#String#link(to)","text":"Convert the string to a Tourmaline::Format::Link View source","title":"#link"},{"location":"api_reference/String/#String#to_html","text":"Escspe the HTML in this string View source","title":"#to_html"},{"location":"api_reference/String/#String#to_md(version)","text":"Escape the markdown in this string View source","title":"#to_md"},{"location":"api_reference/String/#String#underline","text":"Convert the string to a Tourmaline::Format::Underline View source","title":"#underline"},{"location":"api_reference/Tourmaline/","text":"module Tourmaline # Tourmaline is a Telegram Bot API library for Telegram . It provides an easy to use interface for creating telegram bots, and using the various bot APIs that Telegram provides. For usage examples, see the examples directory. For guides on using Tourmaline, see the official Tourmaline cookbook . Included modules Tourmaline::Annotations Tourmaline::Handlers Constants # VERSION = \"0.22.0\" #","title":"Tourmaline"},{"location":"api_reference/Tourmaline/#Tourmaline","text":"Tourmaline is a Telegram Bot API library for Telegram . It provides an easy to use interface for creating telegram bots, and using the various bot APIs that Telegram provides. For usage examples, see the examples directory. For guides on using Tourmaline, see the official Tourmaline cookbook .","title":"Tourmaline"},{"location":"api_reference/Tourmaline/#Tourmaline-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/#Tourmaline::VERSION","text":"","title":"VERSION"},{"location":"api_reference/Tourmaline/Animation/","text":"class Tourmaline::Animation inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_id : String # View source #file_name : String? # View source #file_size : Int32? # View source #file_unique_id : String # View source #mime_type : String? # View source #thumb : PhotoSize? # View source","title":"Animation"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation","text":"","title":"Animation"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#file_name","text":"View source","title":"#file_name"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#mime_type","text":"View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#thumb","text":"View source","title":"#thumb"},{"location":"api_reference/Tourmaline/Annotations/","text":"module Tourmaline::Annotations # Direct including types Tourmaline","title":"Annotations"},{"location":"api_reference/Tourmaline/Annotations/#Tourmaline::Annotations","text":"","title":"Annotations"},{"location":"api_reference/Tourmaline/Annotations/Catch/","text":"annotation Tourmaline::Annotations::Catch # Catch errors and pass them to the annotated method to be handled.\\ Options: *errors Tourmaline::Error classes that you wish to handle.","title":"Catch"},{"location":"api_reference/Tourmaline/Annotations/Catch/#Tourmaline::Annotations::Catch","text":"Catch errors and pass them to the annotated method to be handled.\\ Options: *errors Tourmaline::Error classes that you wish to handle.","title":"Catch"},{"location":"api_reference/Tourmaline/Annotations/Command/","text":"annotation Tourmaline::Annotations::Command # Define a new Command. By default all commands start with a / and commands are accessable to all chat types. You can change these defaults by supplying named parameters to the annotation. Options: commands the command(s) to use. should be a prefixless string or symbol. prefix the prefix for this command. defaults to / . remove_leading if true the text value passed to the command context will not include the command, if the command is at the beginning. defaults to true . private_only if true this command will only be allowed inside of private chats. group_only if true this command will only be allowed inside of groups. Example: @[ Command ( \"help\" , prefix : \"!\" , private_only : true ) ] def help_command ( client , update ) update . message . not_nil! . reply ( \"This is a help message\" ) end","title":"Command"},{"location":"api_reference/Tourmaline/Annotations/Command/#Tourmaline::Annotations::Command","text":"Define a new Command. By default all commands start with a / and commands are accessable to all chat types. You can change these defaults by supplying named parameters to the annotation. Options: commands the command(s) to use. should be a prefixless string or symbol. prefix the prefix for this command. defaults to / . remove_leading if true the text value passed to the command context will not include the command, if the command is at the beginning. defaults to true . private_only if true this command will only be allowed inside of private chats. group_only if true this command will only be allowed inside of groups. Example: @[ Command ( \"help\" , prefix : \"!\" , private_only : true ) ] def help_command ( client , update ) update . message . not_nil! . reply ( \"This is a help message\" ) end","title":"Command"},{"location":"api_reference/Tourmaline/Annotations/Edited/","text":"annotation Tourmaline::Annotations::Edited #","title":"Edited"},{"location":"api_reference/Tourmaline/Annotations/Edited/#Tourmaline::Annotations::Edited","text":"","title":"Edited"},{"location":"api_reference/Tourmaline/Annotations/Hears/","text":"annotation Tourmaline::Annotations::Hears #","title":"Hears"},{"location":"api_reference/Tourmaline/Annotations/Hears/#Tourmaline::Annotations::Hears","text":"","title":"Hears"},{"location":"api_reference/Tourmaline/Annotations/On/","text":"annotation Tourmaline::Annotations::On #","title":"On"},{"location":"api_reference/Tourmaline/Annotations/On/#Tourmaline::Annotations::On","text":"","title":"On"},{"location":"api_reference/Tourmaline/Annotations/OnCallbackQuery/","text":"annotation Tourmaline::Annotations::OnCallbackQuery # Add a callback query handler which optionally listens for a specific data value. Options: pattern A String or Regex which the data must match. Example: @[ OnCallbackQuery ( \"back\" ) ] def back_button_pressed ( client , update ) query = update . callback_query . not_nil! query . answer ( \"You pressed back!\" ) end","title":"OnCallbackQuery"},{"location":"api_reference/Tourmaline/Annotations/OnCallbackQuery/#Tourmaline::Annotations::OnCallbackQuery","text":"Add a callback query handler which optionally listens for a specific data value. Options: pattern A String or Regex which the data must match. Example: @[ OnCallbackQuery ( \"back\" ) ] def back_button_pressed ( client , update ) query = update . callback_query . not_nil! query . answer ( \"You pressed back!\" ) end","title":"OnCallbackQuery"},{"location":"api_reference/Tourmaline/Annotations/OnChosenInlineResult/","text":"annotation Tourmaline::Annotations::OnChosenInlineResult #","title":"OnChosenInlineResult"},{"location":"api_reference/Tourmaline/Annotations/OnChosenInlineResult/#Tourmaline::Annotations::OnChosenInlineResult","text":"","title":"OnChosenInlineResult"},{"location":"api_reference/Tourmaline/Annotations/OnInlineQuery/","text":"annotation Tourmaline::Annotations::OnInlineQuery #","title":"OnInlineQuery"},{"location":"api_reference/Tourmaline/Annotations/OnInlineQuery/#Tourmaline::Annotations::OnInlineQuery","text":"","title":"OnInlineQuery"},{"location":"api_reference/Tourmaline/Audio/","text":"class Tourmaline::Audio inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #duration : Int32 # View source #file_id : String # View source #file_name : String? # View source #file_size : Int32? # View source #file_unique_id : String # View source #mime_type : String? # View source #performer : String? # View source #thumb : PhotoSize? # View source #title : String? # View source","title":"Audio"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio","text":"","title":"Audio"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#duration","text":"View source","title":"#duration"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#file_name","text":"View source","title":"#file_name"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#mime_type","text":"View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#performer","text":"View source","title":"#performer"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#thumb","text":"View source","title":"#thumb"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/BotCommand/","text":"class Tourmaline::BotCommand inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #command : String # View source #description : String # View source #to_h # View source","title":"BotCommand"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand","text":"","title":"BotCommand"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand#command","text":"View source","title":"#command"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand#to_h","text":"View source","title":"#to_h"},{"location":"api_reference/Tourmaline/BotCommandScope/","text":"alias Tourmaline::BotCommandScope # Alias definition Tourmaline::BotCommandScopeAllChatAdministrators | Tourmaline::BotCommandScopeAllGroupChats | Tourmaline::BotCommandScopeAllPrivateChats | Tourmaline::BotCommandScopeChat | Tourmaline::BotCommandScopeChatAdministrators | Tourmaline::BotCommandScopeChatMember | Tourmaline::BotCommandScopeDefault","title":"BotCommandScope"},{"location":"api_reference/Tourmaline/BotCommandScope/#Tourmaline::BotCommandScope","text":"","title":"BotCommandScope"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/","text":"class Tourmaline::BotCommandScopeAllChatAdministrators inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #type : String # View source","title":"BotCommandScopeAllChatAdministrators"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/#Tourmaline::BotCommandScopeAllChatAdministrators","text":"","title":"BotCommandScopeAllChatAdministrators"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/#Tourmaline::BotCommandScopeAllChatAdministrators-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/#Tourmaline::BotCommandScopeAllChatAdministrators.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/#Tourmaline::BotCommandScopeAllChatAdministrators-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/#Tourmaline::BotCommandScopeAllChatAdministrators#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/","text":"class Tourmaline::BotCommandScopeAllGroupChats inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #type : String # View source","title":"BotCommandScopeAllGroupChats"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/#Tourmaline::BotCommandScopeAllGroupChats","text":"","title":"BotCommandScopeAllGroupChats"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/#Tourmaline::BotCommandScopeAllGroupChats-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/#Tourmaline::BotCommandScopeAllGroupChats.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/#Tourmaline::BotCommandScopeAllGroupChats-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/#Tourmaline::BotCommandScopeAllGroupChats#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/","text":"class Tourmaline::BotCommandScopeAllPrivateChats inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #type : String # View source","title":"BotCommandScopeAllPrivateChats"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/#Tourmaline::BotCommandScopeAllPrivateChats","text":"","title":"BotCommandScopeAllPrivateChats"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/#Tourmaline::BotCommandScopeAllPrivateChats-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/#Tourmaline::BotCommandScopeAllPrivateChats.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/#Tourmaline::BotCommandScopeAllPrivateChats-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/#Tourmaline::BotCommandScopeAllPrivateChats#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/","text":"class Tourmaline::BotCommandScopeChat inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( chat : Chat | Int64 | String ) # View source Methods # #chat_id : Int64 | String # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source #chat_id= ( chat_id : Int64 | String ) # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source #type : String # View source","title":"BotCommandScopeChat"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat","text":"","title":"BotCommandScopeChat"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat#chat_id","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source","title":"#chat_id"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat#chat_id=(chat_id)","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source","title":"#chat_id="},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/","text":"class Tourmaline::BotCommandScopeChatAdministrators inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( chat : Chat | Int64 | String ) # View source Methods # #chat_id : Int64 | String # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source #chat_id= ( chat_id : Int64 | String ) # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source #type : String # View source","title":"BotCommandScopeChatAdministrators"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators","text":"","title":"BotCommandScopeChatAdministrators"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators#chat_id","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source","title":"#chat_id"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators#chat_id=(chat_id)","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source","title":"#chat_id="},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/","text":"class Tourmaline::BotCommandScopeChatMember inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( chat : Chat | Int64 | String , user : User | Int64 ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #chat_id : Int64 | String # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source #chat_id= ( chat_id : Int64 | String ) # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source #type : String # View source #user_id : Int64 # Unique identifier of the target user View source #user_id= ( user_id : Int64 ) # Unique identifier of the target user View source","title":"BotCommandScopeChatMember"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember","text":"","title":"BotCommandScopeChatMember"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember.new(chat,user)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember#chat_id","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source","title":"#chat_id"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember#chat_id=(chat_id)","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source","title":"#chat_id="},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember#user_id","text":"Unique identifier of the target user View source","title":"#user_id"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember#user_id=(user_id)","text":"Unique identifier of the target user View source","title":"#user_id="},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/","text":"class Tourmaline::BotCommandScopeDefault inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #type : String # View source","title":"BotCommandScopeDefault"},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/#Tourmaline::BotCommandScopeDefault","text":"","title":"BotCommandScopeDefault"},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/#Tourmaline::BotCommandScopeDefault-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/#Tourmaline::BotCommandScopeDefault.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/#Tourmaline::BotCommandScopeDefault-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/#Tourmaline::BotCommandScopeDefault#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/Button/","text":"alias Tourmaline::Button # Alias definition Tourmaline::InlineKeyboardButton | Tourmaline::KeyboardButton","title":"Button"},{"location":"api_reference/Tourmaline/Button/#Tourmaline::Button","text":"","title":"Button"},{"location":"api_reference/Tourmaline/CallbackGame/","text":"class Tourmaline::CallbackGame inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source","title":"CallbackGame"},{"location":"api_reference/Tourmaline/CallbackGame/#Tourmaline::CallbackGame","text":"","title":"CallbackGame"},{"location":"api_reference/Tourmaline/CallbackGame/#Tourmaline::CallbackGame-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/CallbackGame/#Tourmaline::CallbackGame.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/CallbackQuery/","text":"class Tourmaline::CallbackQuery inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #answer ( * args , ** kwargs ) # View source #chat_instance : String? # View source #data : String? # View source #from : User # View source #game_short_name : String? # View source #id : String # View source #inline_message_id : String? # View source #message : Message? # View source","title":"CallbackQuery"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery","text":"","title":"CallbackQuery"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#answer(*,**)","text":"View source","title":"#answer"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#chat_instance","text":"View source","title":"#chat_instance"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#data","text":"View source","title":"#data"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#from","text":"View source","title":"#from"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#game_short_name","text":"View source","title":"#game_short_name"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#inline_message_id","text":"View source","title":"#inline_message_id"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#message","text":"View source","title":"#message"},{"location":"api_reference/Tourmaline/Chat/","text":"class Tourmaline::Chat inherits Reference # This object represents a Telegram user or bot. Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #bio : String? # View source #can_set_sticker_set : Bool? # View source #channel? # View source #delete_chat_sticker_set # View source #delete_photo # View source #description : String? # View source #edit_live_location ( latitude , longitude , ** kwargs ) # View source #first_name : String? # View source #group? # View source #has_private_forwards : Bool? # View source #has_protected_content : Bool? # View source #id : Int64 # View source #invite_link # View source #is_scam? : Bool? # USER API ONLY View source #is_verified? : Bool? # USER API ONLY View source #last_name : String? # View source #linked_chat_id : Int64? # View source #location : ChatLocation? # View source #member_count # View source #message_auto_delete_time : Int32? # View source #name # View source #permissions : ChatPermissions? # View source #photo : ChatPhoto? # View source #pinned_message : Message? # View source #private? # View source #send_animation ( animation , ** kwargs ) # View source #send_audio ( audio , ** kwargs ) # View source #send_chat_action ( action : ChatAction ) # View source #send_contact ( phone_number , first_name , ** kwargs ) # View source #send_document ( document , ** kwargs ) # View source #send_game ( game_name , ** kwargs ) # View source #send_invoice ( invoice , ** kwargs ) # View source #send_location ( latitude , longitude , ** kwargs ) # View source #send_media_group ( media , ** kwargs ) # View source #send_menu ( menu : RoutedMenu , ** kwargs ) # View source #send_message ( * args , ** kwargs ) # View source #send_photo ( photo , ** kwargs ) # View source #send_sticker ( sticker , ** kwargs ) # View source #send_venue ( latitude , longitude , title , address , ** kwargs ) # View source #send_video ( video , ** kwargs ) # View source #send_video_note ( video_note , ** kwargs ) # View source #send_voice ( voice , ** kwargs ) # View source #set_administrator_custom_title ( user , custom_title ) # View source #set_description ( description ) # View source #set_permissions ( permissions ) # View source #set_photo ( photo ) # View source #set_sticker_set ( set_name ) # View source #set_title ( title ) # View source #slow_mode_delay : Int32? # View source #sticker_set_name : String? # View source #stop_live_location ( ** kwargs ) # View source #supergroup? # View source #title : String? # View source #type : Type # View source #unpin_message # View source #username : String? # View source","title":"Chat"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat","text":"This object represents a Telegram user or bot.","title":"Chat"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#bio","text":"View source","title":"#bio"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#can_set_sticker_set","text":"View source","title":"#can_set_sticker_set"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#channel?","text":"View source","title":"#channel?"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#delete_chat_sticker_set","text":"View source","title":"#delete_chat_sticker_set"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#delete_photo","text":"View source","title":"#delete_photo"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#edit_live_location(latitude,longitude,**)","text":"View source","title":"#edit_live_location"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#first_name","text":"View source","title":"#first_name"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#group?","text":"View source","title":"#group?"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#has_private_forwards","text":"View source","title":"#has_private_forwards"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#has_protected_content","text":"View source","title":"#has_protected_content"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#invite_link","text":"View source","title":"#invite_link"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#is_scam?","text":"USER API ONLY View source","title":"#is_scam?"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#is_verified?","text":"USER API ONLY View source","title":"#is_verified?"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#last_name","text":"View source","title":"#last_name"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#linked_chat_id","text":"View source","title":"#linked_chat_id"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#location","text":"View source","title":"#location"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#member_count","text":"View source","title":"#member_count"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#message_auto_delete_time","text":"View source","title":"#message_auto_delete_time"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#name","text":"View source","title":"#name"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#permissions","text":"View source","title":"#permissions"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#photo","text":"View source","title":"#photo"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#pinned_message","text":"View source","title":"#pinned_message"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#private?","text":"View source","title":"#private?"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#send_animation(animation,**)","text":"View source","title":"#send_animation"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#send_audio(audio,**)","text":"View source","title":"#send_audio"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#send_chat_action(action)","text":"View source","title":"#send_chat_action"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#send_contact(phone_number,first_name,**)","text":"View source","title":"#send_contact"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#send_document(document,**)","text":"View source","title":"#send_document"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#send_game(game_name,**)","text":"View source","title":"#send_game"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#send_invoice(invoice,**)","text":"View source","title":"#send_invoice"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#send_location(latitude,longitude,**)","text":"View source","title":"#send_location"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#send_media_group(media,**)","text":"View source","title":"#send_media_group"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#send_menu(menu,**)","text":"View source","title":"#send_menu"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#send_message(*,**)","text":"View source","title":"#send_message"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#send_photo(photo,**)","text":"View source","title":"#send_photo"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#send_sticker(sticker,**)","text":"View source","title":"#send_sticker"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#send_venue(latitude,longitude,title,address,**)","text":"View source","title":"#send_venue"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#send_video(video,**)","text":"View source","title":"#send_video"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#send_video_note(video_note,**)","text":"View source","title":"#send_video_note"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#send_voice(voice,**)","text":"View source","title":"#send_voice"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#set_administrator_custom_title(user,custom_title)","text":"View source","title":"#set_administrator_custom_title"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#set_description(description)","text":"View source","title":"#set_description"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#set_permissions(permissions)","text":"View source","title":"#set_permissions"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#set_photo(photo)","text":"View source","title":"#set_photo"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#set_sticker_set(set_name)","text":"View source","title":"#set_sticker_set"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#set_title(title)","text":"View source","title":"#set_title"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#slow_mode_delay","text":"View source","title":"#slow_mode_delay"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#sticker_set_name","text":"View source","title":"#sticker_set_name"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#stop_live_location(**)","text":"View source","title":"#stop_live_location"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#supergroup?","text":"View source","title":"#supergroup?"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#unpin_message","text":"View source","title":"#unpin_message"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#username","text":"View source","title":"#username"},{"location":"api_reference/Tourmaline/Chat/Type/","text":"enum Tourmaline::Chat::Type # Members # Private = 0 # Group = 1 # Supergroup = 2 # Channel = 3 # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #channel? # View source #group? # View source #private? # View source #supergroup? # View source #to_json ( json : JSON :: Builder ) # Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source","title":"Type"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type","text":"","title":"Type"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type::Private","text":"","title":"Private"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type::Group","text":"","title":"Group"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type::Supergroup","text":"","title":"Supergroup"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type::Channel","text":"","title":"Channel"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type#channel?","text":"View source","title":"#channel?"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type#group?","text":"View source","title":"#group?"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type#private?","text":"View source","title":"#private?"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type#supergroup?","text":"View source","title":"#supergroup?"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type#to_json(json)","text":"Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source","title":"#to_json"},{"location":"api_reference/Tourmaline/ChatAction/","text":"enum Tourmaline::ChatAction # Chat actions are what appear at the top of the screen when users are typing, sending files, etc. You can mimic these actions by using the Client#send_chat_action method. Members # Typing = 0 # UploadPhoto = 1 # RecordVideo = 2 # UploadVideo = 3 # RecordAudio = 4 # RecordVoice = 5 # UploadAudio = 6 # UploadVoice = 7 # UploadDocument = 8 # Findlocation = 9 # RecordVideoNote = 10 # UploadVideoNote = 11 # Methods # #findlocation? # View source #record_audio? # View source #record_video? # View source #record_video_note? # View source #record_voice? # View source #to_s # Returns a String representation of this enum member. In the case of regular enums, this is just the name of the member. In the case of flag enums, it's the names joined by vertical bars, or \"None\", if the value is zero. If an enum's value doesn't match a member's value, the raw value is returned as a string. Color :: Red . to_s # => \"Red\" IOMode :: None . to_s # => \"None\" ( IOMode :: Read | IOMode :: Write ) . to_s # => \"Read | Write\" Color . new ( 10 ) . to_s # => \"10\" View source #typing? # View source #upload_audio? # View source #upload_document? # View source #upload_photo? # View source #upload_video? # View source #upload_video_note? # View source #upload_voice? # View source","title":"ChatAction"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction","text":"Chat actions are what appear at the top of the screen when users are typing, sending files, etc. You can mimic these actions by using the Client#send_chat_action method.","title":"ChatAction"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::Typing","text":"","title":"Typing"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadPhoto","text":"","title":"UploadPhoto"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::RecordVideo","text":"","title":"RecordVideo"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadVideo","text":"","title":"UploadVideo"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::RecordAudio","text":"","title":"RecordAudio"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::RecordVoice","text":"","title":"RecordVoice"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadAudio","text":"","title":"UploadAudio"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadVoice","text":"","title":"UploadVoice"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadDocument","text":"","title":"UploadDocument"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::Findlocation","text":"","title":"Findlocation"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::RecordVideoNote","text":"","title":"RecordVideoNote"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadVideoNote","text":"","title":"UploadVideoNote"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#findlocation?","text":"View source","title":"#findlocation?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#record_audio?","text":"View source","title":"#record_audio?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#record_video?","text":"View source","title":"#record_video?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#record_video_note?","text":"View source","title":"#record_video_note?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#record_voice?","text":"View source","title":"#record_voice?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#to_s","text":"Returns a String representation of this enum member. In the case of regular enums, this is just the name of the member. In the case of flag enums, it's the names joined by vertical bars, or \"None\", if the value is zero. If an enum's value doesn't match a member's value, the raw value is returned as a string. Color :: Red . to_s # => \"Red\" IOMode :: None . to_s # => \"None\" ( IOMode :: Read | IOMode :: Write ) . to_s # => \"Read | Write\" Color . new ( 10 ) . to_s # => \"10\" View source","title":"#to_s"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#typing?","text":"View source","title":"#typing?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_audio?","text":"View source","title":"#upload_audio?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_document?","text":"View source","title":"#upload_document?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_photo?","text":"View source","title":"#upload_photo?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_video?","text":"View source","title":"#upload_video?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_video_note?","text":"View source","title":"#upload_video_note?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_voice?","text":"View source","title":"#upload_voice?"},{"location":"api_reference/Tourmaline/ChatInviteLink/","text":"class Tourmaline::ChatInviteLink inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #creator : User # View source #expire_date : Time? # View source #invite_link : String # View source #member_limit : Int32? # View source #primary? : Bool # View source #revoked? : Bool # View source","title":"ChatInviteLink"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink","text":"","title":"ChatInviteLink"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#creator","text":"View source","title":"#creator"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#expire_date","text":"View source","title":"#expire_date"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#invite_link","text":"View source","title":"#invite_link"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#member_limit","text":"View source","title":"#member_limit"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#primary?","text":"View source","title":"#primary?"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#revoked?","text":"View source","title":"#revoked?"},{"location":"api_reference/Tourmaline/ChatLocation/","text":"class Tourmaline::ChatLocation inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #address : String # View source #location : Location # View source","title":"ChatLocation"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation","text":"","title":"ChatLocation"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation#address","text":"View source","title":"#address"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation#location","text":"View source","title":"#location"},{"location":"api_reference/Tourmaline/ChatMember/","text":"class Tourmaline::ChatMember inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Class methods # .from_user ( user ) # View source Methods # #can_add_web_page_previews : Bool? # View source #can_be_edited : Bool? # View source #can_change_info : Bool? # View source #can_delete_messages : Bool? # View source #can_edit_messages : Bool? # View source #can_invite_users : Bool? # View source #can_manage_chat : Bool? # View source #can_pin_messages : Bool? # View source #can_post_messages : Bool? # View source #can_promote_members : Bool? # View source #can_restrict_members : Bool? # View source #can_send_media_messages : Bool? # View source #can_send_messages : Bool? # View source #can_send_other_messages : Bool? # View source #can_send_polls : Bool? # View source #chat_id : Int64 # #chat_id= ( chat_id : Int64 ) # View source #chat_id? : Int64? # #custom_title : String? # View source #inviter : User? # USER API ONLY View source #is_anonymous : Bool? # View source #is_member : Bool? # View source #joined_date : Time? # View source #kick ( until_date = nil ) # View source #promote ( ** permissions ) # View source #restrict ( permissions , until_date = nil ) # View source #status : String # View source #unban # View source #until_date : Time? # View source #user : User # View source","title":"ChatMember"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember","text":"","title":"ChatMember"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember.from_user(user)","text":"View source","title":".from_user"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#can_add_web_page_previews","text":"View source","title":"#can_add_web_page_previews"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#can_be_edited","text":"View source","title":"#can_be_edited"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#can_change_info","text":"View source","title":"#can_change_info"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#can_delete_messages","text":"View source","title":"#can_delete_messages"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#can_edit_messages","text":"View source","title":"#can_edit_messages"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#can_invite_users","text":"View source","title":"#can_invite_users"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#can_manage_chat","text":"View source","title":"#can_manage_chat"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#can_pin_messages","text":"View source","title":"#can_pin_messages"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#can_post_messages","text":"View source","title":"#can_post_messages"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#can_promote_members","text":"View source","title":"#can_promote_members"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#can_restrict_members","text":"View source","title":"#can_restrict_members"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#can_send_media_messages","text":"View source","title":"#can_send_media_messages"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#can_send_messages","text":"View source","title":"#can_send_messages"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#can_send_other_messages","text":"View source","title":"#can_send_other_messages"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#can_send_polls","text":"View source","title":"#can_send_polls"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#chat_id","text":"","title":"#chat_id"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#chat_id=(chat_id)","text":"View source","title":"#chat_id="},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#chat_id?","text":"","title":"#chat_id?"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#custom_title","text":"View source","title":"#custom_title"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#inviter","text":"USER API ONLY View source","title":"#inviter"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#is_anonymous","text":"View source","title":"#is_anonymous"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#is_member","text":"View source","title":"#is_member"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#joined_date","text":"View source","title":"#joined_date"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#kick(until_date)","text":"View source","title":"#kick"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#promote(**)","text":"View source","title":"#promote"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#restrict(permissions,until_date)","text":"View source","title":"#restrict"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#status","text":"View source","title":"#status"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#unban","text":"View source","title":"#unban"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#until_date","text":"View source","title":"#until_date"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember#user","text":"View source","title":"#user"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/","text":"class Tourmaline::ChatMemberUpdated inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #chat : Chat # View source #date : Time # View source #from : User # View source #invite_link : ChatInviteLink? # View source #new_chat_member : ChatMember # View source #old_chat_member : ChatMember # View source","title":"ChatMemberUpdated"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated","text":"","title":"ChatMemberUpdated"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#chat","text":"View source","title":"#chat"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#date","text":"View source","title":"#date"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#from","text":"View source","title":"#from"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#invite_link","text":"View source","title":"#invite_link"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#new_chat_member","text":"View source","title":"#new_chat_member"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#old_chat_member","text":"View source","title":"#old_chat_member"},{"location":"api_reference/Tourmaline/ChatPermissions/","text":"class Tourmaline::ChatPermissions inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( can_send_messages = true , can_send_media_messages = true , can_send_polls = true , can_send_other_messages = true , can_add_web_page_previews = true , can_change_info = true , can_invite_users = true , can_pin_messages = true ) # View source Methods # #can_add_web_page_previews : Bool # View source #can_add_web_page_previews= ( can_add_web_page_previews : Bool ) # View source #can_change_info : Bool # View source #can_change_info= ( can_change_info : Bool ) # View source #can_invite_users : Bool # View source #can_invite_users= ( can_invite_users : Bool ) # View source #can_pin_messages : Bool # View source #can_pin_messages= ( can_pin_messages : Bool ) # View source #can_send_media_messages : Bool # View source #can_send_media_messages= ( can_send_media_messages : Bool ) # View source #can_send_messages : Bool # View source #can_send_messages= ( can_send_messages : Bool ) # View source #can_send_other_messages : Bool # View source #can_send_other_messages= ( can_send_other_messages : Bool ) # View source #can_send_polls : Bool # View source #can_send_polls= ( can_send_polls : Bool ) # View source","title":"ChatPermissions"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions","text":"","title":"ChatPermissions"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_add_web_page_previews","text":"View source","title":"#can_add_web_page_previews"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_add_web_page_previews=(can_add_web_page_previews)","text":"View source","title":"#can_add_web_page_previews="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_change_info","text":"View source","title":"#can_change_info"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_change_info=(can_change_info)","text":"View source","title":"#can_change_info="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_invite_users","text":"View source","title":"#can_invite_users"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_invite_users=(can_invite_users)","text":"View source","title":"#can_invite_users="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_pin_messages","text":"View source","title":"#can_pin_messages"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_pin_messages=(can_pin_messages)","text":"View source","title":"#can_pin_messages="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_media_messages","text":"View source","title":"#can_send_media_messages"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_media_messages=(can_send_media_messages)","text":"View source","title":"#can_send_media_messages="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_messages","text":"View source","title":"#can_send_messages"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_messages=(can_send_messages)","text":"View source","title":"#can_send_messages="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_other_messages","text":"View source","title":"#can_send_other_messages"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_other_messages=(can_send_other_messages)","text":"View source","title":"#can_send_other_messages="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_polls","text":"View source","title":"#can_send_polls"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_polls=(can_send_polls)","text":"View source","title":"#can_send_polls="},{"location":"api_reference/Tourmaline/ChatPhoto/","text":"class Tourmaline::ChatPhoto inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #big_file_id : String # View source #big_file_unique_id : String # View source #small_file_id : String # View source #small_file_unique_id : String # View source","title":"ChatPhoto"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto","text":"","title":"ChatPhoto"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto#big_file_id","text":"View source","title":"#big_file_id"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto#big_file_unique_id","text":"View source","title":"#big_file_unique_id"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto#small_file_id","text":"View source","title":"#small_file_id"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto#small_file_unique_id","text":"View source","title":"#small_file_unique_id"},{"location":"api_reference/Tourmaline/ChosenInlineResult/","text":"class Tourmaline::ChosenInlineResult inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #from : User # View source #inline_message_id : String? # View source #location : Location? # View source #query : String # View source #result_id : String # View source","title":"ChosenInlineResult"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult","text":"","title":"ChosenInlineResult"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#from","text":"View source","title":"#from"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#inline_message_id","text":"View source","title":"#inline_message_id"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#location","text":"View source","title":"#location"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#query","text":"View source","title":"#query"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#result_id","text":"View source","title":"#result_id"},{"location":"api_reference/Tourmaline/Client/","text":"class Tourmaline::Client inherits Reference # The Client class is the base class for all Tourmaline based bots. Extend this class to create your own bots, or create an instance of Client and add event handlers to it. Included modules Tourmaline::Client::CoreMethods Tourmaline::Client::GameMethods Tourmaline::Client::PassportMethods Tourmaline::Client::PaymentMethods Tourmaline::Client::PollMethods Tourmaline::Client::StickerMethods Tourmaline::Client::TDLightMethods Tourmaline::Client::WebhookMethods Tourmaline::EventHandler::Annotator Tourmaline::Logger Constants # DEFAULT_API_URL = \"https://api.telegram.org/\" # DEFAULT_COMMAND_PREFIXES = [ \"/\" ] # Constructors # .new ( * , bot_token : String? = nil , user_token : String? = nil , endpoint = DEFAULT_API_URL , persistence : Persistence = NilPersistence . new , set_commands = false , default_parse_mode : ParseMode = ParseMode :: Markdown , pool_capacity = 200 , initial_pool_size = 20 , pool_timeout = 0.1 , proxy = nil , proxy_uri = nil , proxy_host = nil , proxy_port = nil , proxy_user = nil , proxy_pass = nil ) # Create a new instance of Tourmaline::Client . Named Arguments # bot_token the bot token you should've received from @BotFather user_token the token returned by the #login method endpoint the API endpoint to use for requests; default is https://api.telegram.org , but for TDLight methods to work you may consider hosting your own instance or using one of the official ones such as https://telegram.rest persistence the persistence strategy to use set_commands if true, set_my_commands will be run on start and any commands marked with register will be registered with BotFather. pool_capacity the maximum number of concurrent HTTP connections to use initial_pool_size the number of HTTP::Client instances to create on init pool_timeout How long to wait for a new client to be available if the pool is full before throwing a TimeoutError proxy an instance of HTTP::Proxy::Client to use; if set, overrides the following proxy_ args proxy_uri a URI to use when connecting to the proxy; can be a URI instance or a String proxy_host if no proxy_uri is provided, this will be the host for the URI proxy_port if no proxy_uri is provided, this will be the port for the URI proxy_user a username to use for a proxy that requires authentication proxy_pass a password to use for a proxy that requires authentication View source Class methods # .default_command_prefixes : Array ( String ) # Default prefixes to use for commands View source .default_command_prefixes= ( default_command_prefixes : Array ( String )) # Default prefixes to use for commands View source Methods # #add_event_handler ( handler : EventHandler ) # Add an EventHandler instance to the handler stack View source #bot : User # Gets the name of the Client at the time the Client was started. Refreshing can be done by setting @bot to get_me . View source #bot? : User? # Gets the name of the Client at the time the Client was started. Refreshing can be done by setting @bot to get_me . View source #bot_token : String? # View source #bot_token= ( bot_token : String? ) # View source #default_parse_mode : ParseMode # Default parse mode to use for commands when it isn't included explicitly View source #default_parse_mode= ( default_parse_mode : ParseMode ) # Default parse mode to use for commands when it isn't included explicitly View source #handle_update ( update : Update ) # Calls all handlers in the stack with the given update and this client instance. View source #remove_event_handler ( handler : EventHandler ) # Remove an existing event handler from the stack View source #send_menu ( chat , menu : RoutedMenu , ** kwargs ) # View source #use ( middleware : Middleware ) # View source #user_token : String? # View source #user_token= ( user_token : String? ) # View source","title":"Client"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client","text":"The Client class is the base class for all Tourmaline based bots. Extend this class to create your own bots, or create an instance of Client and add event handlers to it.","title":"Client"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client::DEFAULT_API_URL","text":"","title":"DEFAULT_API_URL"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client::DEFAULT_COMMAND_PREFIXES","text":"","title":"DEFAULT_COMMAND_PREFIXES"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client.new(*,bot_token,user_token,endpoint,persistence,set_commands,default_parse_mode,pool_capacity,initial_pool_size,pool_timeout,proxy,proxy_uri,proxy_host,proxy_port,proxy_user,proxy_pass)","text":"Create a new instance of Tourmaline::Client .","title":".new"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client.new(*,bot_token,user_token,endpoint,persistence,set_commands,default_parse_mode,pool_capacity,initial_pool_size,pool_timeout,proxy,proxy_uri,proxy_host,proxy_port,proxy_user,proxy_pass)--named-arguments","text":"bot_token the bot token you should've received from @BotFather user_token the token returned by the #login method endpoint the API endpoint to use for requests; default is https://api.telegram.org , but for TDLight methods to work you may consider hosting your own instance or using one of the official ones such as https://telegram.rest persistence the persistence strategy to use set_commands if true, set_my_commands will be run on start and any commands marked with register will be registered with BotFather. pool_capacity the maximum number of concurrent HTTP connections to use initial_pool_size the number of HTTP::Client instances to create on init pool_timeout How long to wait for a new client to be available if the pool is full before throwing a TimeoutError proxy an instance of HTTP::Proxy::Client to use; if set, overrides the following proxy_ args proxy_uri a URI to use when connecting to the proxy; can be a URI instance or a String proxy_host if no proxy_uri is provided, this will be the host for the URI proxy_port if no proxy_uri is provided, this will be the port for the URI proxy_user a username to use for a proxy that requires authentication proxy_pass a password to use for a proxy that requires authentication View source","title":"Named Arguments"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client.default_command_prefixes","text":"Default prefixes to use for commands View source","title":".default_command_prefixes"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client.default_command_prefixes=(default_command_prefixes)","text":"Default prefixes to use for commands View source","title":".default_command_prefixes="},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#add_event_handler(handler)","text":"Add an EventHandler instance to the handler stack View source","title":"#add_event_handler"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#bot","text":"Gets the name of the Client at the time the Client was started. Refreshing can be done by setting @bot to get_me . View source","title":"#bot"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#bot?","text":"Gets the name of the Client at the time the Client was started. Refreshing can be done by setting @bot to get_me . View source","title":"#bot?"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#bot_token","text":"View source","title":"#bot_token"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#bot_token=(bot_token)","text":"View source","title":"#bot_token="},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#default_parse_mode","text":"Default parse mode to use for commands when it isn't included explicitly View source","title":"#default_parse_mode"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#default_parse_mode=(default_parse_mode)","text":"Default parse mode to use for commands when it isn't included explicitly View source","title":"#default_parse_mode="},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#handle_update(update)","text":"Calls all handlers in the stack with the given update and this client instance. View source","title":"#handle_update"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#remove_event_handler(handler)","text":"Remove an existing event handler from the stack View source","title":"#remove_event_handler"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_menu(chat,menu,**)","text":"View source","title":"#send_menu"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#use(middleware)","text":"View source","title":"#use"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#user_token","text":"View source","title":"#user_token"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#user_token=(user_token)","text":"View source","title":"#user_token="},{"location":"api_reference/Tourmaline/Client/CoreMethods/","text":"module Tourmaline::Client::CoreMethods # Direct including types Tourmaline::Client Methods # #answer_callback_query ( callback_query_id , text = nil , show_alert = nil , url = nil , cache_time = nil ) # Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, true is returned. Note Alternatively, the user can be redirected to the specified Game URL ( url ). For this option to work, you must first create a game for your bot via @Botfather and accept the terms. Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter. View source #answer_inline_query ( inline_query_id , results , cache_time = nil , is_personal = nil , next_offset = nil , switch_pm_text = nil , switch_pm_parameter = nil ) # Use this method to send answers to an inline query. On success, True is returned. No more than 50 results per query are allowed. View source #approve_chat_join_request ( chat , user ) # Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success. View source #ban_chat_sender_chat ( chat , sender_chat ) # Use this method to ban a channel chat in a supergroup or a channel. The owner of the chat will not be able to send messages and join live streams on behalf of the chat, unless it is unbanned first. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns True on success. View source #close # Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns true on success. Requires no parameters. View source #copy_message ( chat , from_chat , message , caption = nil , parse_mode = @default_parse_mode , caption_entities = [] of MessageEntity , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # View source #create_chat_invite_link ( chat , name = nil , expire_date = nil , member_limit = nil , creates_join_request = false ) # Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object. View source #decline_chat_join_request ( chat , user ) # Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success. View source #delete_chat_photo ( chat ) # Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. Note: In regular groups (non-supergroups), this method will only work if the All Members Are Admins setting is off in the target group. View source #delete_message ( chat , message ) # Use this method to delete a Message , including service messages, with the following limitations: - A message can only be deleted if it was sent less than 48 hours ago. - Bots can delete outgoing messages in private chats, groups, and supergroups. - Bots can delete incoming messages in private chats. - Bots granted can_post_messages permissions can delete outgoing messages in channels. - If the bot is an administrator of a group, it can delete any message there. - If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there. Returns true on success. View source #delete_my_commands ( scope : BotCommandScope? = nil , language_code : String? = nil ) # Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Returns True on success. View source #download_file ( file_id , path = nil ) # Given a file_id, download the file and return its path on the file system. View source #edit_chat_invite_link ( chat , invite_link , name = nil , expire_date = nil , member_limit = nil , creates_join_request = false ) # Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a ChatInviteLink object. View source #edit_message_caption ( chat , caption , message = nil , inline_message = nil , parse_mode = @default_parse_mode , caption_entities = [] of MessageEntity , reply_markup = nil ) # Use this method to edit captions of messages. On success, if edited message is sent by the bot, the edited Message is returned, otherwise true is returned. View source #edit_message_live_location ( chat , latitude , longitude , horizontal_accuracy = nil , live_period = nil , proximity_alert_radius = nil , heading = nil , message = nil , inline_message = nil , reply_markup = nil ) # Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to #stopMessageLiveLocation . On success, if the edited message wasn't by the bot, the edited Message is returned, otherwise true is returned. View source #edit_message_media ( chat , media , message = nil , inline_message = nil , reply_markup = nil ) # View source #edit_message_reply_markup ( chat , message = nil , inline_message = nil , reply_markup = nil ) # Use this method to edit only the reply markup of messages. On success, if edited message is sent by the bot, the edited Message is returned, otherwise true is returned. View source #edit_message_text ( text , chat = nil , message = nil , inline_message = nil , parse_mode = @default_parse_mode , entities = [] of MessageEntity , disable_link_preview = false , reply_markup = nil ) # Use this method to edit text and game messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise true is returned. View source #export_chat_invite_link ( chat ) # Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as String on success. View source #forward_message ( chat , from_chat , message , disable_notification = false ) # Use this method to forward messages of any kind. On success, the sent Message is returned. View source #get_chat ( chat ) # Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success. Tip When using TDLight this method isn't restructed to chats/users your bot is familiar with. Warning When using TDLight this method will first check for a locally cached chat, then use MTProto if that fails. When using MTProto this method is heavily rate limited, so be careful. View source #get_chat_administrators ( chat ) # Use this method to get a list of administrators in a chat. On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned. View source #get_chat_member ( chat , user ) # Use this method to get information about a member of a chat. Returns a ChatMember object on success. View source #get_chat_members_count ( chat ) # Use this method to get the number of members in a chat. Returns Int32 on success. View source #get_file ( file_id ) # Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a TFile object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path> , where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling #get_file again. To simplify retrieving a link for a file, use the #get_file_link method. View source #get_file_link ( file_id ) # Takes a file id and returns a link to download the file. The link will be valid for at least one hour. View source #get_me # A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a User object. View source #get_my_commands ( scope : BotCommandScope? = nil , language_code : String? = nil ) # Use this method to get the current list of the bot's commands. Requires no parameters. Returns Array of BotCommand on success. View source #get_updates ( offset = @next_offset , limit = 100 , timeout = 0 , allowed_updates = [] of String ) # Use this method to receive incoming updates using long polling ( wiki ). An Array of Update objects is returned. View source #get_user_profile_photos ( user , offset = nil , limit = nil ) # Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object. View source #is_admin? ( chat_id ) # Convenience method to check if this bot is an admin in the current chat. See Client#get_chat_administrators for more info. Note: This method should be used sparingly. It's much better to cache admins. View source #kick_chat_member ( chat , user , until_date = nil , revoke_messages = nil ) # Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. Note: In regular groups (non-supergroups), this method will only work if the All Members Are Admins setting is off in the target group. Otherwise members may only be removed by the group's creator or by the member that added them. View source #leave_chat ( chat ) # Use this method for your bot to leave a group, supergroup, or channel. Returns true on success. View source #log_out # Use this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns true on success. Requires no parameters. View source #mute_chat_member ( chat , user , until_date = nil ) # Use this method to easily mute a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin right. Works by calling restrict_chat_member with all permissions set to false . Returns true on success. View source #next_offset : Int64 # View source #pin_chat_message ( chat , message , disable_notification = false ) # Use this method to pin a message in a group, a supergroup, or a channel. The bot must be an administrator in the chat for this to work and must have the can_pin_messages admin right in the supergroup or can_edit_messages admin right in the channel. Returns true on success. View source #poll ( delete_webhook = false ) # Start polling for updates. This method uses a combination of #get_updates and #handle_update to send continuously check Telegram's servers for updates. View source #polling : Bool # View source #promote_chat_member ( chat , user , is_anonymous = false , until_date = nil , can_manage_chat = nil , can_change_info = nil , can_post_messages = nil , can_edit_messages = nil , can_delete_messages = nil , can_invite_users = nil , can_manage_voice_chats = nil , can_restrict_members = nil , can_pin_messages = nil , can_promote_members = nil ) # Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user. Returns true on success. View source #restrict_chat_member ( chat , user , permissions , until_date = nil ) # Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass True for all permissions to lift restrictions from a user. Returns true on success. View source #revoke_chat_invite_link ( chat , invite_link ) # Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as ChatInviteLink object. View source #send_animation ( chat , animation , duration = nil , width = nil , height = nil , thumb = nil , caption = nil , caption_entities = [] of MessageEntity , parse_mode = @default_parse_mode , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # View source #send_audio ( chat , audio , caption = nil , caption_entities = [] of MessageEntity , duration = nil , preformer = nil , title = nil , parse_mode = @default_parse_mode , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .mp3 format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future. For sending voice messages, use the #sendVoice method instead. TODO: Add filesize checking and validation. View source #send_basketball ( chat , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send a basketball (\ud83c\udfc0 emoji), which will have a random value from 1 to 6. On success, the sent Message is returned. View source #send_bowling ( chat , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send a bowling (\ud83c\udfb3 emoji), which will have a random value from 1 to 6. On success, the sent Message is returned. View source #send_chat_action ( chat , action : ChatAction ) # Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns true on success. Example: The ImageBot needs some time to process a request and upload the image. Instead of sending a text message along the lines of \u201cRetrieving image, please wait\u2026\u201d, the bot may use #sendChatAction with action = upload_photo. The user will see a \u201csending photo\u201d status for the bot. We only recommend using this method when a response from the bot will take a noticeable amount of time to arrive. View source #send_contact ( chat , phone_number , first_name , last_name = nil , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send phone contacts. On success, the sent Message is returned. View source #send_dart ( chat , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send a dart (\ud83c\udfaf emoji), which will have a random value from 1 to 6. On success, the sent Message is returned. View source #send_dice ( chat , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send a dice (\ud83c\udfb2 emoji), which will have a random value from 1 to 6. On success, the sent Message is returned. View source #send_document ( chat , document , caption = nil , caption_entities = [] of MessageEntity , parse_mode = @default_parse_mode , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future. TODO: Add filesize checking and validation. View source #send_football ( chat , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send a football (\u26bd\ufe0f emoji), which will have a random value from 1 to 5. On success, the sent Message is returned. View source #send_location ( chat , latitude , longitude , horizontal_accuracy = nil , live_period = nil , proximity_alert_radius = nil , heading = nil , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send point on the map. On success, the sent Message is returned. View source #send_media_group ( chat , media : Array ( InputMediaPhoto | InputMediaVideo | InputMediaAudio | InputMediaDocument ), disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false ) # Use this method to send a group of photos or videos as an album. On success, an array of the sent Messages is returned. View source #send_message ( chat , text , parse_mode = @default_parse_mode , entities = [] of MessageEntity , link_preview = false , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send text messages. On success, the sent Message is returned. View source #send_photo ( chat , photo , caption = nil , parse_mode = @default_parse_mode , caption_entities = [] of MessageEntity , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send photos. On success, the sent Message is returned. View source #send_slot_machine ( chat , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send a slot_machine (\ud83c\udfb0 emoji), which will have a random value from 1 to 64. On success, the sent Message is returned. View source #send_soccerball ( chat , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send a soccerball (\u26bd\ufe0f emoji), which will have a random value from 1 to 5. On success, the sent Message is returned. View source #send_venue ( chat , latitude , longitude , title , address , foursquare_id = nil , foursquare_type = nil , google_place_id = nil , google_place_type = nil , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send information about a venue. On success, the sent Message is returned. View source #send_video ( chat , video , duration = nil , width = nil , height = nil , caption = nil , caption_entities = [] of MessageEntity , parse_mode = @default_parse_mode , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future. TODO: Add filesize checking and validation. View source #send_video_note ( chat , video_note , duration = nil , width = nil , height = nil , caption = nil , caption_entities = [] of MessageEntity , parse_mode = @default_parse_mode , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # As of v.4.0 , Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned. View source #send_voice ( chat , voice , caption = nil , caption_entities = [] of MessageEntity , duration = nil , preformer = nil , title = nil , disable_notification = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Audio or Document ). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future. TODO: Add filesize checking and validation. View source #set_chat_admininstrator_custom_title ( chat , user , custom_title ) # Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success. View source #set_chat_description ( chat , description ) # Use this method to change the description of a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. View source #set_chat_permissions ( chat , permissions ) # Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members admin rights. Returns True on success. View source #set_chat_photo ( chat , photo ) # Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. Note: In regular groups (non-supergroups), this method will only work if the All Members Are Admins setting is off in the target group. View source #set_chat_title ( chat , title ) # Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. Note: In regular groups (non-supergroups), this method will only work if the All Members Are Admins setting is off in the target group. View source #set_my_commands ( commands : Array ( BotCommand | NamedTuple ()), scope : BotCommandScope? = nil , language_code : String? = nil ) # Use this method to change the list of the bot's commands. Returns true on success. View source #stop_message_live_location ( chat , message = nil , inline_message = nil , reply_markup = nil ) # Use this method to stop updating a live location message before live_period expires. On success, if the message was sent by the bot, the sent Message is returned, otherwise true is returned. View source #stop_polling # Stops the bot from polling. View source #unban_chat_member ( chat , user , only_if_banned = false ) # Use this method to unban a previously kicked user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. Returns true on success. View source #unban_chat_sender_chat ( chat , sender_chat ) # Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns True on success. View source #unpin_all_chat_messages ( chat ) # View source #unpin_chat_message ( chat , message = nil ) # Use this method to unpin a message in a group, a supergroup, or a channel. The bot must be an administrator in the chat for this to work and must have the \u2018can_pin_messages\u2019 admin right in the supergroup or \u2018can_edit_messages\u2019 admin right in the channel. Returns true on success. View source","title":"CoreMethods"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods","text":"","title":"CoreMethods"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#answer_callback_query(callback_query_id,text,show_alert,url,cache_time)","text":"Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, true is returned. Note Alternatively, the user can be redirected to the specified Game URL ( url ). For this option to work, you must first create a game for your bot via @Botfather and accept the terms. Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter. View source","title":"#answer_callback_query"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#answer_inline_query(inline_query_id,results,cache_time,is_personal,next_offset,switch_pm_text,switch_pm_parameter)","text":"Use this method to send answers to an inline query. On success, True is returned. No more than 50 results per query are allowed. View source","title":"#answer_inline_query"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#approve_chat_join_request(chat,user)","text":"Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success. View source","title":"#approve_chat_join_request"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#ban_chat_sender_chat(chat,sender_chat)","text":"Use this method to ban a channel chat in a supergroup or a channel. The owner of the chat will not be able to send messages and join live streams on behalf of the chat, unless it is unbanned first. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns True on success. View source","title":"#ban_chat_sender_chat"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#close","text":"Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns true on success. Requires no parameters. View source","title":"#close"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#copy_message(chat,from_chat,message,caption,parse_mode,caption_entities,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"View source","title":"#copy_message"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#create_chat_invite_link(chat,name,expire_date,member_limit,creates_join_request)","text":"Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object. View source","title":"#create_chat_invite_link"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#decline_chat_join_request(chat,user)","text":"Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success. View source","title":"#decline_chat_join_request"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#delete_chat_photo(chat)","text":"Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. Note: In regular groups (non-supergroups), this method will only work if the All Members Are Admins setting is off in the target group. View source","title":"#delete_chat_photo"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#delete_message(chat,message)","text":"Use this method to delete a Message , including service messages, with the following limitations: - A message can only be deleted if it was sent less than 48 hours ago. - Bots can delete outgoing messages in private chats, groups, and supergroups. - Bots can delete incoming messages in private chats. - Bots granted can_post_messages permissions can delete outgoing messages in channels. - If the bot is an administrator of a group, it can delete any message there. - If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there. Returns true on success. View source","title":"#delete_message"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#delete_my_commands(scope,language_code)","text":"Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Returns True on success. View source","title":"#delete_my_commands"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#download_file(file_id,path)","text":"Given a file_id, download the file and return its path on the file system. View source","title":"#download_file"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#edit_chat_invite_link(chat,invite_link,name,expire_date,member_limit,creates_join_request)","text":"Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a ChatInviteLink object. View source","title":"#edit_chat_invite_link"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#edit_message_caption(chat,caption,message,inline_message,parse_mode,caption_entities,reply_markup)","text":"Use this method to edit captions of messages. On success, if edited message is sent by the bot, the edited Message is returned, otherwise true is returned. View source","title":"#edit_message_caption"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#edit_message_live_location(chat,latitude,longitude,horizontal_accuracy,live_period,proximity_alert_radius,heading,message,inline_message,reply_markup)","text":"Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to #stopMessageLiveLocation . On success, if the edited message wasn't by the bot, the edited Message is returned, otherwise true is returned. View source","title":"#edit_message_live_location"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#edit_message_media(chat,media,message,inline_message,reply_markup)","text":"View source","title":"#edit_message_media"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#edit_message_reply_markup(chat,message,inline_message,reply_markup)","text":"Use this method to edit only the reply markup of messages. On success, if edited message is sent by the bot, the edited Message is returned, otherwise true is returned. View source","title":"#edit_message_reply_markup"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#edit_message_text(text,chat,message,inline_message,parse_mode,entities,disable_link_preview,reply_markup)","text":"Use this method to edit text and game messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise true is returned. View source","title":"#edit_message_text"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#export_chat_invite_link(chat)","text":"Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as String on success. View source","title":"#export_chat_invite_link"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#forward_message(chat,from_chat,message,disable_notification)","text":"Use this method to forward messages of any kind. On success, the sent Message is returned. View source","title":"#forward_message"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#get_chat(chat)","text":"Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success. Tip When using TDLight this method isn't restructed to chats/users your bot is familiar with. Warning When using TDLight this method will first check for a locally cached chat, then use MTProto if that fails. When using MTProto this method is heavily rate limited, so be careful. View source","title":"#get_chat"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#get_chat_administrators(chat)","text":"Use this method to get a list of administrators in a chat. On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned. View source","title":"#get_chat_administrators"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#get_chat_member(chat,user)","text":"Use this method to get information about a member of a chat. Returns a ChatMember object on success. View source","title":"#get_chat_member"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#get_chat_members_count(chat)","text":"Use this method to get the number of members in a chat. Returns Int32 on success. View source","title":"#get_chat_members_count"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#get_file(file_id)","text":"Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a TFile object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path> , where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling #get_file again. To simplify retrieving a link for a file, use the #get_file_link method. View source","title":"#get_file"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#get_file_link(file_id)","text":"Takes a file id and returns a link to download the file. The link will be valid for at least one hour. View source","title":"#get_file_link"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#get_me","text":"A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a User object. View source","title":"#get_me"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#get_my_commands(scope,language_code)","text":"Use this method to get the current list of the bot's commands. Requires no parameters. Returns Array of BotCommand on success. View source","title":"#get_my_commands"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#get_updates(offset,limit,timeout,allowed_updates)","text":"Use this method to receive incoming updates using long polling ( wiki ). An Array of Update objects is returned. View source","title":"#get_updates"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#get_user_profile_photos(user,offset,limit)","text":"Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object. View source","title":"#get_user_profile_photos"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#is_admin?(chat_id)","text":"Convenience method to check if this bot is an admin in the current chat. See Client#get_chat_administrators for more info. Note: This method should be used sparingly. It's much better to cache admins. View source","title":"#is_admin?"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#kick_chat_member(chat,user,until_date,revoke_messages)","text":"Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. Note: In regular groups (non-supergroups), this method will only work if the All Members Are Admins setting is off in the target group. Otherwise members may only be removed by the group's creator or by the member that added them. View source","title":"#kick_chat_member"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#leave_chat(chat)","text":"Use this method for your bot to leave a group, supergroup, or channel. Returns true on success. View source","title":"#leave_chat"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#log_out","text":"Use this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns true on success. Requires no parameters. View source","title":"#log_out"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#mute_chat_member(chat,user,until_date)","text":"Use this method to easily mute a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin right. Works by calling restrict_chat_member with all permissions set to false . Returns true on success. View source","title":"#mute_chat_member"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#next_offset","text":"View source","title":"#next_offset"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#pin_chat_message(chat,message,disable_notification)","text":"Use this method to pin a message in a group, a supergroup, or a channel. The bot must be an administrator in the chat for this to work and must have the can_pin_messages admin right in the supergroup or can_edit_messages admin right in the channel. Returns true on success. View source","title":"#pin_chat_message"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#poll(delete_webhook)","text":"Start polling for updates. This method uses a combination of #get_updates and #handle_update to send continuously check Telegram's servers for updates. View source","title":"#poll"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#polling","text":"View source","title":"#polling"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#promote_chat_member(chat,user,is_anonymous,until_date,can_manage_chat,can_change_info,can_post_messages,can_edit_messages,can_delete_messages,can_invite_users,can_manage_voice_chats,can_restrict_members,can_pin_messages,can_promote_members)","text":"Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user. Returns true on success. View source","title":"#promote_chat_member"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#restrict_chat_member(chat,user,permissions,until_date)","text":"Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass True for all permissions to lift restrictions from a user. Returns true on success. View source","title":"#restrict_chat_member"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#revoke_chat_invite_link(chat,invite_link)","text":"Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as ChatInviteLink object. View source","title":"#revoke_chat_invite_link"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_animation(chat,animation,duration,width,height,thumb,caption,caption_entities,parse_mode,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"View source","title":"#send_animation"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_audio(chat,audio,caption,caption_entities,duration,preformer,title,parse_mode,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .mp3 format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future. For sending voice messages, use the #sendVoice method instead. TODO: Add filesize checking and validation. View source","title":"#send_audio"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_basketball(chat,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send a basketball (\ud83c\udfc0 emoji), which will have a random value from 1 to 6. On success, the sent Message is returned. View source","title":"#send_basketball"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_bowling(chat,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send a bowling (\ud83c\udfb3 emoji), which will have a random value from 1 to 6. On success, the sent Message is returned. View source","title":"#send_bowling"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_chat_action(chat,action)","text":"Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns true on success. Example: The ImageBot needs some time to process a request and upload the image. Instead of sending a text message along the lines of \u201cRetrieving image, please wait\u2026\u201d, the bot may use #sendChatAction with action = upload_photo. The user will see a \u201csending photo\u201d status for the bot. We only recommend using this method when a response from the bot will take a noticeable amount of time to arrive. View source","title":"#send_chat_action"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_contact(chat,phone_number,first_name,last_name,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send phone contacts. On success, the sent Message is returned. View source","title":"#send_contact"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_dart(chat,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send a dart (\ud83c\udfaf emoji), which will have a random value from 1 to 6. On success, the sent Message is returned. View source","title":"#send_dart"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_dice(chat,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send a dice (\ud83c\udfb2 emoji), which will have a random value from 1 to 6. On success, the sent Message is returned. View source","title":"#send_dice"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_document(chat,document,caption,caption_entities,parse_mode,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future. TODO: Add filesize checking and validation. View source","title":"#send_document"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_football(chat,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send a football (\u26bd\ufe0f emoji), which will have a random value from 1 to 5. On success, the sent Message is returned. View source","title":"#send_football"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_location(chat,latitude,longitude,horizontal_accuracy,live_period,proximity_alert_radius,heading,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send point on the map. On success, the sent Message is returned. View source","title":"#send_location"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_media_group(chat,media,disable_notification,reply_to_message,allow_sending_without_reply)","text":"Use this method to send a group of photos or videos as an album. On success, an array of the sent Messages is returned. View source","title":"#send_media_group"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_message(chat,text,parse_mode,entities,link_preview,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send text messages. On success, the sent Message is returned. View source","title":"#send_message"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_photo(chat,photo,caption,parse_mode,caption_entities,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send photos. On success, the sent Message is returned. View source","title":"#send_photo"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_slot_machine(chat,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send a slot_machine (\ud83c\udfb0 emoji), which will have a random value from 1 to 64. On success, the sent Message is returned. View source","title":"#send_slot_machine"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_soccerball(chat,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send a soccerball (\u26bd\ufe0f emoji), which will have a random value from 1 to 5. On success, the sent Message is returned. View source","title":"#send_soccerball"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_venue(chat,latitude,longitude,title,address,foursquare_id,foursquare_type,google_place_id,google_place_type,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send information about a venue. On success, the sent Message is returned. View source","title":"#send_venue"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_video(chat,video,duration,width,height,caption,caption_entities,parse_mode,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future. TODO: Add filesize checking and validation. View source","title":"#send_video"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_video_note(chat,video_note,duration,width,height,caption,caption_entities,parse_mode,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"As of v.4.0 , Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned. View source","title":"#send_video_note"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#send_voice(chat,voice,caption,caption_entities,duration,preformer,title,disable_notification,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Audio or Document ). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future. TODO: Add filesize checking and validation. View source","title":"#send_voice"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#set_chat_admininstrator_custom_title(chat,user,custom_title)","text":"Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success. View source","title":"#set_chat_admininstrator_custom_title"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#set_chat_description(chat,description)","text":"Use this method to change the description of a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. View source","title":"#set_chat_description"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#set_chat_permissions(chat,permissions)","text":"Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members admin rights. Returns True on success. View source","title":"#set_chat_permissions"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#set_chat_photo(chat,photo)","text":"Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. Note: In regular groups (non-supergroups), this method will only work if the All Members Are Admins setting is off in the target group. View source","title":"#set_chat_photo"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#set_chat_title(chat,title)","text":"Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. Note: In regular groups (non-supergroups), this method will only work if the All Members Are Admins setting is off in the target group. View source","title":"#set_chat_title"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#set_my_commands(commands,scope,language_code)","text":"Use this method to change the list of the bot's commands. Returns true on success. View source","title":"#set_my_commands"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#stop_message_live_location(chat,message,inline_message,reply_markup)","text":"Use this method to stop updating a live location message before live_period expires. On success, if the message was sent by the bot, the sent Message is returned, otherwise true is returned. View source","title":"#stop_message_live_location"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#stop_polling","text":"Stops the bot from polling. View source","title":"#stop_polling"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#unban_chat_member(chat,user,only_if_banned)","text":"Use this method to unban a previously kicked user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. Returns true on success. View source","title":"#unban_chat_member"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#unban_chat_sender_chat(chat,sender_chat)","text":"Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns True on success. View source","title":"#unban_chat_sender_chat"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#unpin_all_chat_messages(chat)","text":"View source","title":"#unpin_all_chat_messages"},{"location":"api_reference/Tourmaline/Client/CoreMethods/#Tourmaline::Client::CoreMethods#unpin_chat_message(chat,message)","text":"Use this method to unpin a message in a group, a supergroup, or a channel. The bot must be an administrator in the chat for this to work and must have the \u2018can_pin_messages\u2019 admin right in the supergroup or \u2018can_edit_messages\u2019 admin right in the channel. Returns true on success. View source","title":"#unpin_chat_message"},{"location":"api_reference/Tourmaline/Client/GameMethods/","text":"module Tourmaline::Client::GameMethods # Direct including types Tourmaline::Client Methods # #get_game_high_scores ( user_id , chat_id = nil , message_id = nil , inline_message_id = nil ) # Use this method to get data for high score tables. Will return the score of the specified user and several of his neighbors in a game. On success, returns an Array of GameHighScore objects. This method will currently return scores for the target user, plus two of his closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change. View source #send_game ( chat_id , game_short_name , disable_notification = nil , reply_to_message_id = nil , reply_markup = nil ) # Use this method to send a game. On success, the sent Message is returned. View source #set_game_score ( user_id , score , force = false , disable_edit_message = nil , chat_id = nil , message_id = nil , inline_message_id = nil ) # Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited Message, otherwise returns true . Raises an error, if the new score is not greater than the user's current score in the chat and force is false (default). View source","title":"GameMethods"},{"location":"api_reference/Tourmaline/Client/GameMethods/#Tourmaline::Client::GameMethods","text":"","title":"GameMethods"},{"location":"api_reference/Tourmaline/Client/GameMethods/#Tourmaline::Client::GameMethods-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Client/GameMethods/#Tourmaline::Client::GameMethods#get_game_high_scores(user_id,chat_id,message_id,inline_message_id)","text":"Use this method to get data for high score tables. Will return the score of the specified user and several of his neighbors in a game. On success, returns an Array of GameHighScore objects. This method will currently return scores for the target user, plus two of his closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change. View source","title":"#get_game_high_scores"},{"location":"api_reference/Tourmaline/Client/GameMethods/#Tourmaline::Client::GameMethods#send_game(chat_id,game_short_name,disable_notification,reply_to_message_id,reply_markup)","text":"Use this method to send a game. On success, the sent Message is returned. View source","title":"#send_game"},{"location":"api_reference/Tourmaline/Client/GameMethods/#Tourmaline::Client::GameMethods#set_game_score(user_id,score,force,disable_edit_message,chat_id,message_id,inline_message_id)","text":"Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited Message, otherwise returns true . Raises an error, if the new score is not greater than the user's current score in the chat and force is false (default). View source","title":"#set_game_score"},{"location":"api_reference/Tourmaline/Client/PassportMethods/","text":"module Tourmaline::Client::PassportMethods # Direct including types Tourmaline::Client Methods # #set_passport_data_errors ( user_id : Int32 , errors : Array ( PassportElementError )) # Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success. Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues. View source","title":"PassportMethods"},{"location":"api_reference/Tourmaline/Client/PassportMethods/#Tourmaline::Client::PassportMethods","text":"","title":"PassportMethods"},{"location":"api_reference/Tourmaline/Client/PassportMethods/#Tourmaline::Client::PassportMethods-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Client/PassportMethods/#Tourmaline::Client::PassportMethods#set_passport_data_errors(user_id,errors)","text":"Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success. Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues. View source","title":"#set_passport_data_errors"},{"location":"api_reference/Tourmaline/Client/PaymentMethods/","text":"module Tourmaline::Client::PaymentMethods # Direct including types Tourmaline::Client Methods # #answer_pre_checkout_query ( pre_checkout_query_id , ok , error_message = nil ) # Once the user has confirmed their payment and shipping details, the Client API sends the final confirmation in the form of a Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, true is returned. Note: The Client API must receive an answer within 10 seconds after the pre-checkout query was sent. View source #answer_shipping_query ( shipping_query_id , ok , shipping_options = nil , error_message = nil ) # If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Client API will send a Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, true is returned. View source #labeled_prices ( lp : Array ( NamedTuple ())) # Convenience method to create and Array of LabledPrice from an Array of NamedTuple(label: String, amount: Int32) . TODO: Replace with a builder of some kind View source #send_invoice ( chat , title , description , payload , provider_token , currency , prices , max_tip_amount = nil , suggested_tip_amounts = nil , start_parameter = nil , provider_data = nil , photo_url = nil , photo_size = nil , photo_width = nil , photo_height = nil , need_name = nil , need_shipping_address = nil , send_phone_number_to_provider = nil , send_email_to_provider = nil , is_flexible = nil , disable_notification = nil , reply_to_message = nil , reply_markup = nil ) # Use this method to send invoices. On success, the sent Message is returned. View source #shipping_options ( options : Array ( NamedTuple ())) # Convenience method to create an Array of ShippingOption from a NamedTuple(id: String, title: String, prices: Array(LabeledPrice)) . TODO: Replace with a builder of some kind View source","title":"PaymentMethods"},{"location":"api_reference/Tourmaline/Client/PaymentMethods/#Tourmaline::Client::PaymentMethods","text":"","title":"PaymentMethods"},{"location":"api_reference/Tourmaline/Client/PaymentMethods/#Tourmaline::Client::PaymentMethods-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Client/PaymentMethods/#Tourmaline::Client::PaymentMethods#answer_pre_checkout_query(pre_checkout_query_id,ok,error_message)","text":"Once the user has confirmed their payment and shipping details, the Client API sends the final confirmation in the form of a Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, true is returned. Note: The Client API must receive an answer within 10 seconds after the pre-checkout query was sent. View source","title":"#answer_pre_checkout_query"},{"location":"api_reference/Tourmaline/Client/PaymentMethods/#Tourmaline::Client::PaymentMethods#answer_shipping_query(shipping_query_id,ok,shipping_options,error_message)","text":"If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Client API will send a Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, true is returned. View source","title":"#answer_shipping_query"},{"location":"api_reference/Tourmaline/Client/PaymentMethods/#Tourmaline::Client::PaymentMethods#labeled_prices(lp)","text":"Convenience method to create and Array of LabledPrice from an Array of NamedTuple(label: String, amount: Int32) . TODO: Replace with a builder of some kind View source","title":"#labeled_prices"},{"location":"api_reference/Tourmaline/Client/PaymentMethods/#Tourmaline::Client::PaymentMethods#send_invoice(chat,title,description,payload,provider_token,currency,prices,max_tip_amount,suggested_tip_amounts,start_parameter,provider_data,photo_url,photo_size,photo_width,photo_height,need_name,need_shipping_address,send_phone_number_to_provider,send_email_to_provider,is_flexible,disable_notification,reply_to_message,reply_markup)","text":"Use this method to send invoices. On success, the sent Message is returned. View source","title":"#send_invoice"},{"location":"api_reference/Tourmaline/Client/PaymentMethods/#Tourmaline::Client::PaymentMethods#shipping_options(options)","text":"Convenience method to create an Array of ShippingOption from a NamedTuple(id: String, title: String, prices: Array(LabeledPrice)) . TODO: Replace with a builder of some kind View source","title":"#shipping_options"},{"location":"api_reference/Tourmaline/Client/PollMethods/","text":"module Tourmaline::Client::PollMethods # Direct including types Tourmaline::Client Methods # #send_poll ( chat , question : String , options : Array ( String ), anonymous : Bool = true , type : Poll::Type = Poll :: Type :: Regular , allows_multiple_answers : Bool = false , correct_option_id : Int32? = nil , close_date : Time? = nil , open_period : Int32? = nil , closed : Bool = false , disable_notification : Bool = false , reply_to_message = nil , reply_markup = nil ) # Use this method to send a native poll. On success, the sent Message is returned. View source #stop_poll ( chat , message , reply_markup = nil ) # Use this method to stop a poll which was sent by the bot. On success, the stopped Poll with the final results is returned. View source","title":"PollMethods"},{"location":"api_reference/Tourmaline/Client/PollMethods/#Tourmaline::Client::PollMethods","text":"","title":"PollMethods"},{"location":"api_reference/Tourmaline/Client/PollMethods/#Tourmaline::Client::PollMethods-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Client/PollMethods/#Tourmaline::Client::PollMethods#send_poll(chat,question,options,anonymous,type,allows_multiple_answers,correct_option_id,close_date,open_period,closed,disable_notification,reply_to_message,reply_markup)","text":"Use this method to send a native poll. On success, the sent Message is returned. View source","title":"#send_poll"},{"location":"api_reference/Tourmaline/Client/PollMethods/#Tourmaline::Client::PollMethods#stop_poll(chat,message,reply_markup)","text":"Use this method to stop a poll which was sent by the bot. On success, the stopped Poll with the final results is returned. View source","title":"#stop_poll"},{"location":"api_reference/Tourmaline/Client/StickerMethods/","text":"module Tourmaline::Client::StickerMethods # Direct including types Tourmaline::Client Methods # #add_sticker_to_set ( user_id , name , emojis , png_sticker = nil , tgs_sticker = nil , mask_position = nil ) # Use this method to add a new sticker to a set created by the bot. Returns true on success. View source #create_new_sticker_set ( user_id , name , title , emojis , png_sticker = nil , tgs_sticker = nil , contains_masks = nil , mask_position = nil ) # Use this method to create new sticker set owned by a user. The bot will be able to edit the created sticker set. You must use exactly one of the fields png_sticker or tgs_sticker . Returns true on success. View source #delete_chat_sticker_set ( chat_id ) # Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in #get_chat requests to check if the bot can use this method. Returns true on success. View source #delete_sticker_from_set ( sticker ) # Use this method to delete a sticker from a set created by the bot. Returns true on success. View source #get_sticker_set ( name : String ) # Use this method to get a sticker set. On success, a StickerSet object is returned. View source #send_sticker ( chat , sticker , disable_notification = nil , reply_to_message = nil , reply_markup = nil ) # Use this method to send .webp stickers. On success, the sent Message is returned. See: https://core.telegram.org/bots/api#stickers for more info. View source #set_chat_sticker_set ( chat_id , sticker_set_name ) # Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in #get_chat requests to check if the bot can use this method. Returns true on success. View source #set_sticker_position_in_set ( sticker , position ) # Use this method to move a sticker in a set created by the bot to a specific position. Returns true on success. View source #set_sticker_set_thumb ( name , user , thumb = nil ) # Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns true on success. View source #upload_sticker_file ( user_id , png_sticker ) # Use this method to upload a .png file with a sticker for later use in #create_new_sticker_set and #add_sticker_to_set methods (can be used multiple times). Returns the uploaded TFile on success. View source","title":"StickerMethods"},{"location":"api_reference/Tourmaline/Client/StickerMethods/#Tourmaline::Client::StickerMethods","text":"","title":"StickerMethods"},{"location":"api_reference/Tourmaline/Client/StickerMethods/#Tourmaline::Client::StickerMethods-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Client/StickerMethods/#Tourmaline::Client::StickerMethods#add_sticker_to_set(user_id,name,emojis,png_sticker,tgs_sticker,mask_position)","text":"Use this method to add a new sticker to a set created by the bot. Returns true on success. View source","title":"#add_sticker_to_set"},{"location":"api_reference/Tourmaline/Client/StickerMethods/#Tourmaline::Client::StickerMethods#create_new_sticker_set(user_id,name,title,emojis,png_sticker,tgs_sticker,contains_masks,mask_position)","text":"Use this method to create new sticker set owned by a user. The bot will be able to edit the created sticker set. You must use exactly one of the fields png_sticker or tgs_sticker . Returns true on success. View source","title":"#create_new_sticker_set"},{"location":"api_reference/Tourmaline/Client/StickerMethods/#Tourmaline::Client::StickerMethods#delete_chat_sticker_set(chat_id)","text":"Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in #get_chat requests to check if the bot can use this method. Returns true on success. View source","title":"#delete_chat_sticker_set"},{"location":"api_reference/Tourmaline/Client/StickerMethods/#Tourmaline::Client::StickerMethods#delete_sticker_from_set(sticker)","text":"Use this method to delete a sticker from a set created by the bot. Returns true on success. View source","title":"#delete_sticker_from_set"},{"location":"api_reference/Tourmaline/Client/StickerMethods/#Tourmaline::Client::StickerMethods#get_sticker_set(name)","text":"Use this method to get a sticker set. On success, a StickerSet object is returned. View source","title":"#get_sticker_set"},{"location":"api_reference/Tourmaline/Client/StickerMethods/#Tourmaline::Client::StickerMethods#send_sticker(chat,sticker,disable_notification,reply_to_message,reply_markup)","text":"Use this method to send .webp stickers. On success, the sent Message is returned. See: https://core.telegram.org/bots/api#stickers for more info. View source","title":"#send_sticker"},{"location":"api_reference/Tourmaline/Client/StickerMethods/#Tourmaline::Client::StickerMethods#set_chat_sticker_set(chat_id,sticker_set_name)","text":"Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in #get_chat requests to check if the bot can use this method. Returns true on success. View source","title":"#set_chat_sticker_set"},{"location":"api_reference/Tourmaline/Client/StickerMethods/#Tourmaline::Client::StickerMethods#set_sticker_position_in_set(sticker,position)","text":"Use this method to move a sticker in a set created by the bot to a specific position. Returns true on success. View source","title":"#set_sticker_position_in_set"},{"location":"api_reference/Tourmaline/Client/StickerMethods/#Tourmaline::Client::StickerMethods#set_sticker_set_thumb(name,user,thumb)","text":"Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns true on success. View source","title":"#set_sticker_set_thumb"},{"location":"api_reference/Tourmaline/Client/StickerMethods/#Tourmaline::Client::StickerMethods#upload_sticker_file(user_id,png_sticker)","text":"Use this method to upload a .png file with a sticker for later use in #create_new_sticker_set and #add_sticker_to_set methods (can be used multiple times). Returns the uploaded TFile on success. View source","title":"#upload_sticker_file"},{"location":"api_reference/Tourmaline/Client/TDLightMethods/","text":"module Tourmaline::Client::TDLightMethods # Direct including types Tourmaline::Client Methods # #delete_messages ( chat , start_id , end_id ) # Delete all messages from start_id to end_id . start_id must be less than end_id and both must be positive, non-zero numbers. Warning This is a tdlight only method. It will not work with the standard bot API. This method does not work in private chats or normal group. It is also not suggested to delete more than 200 messages per call. View source #get_memory_stats # Return a JSON object containing the info about the memory manager, more info here . Warning This is a tdlight only method. It will not work with the standard bot API. View source #get_participants ( chat ) # Return a list of members in the given chat. Raises ChatNotFound if your bot is not a member of the requested chat. Warning This is a tdlight only method. It will not work with the standard bot API. Additionally this request is heavily rate limited by Telegram. Use sparingly. View source #login ( phone_number ) # Log in to the server in \"user mode\". This allows you to log in with your user account instead of a bot account. Warning This is a tdlight only method. It will not work with the standard bot API. View source #optimize_memory # Remove old data from the in-memory cache and give the freed memory back to the os. Returns true on success. Warning This is a tdlight only method. It will not work with the standard bot API. View source #ping # Send an MTProto ping message to the telegram servers. Useful to detect the delay of the bot api server. Returns the response time in milliseconds. Warning This is a tdlight only method. It will not work with the standard bot API. View source #register_user ( first_name , last_name = nil ) # Register a user with Telegram. Must be called after #login and #send_code . Returns true on success. Warning This is a tdlight only method. It will not work with the standard bot API. Additionally, user registration is disabled by default in TDLight. To enable it please see the TDLight docs . View source #send_code ( code ) # Finish authenticating in \"user mode\" by providing the auth code that Telegram sent you. Warning This is a tdlight only method. It will not work with the standard bot API. View source","title":"TDLightMethods"},{"location":"api_reference/Tourmaline/Client/TDLightMethods/#Tourmaline::Client::TDLightMethods","text":"","title":"TDLightMethods"},{"location":"api_reference/Tourmaline/Client/TDLightMethods/#Tourmaline::Client::TDLightMethods-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Client/TDLightMethods/#Tourmaline::Client::TDLightMethods#delete_messages(chat,start_id,end_id)","text":"Delete all messages from start_id to end_id . start_id must be less than end_id and both must be positive, non-zero numbers. Warning This is a tdlight only method. It will not work with the standard bot API. This method does not work in private chats or normal group. It is also not suggested to delete more than 200 messages per call. View source","title":"#delete_messages"},{"location":"api_reference/Tourmaline/Client/TDLightMethods/#Tourmaline::Client::TDLightMethods#get_memory_stats","text":"Return a JSON object containing the info about the memory manager, more info here . Warning This is a tdlight only method. It will not work with the standard bot API. View source","title":"#get_memory_stats"},{"location":"api_reference/Tourmaline/Client/TDLightMethods/#Tourmaline::Client::TDLightMethods#get_participants(chat)","text":"Return a list of members in the given chat. Raises ChatNotFound if your bot is not a member of the requested chat. Warning This is a tdlight only method. It will not work with the standard bot API. Additionally this request is heavily rate limited by Telegram. Use sparingly. View source","title":"#get_participants"},{"location":"api_reference/Tourmaline/Client/TDLightMethods/#Tourmaline::Client::TDLightMethods#login(phone_number)","text":"Log in to the server in \"user mode\". This allows you to log in with your user account instead of a bot account. Warning This is a tdlight only method. It will not work with the standard bot API. View source","title":"#login"},{"location":"api_reference/Tourmaline/Client/TDLightMethods/#Tourmaline::Client::TDLightMethods#optimize_memory","text":"Remove old data from the in-memory cache and give the freed memory back to the os. Returns true on success. Warning This is a tdlight only method. It will not work with the standard bot API. View source","title":"#optimize_memory"},{"location":"api_reference/Tourmaline/Client/TDLightMethods/#Tourmaline::Client::TDLightMethods#ping","text":"Send an MTProto ping message to the telegram servers. Useful to detect the delay of the bot api server. Returns the response time in milliseconds. Warning This is a tdlight only method. It will not work with the standard bot API. View source","title":"#ping"},{"location":"api_reference/Tourmaline/Client/TDLightMethods/#Tourmaline::Client::TDLightMethods#register_user(first_name,last_name)","text":"Register a user with Telegram. Must be called after #login and #send_code . Returns true on success. Warning This is a tdlight only method. It will not work with the standard bot API. Additionally, user registration is disabled by default in TDLight. To enable it please see the TDLight docs . View source","title":"#register_user"},{"location":"api_reference/Tourmaline/Client/TDLightMethods/#Tourmaline::Client::TDLightMethods#send_code(code)","text":"Finish authenticating in \"user mode\" by providing the auth code that Telegram sent you. Warning This is a tdlight only method. It will not work with the standard bot API. View source","title":"#send_code"},{"location":"api_reference/Tourmaline/Client/WebhookMethods/","text":"module Tourmaline::Client::WebhookMethods # Direct including types Tourmaline::Client Methods # #delete_webhook ( drop_pending_updates = false ) # Use this method to remove webhook integration if you decide to switch back to getUpdates. View source #get_webhook_info # Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using #getUpdates , will return an object with the url field empty. View source #serve ( host = \"127.0.0.1\" , port = 8081 , ssl_certificate_path = nil , ssl_key_path = nil , & block : HTTP :: Server :: Context -> ) # Start an HTTP server at the specified host and port that listens for updates using Telegram's webhooks. This is the reccommended way to handle bots in production. Note: Don't forget to call set_webhook first! This method does not do it for you. View source #serve ( path = \"/\" , host = \"127.0.0.1\" , port = 8081 , ssl_certificate_path = nil , ssl_key_path = nil ) # Start an HTTP server at the specified host and port that listens for updates using Telegram's webhooks. This is the reccommended way to handle bots in production. Note: Don't forget to call set_webhook first! This method does not do it for you. View source #set_webhook ( url , ip_address = nil , certificate = nil , max_connections = nil , allowed_updates = nil , drop_pending_updates = false ) # Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized Update . In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns true on success. If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. https://www.example.com/<token> . Since nobody else knows your bot\u2018s token, you can be pretty sure it\u2019s us. View source #stop_serving # Stops the webhook HTTP server View source #unset_webhook # Use this to unset the webhook and stop receiving updates to your bot. View source","title":"WebhookMethods"},{"location":"api_reference/Tourmaline/Client/WebhookMethods/#Tourmaline::Client::WebhookMethods","text":"","title":"WebhookMethods"},{"location":"api_reference/Tourmaline/Client/WebhookMethods/#Tourmaline::Client::WebhookMethods-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Client/WebhookMethods/#Tourmaline::Client::WebhookMethods#delete_webhook(drop_pending_updates)","text":"Use this method to remove webhook integration if you decide to switch back to getUpdates. View source","title":"#delete_webhook"},{"location":"api_reference/Tourmaline/Client/WebhookMethods/#Tourmaline::Client::WebhookMethods#get_webhook_info","text":"Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using #getUpdates , will return an object with the url field empty. View source","title":"#get_webhook_info"},{"location":"api_reference/Tourmaline/Client/WebhookMethods/#Tourmaline::Client::WebhookMethods#serve(host,port,ssl_certificate_path,ssl_key_path,&)","text":"Start an HTTP server at the specified host and port that listens for updates using Telegram's webhooks. This is the reccommended way to handle bots in production. Note: Don't forget to call set_webhook first! This method does not do it for you. View source","title":"#serve"},{"location":"api_reference/Tourmaline/Client/WebhookMethods/#Tourmaline::Client::WebhookMethods#set_webhook(url,ip_address,certificate,max_connections,allowed_updates,drop_pending_updates)","text":"Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized Update . In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns true on success. If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. https://www.example.com/<token> . Since nobody else knows your bot\u2018s token, you can be pretty sure it\u2019s us. View source","title":"#set_webhook"},{"location":"api_reference/Tourmaline/Client/WebhookMethods/#Tourmaline::Client::WebhookMethods#stop_serving","text":"Stops the webhook HTTP server View source","title":"#stop_serving"},{"location":"api_reference/Tourmaline/Client/WebhookMethods/#Tourmaline::Client::WebhookMethods#unset_webhook","text":"Use this to unset the webhook and stop receiving updates to your bot. View source","title":"#unset_webhook"},{"location":"api_reference/Tourmaline/Contact/","text":"class Tourmaline::Contact inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #first_name : String # View source #last_name : String? # View source #phone_number : String # View source #user_id : Int32? # View source","title":"Contact"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact","text":"","title":"Contact"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#first_name","text":"View source","title":"#first_name"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#last_name","text":"View source","title":"#last_name"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#phone_number","text":"View source","title":"#phone_number"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#user_id","text":"View source","title":"#user_id"},{"location":"api_reference/Tourmaline/Dice/","text":"class Tourmaline::Dice inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #emoji : String # View source #value : Int32 # View source","title":"Dice"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice","text":"","title":"Dice"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice#emoji","text":"View source","title":"#emoji"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice#value","text":"View source","title":"#value"},{"location":"api_reference/Tourmaline/Document/","text":"class Tourmaline::Document inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_id : String # View source #file_name : String? # View source #file_size : Int32 # View source #file_unique_id : String # View source #mime_type : String? # View source #thumb : PhotoSize? # View source","title":"Document"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document","text":"","title":"Document"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#file_name","text":"View source","title":"#file_name"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#mime_type","text":"View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#thumb","text":"View source","title":"#thumb"},{"location":"api_reference/Tourmaline/EncryptedCredentials/","text":"class Tourmaline::EncryptedCredentials inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #data : String # View source #hash : String # Generates an UInt64 hash value for this object. This method must have the property that a == b implies a.hash == b.hash . The hash value is used along with == by the Hash class to determine if two objects reference the same hash key. Subclasses must not override this method. Instead, they must define hash(hasher) , though usually the macro def_hash can be used to generate this method. View source #secret : String # View source","title":"EncryptedCredentials"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials","text":"","title":"EncryptedCredentials"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials#data","text":"View source","title":"#data"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials#hash","text":"Generates an UInt64 hash value for this object. This method must have the property that a == b implies a.hash == b.hash . The hash value is used along with == by the Hash class to determine if two objects reference the same hash key. Subclasses must not override this method. Instead, they must define hash(hasher) , though usually the macro def_hash can be used to generate this method. View source","title":"#hash"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials#secret","text":"View source","title":"#secret"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/","text":"class Tourmaline::EncryptedPassportElement inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #data : String? # View source #email : String? # View source #files : Array ( PassportFile ) # View source #front_side : Array ( PassportFile ) # View source #hash : String # Generates an UInt64 hash value for this object. This method must have the property that a == b implies a.hash == b.hash . The hash value is used along with == by the Hash class to determine if two objects reference the same hash key. Subclasses must not override this method. Instead, they must define hash(hasher) , though usually the macro def_hash can be used to generate this method. View source #phone_number : String? # View source #reverse_side : Array ( PassportFile ) # View source #selfie : PassportFile? # View source #translation : Array ( PassportFile ) # View source #type : EncryptedPassportElement::Type # View source","title":"EncryptedPassportElement"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement","text":"","title":"EncryptedPassportElement"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#data","text":"View source","title":"#data"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#email","text":"View source","title":"#email"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#files","text":"View source","title":"#files"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#front_side","text":"View source","title":"#front_side"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#hash","text":"Generates an UInt64 hash value for this object. This method must have the property that a == b implies a.hash == b.hash . The hash value is used along with == by the Hash class to determine if two objects reference the same hash key. Subclasses must not override this method. Instead, they must define hash(hasher) , though usually the macro def_hash can be used to generate this method. View source","title":"#hash"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#phone_number","text":"View source","title":"#phone_number"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#reverse_side","text":"View source","title":"#reverse_side"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#selfie","text":"View source","title":"#selfie"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#translation","text":"View source","title":"#translation"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/","text":"enum Tourmaline::EncryptedPassportElement::Type # Members # PersonalDetails = 0 # Passport = 1 # DriverLicense = 2 # IdentityCard = 3 # InternalPassport = 4 # Address = 5 # UtilityBill = 6 # BankStatement = 7 # RentalAgreement = 8 # PassportRegistration = 9 # TemporaryRegistration = 10 # PhoneNumber = 11 # Email = 12 # Class methods # .from_json ( pull : JSON :: PullParser ) # View source Methods # #address? # View source #bank_statement? # View source #driver_license? # View source #email? # View source #identity_card? # View source #internal_passport? # View source #passport? # View source #passport_registration? # View source #personal_details? # View source #phone_number? # View source #rental_agreement? # View source #temporary_registration? # View source #to_json ( json : JSON :: Builder ) # Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source #utility_bill? # View source","title":"Type"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type","text":"","title":"Type"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::PersonalDetails","text":"","title":"PersonalDetails"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::Passport","text":"","title":"Passport"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::DriverLicense","text":"","title":"DriverLicense"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::IdentityCard","text":"","title":"IdentityCard"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::InternalPassport","text":"","title":"InternalPassport"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::Address","text":"","title":"Address"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::UtilityBill","text":"","title":"UtilityBill"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::BankStatement","text":"","title":"BankStatement"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::RentalAgreement","text":"","title":"RentalAgreement"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::PassportRegistration","text":"","title":"PassportRegistration"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::TemporaryRegistration","text":"","title":"TemporaryRegistration"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::PhoneNumber","text":"","title":"PhoneNumber"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::Email","text":"","title":"Email"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type.from_json(pull)","text":"View source","title":".from_json"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#address?","text":"View source","title":"#address?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#bank_statement?","text":"View source","title":"#bank_statement?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#driver_license?","text":"View source","title":"#driver_license?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#email?","text":"View source","title":"#email?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#identity_card?","text":"View source","title":"#identity_card?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#internal_passport?","text":"View source","title":"#internal_passport?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#passport?","text":"View source","title":"#passport?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#passport_registration?","text":"View source","title":"#passport_registration?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#personal_details?","text":"View source","title":"#personal_details?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#phone_number?","text":"View source","title":"#phone_number?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#rental_agreement?","text":"View source","title":"#rental_agreement?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#temporary_registration?","text":"View source","title":"#temporary_registration?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#to_json(json)","text":"Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source","title":"#to_json"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#utility_bill?","text":"View source","title":"#utility_bill?"},{"location":"api_reference/Tourmaline/Error/","text":"class Tourmaline::Error inherits Exception # Direct known subclasses Tourmaline::Error::BadRequest Tourmaline::Error::ConflictError Tourmaline::Error::MigrateToChat Tourmaline::Error::NetworkError Tourmaline::Error::RetryAfter Tourmaline::Error::Throttled Tourmaline::Error::Unauthorized Tourmaline::Error::ValidationError Constants # ERROR_PREFIXES = [ \"error: \" , \"[error]: \" , \"bad request: \" , \"conflict: \" , \"not found: \" ] # Constructors # .new ( message = \"\" ) # View source Class methods # .from_message ( text ) # View source","title":"Error"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error","text":"","title":"Error"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error::ERROR_PREFIXES","text":"","title":"ERROR_PREFIXES"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error.new(message)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error.from_message(text)","text":"View source","title":".from_message"},{"location":"api_reference/Tourmaline/Error/BadRequest/","text":"class Tourmaline::Error::BadRequest inherits Tourmaline::Error # Direct known subclasses Tourmaline::Error::BadWebhook Tourmaline::Error::BotDomainInvalid Tourmaline::Error::ButtonDataInvalid Tourmaline::Error::ButtonURLInvalid Tourmaline::Error::CantDemoteChatCreator Tourmaline::Error::CantParseEntities Tourmaline::Error::CantParseUrl Tourmaline::Error::CantRemoveChatOwner Tourmaline::Error::CantRestrictSelf Tourmaline::Error::ChatAdminRequired Tourmaline::Error::ChatDescriptionIsNotModified Tourmaline::Error::ChatIdIsEmpty Tourmaline::Error::ChatNotFound Tourmaline::Error::CurrencyTotalAmountInvalid Tourmaline::Error::GroupDeactivated Tourmaline::Error::InlineKeyboardExpected Tourmaline::Error::InvalidHTTPUrlContent Tourmaline::Error::InvalidPeerID Tourmaline::Error::InvalidQueryID Tourmaline::Error::InvalidResultID Tourmaline::Error::InvalidStickersSet Tourmaline::Error::InvalidUserId Tourmaline::Error::MemberListInaccessible Tourmaline::Error::MessageError Tourmaline::Error::MethodIsNotAvailable Tourmaline::Error::MethodNotAvailableInPrivateChats Tourmaline::Error::NeedAdministratorRightsInTheChannel Tourmaline::Error::NoStickerInRequest Tourmaline::Error::NotEnoughRightsOther Tourmaline::Error::NotEnoughRightsToPinMessage Tourmaline::Error::NotEnoughRightsToRestrict Tourmaline::Error::NotFound Tourmaline::Error::ObjectExpectedAsReplyMarkup Tourmaline::Error::PaymentProviderInvalid Tourmaline::Error::PhotoAsInputFileRequired Tourmaline::Error::PhotoDimensions Tourmaline::Error::PollError Tourmaline::Error::RequestTimeoutError Tourmaline::Error::ResultIdDuplicate Tourmaline::Error::StartParamInvalid Tourmaline::Error::TypeOfFileMismatch Tourmaline::Error::UnavailableMembers Tourmaline::Error::UnsupportedUrlProtocol Tourmaline::Error::URLHostIsEmpty Tourmaline::Error::WrongFileIdentifier Tourmaline::Error::WrongLiveLocationPeriod Tourmaline::Error::WrongRemoteFileIdSpecified","title":"BadRequest"},{"location":"api_reference/Tourmaline/Error/BadRequest/#Tourmaline::Error::BadRequest","text":"","title":"BadRequest"},{"location":"api_reference/Tourmaline/Error/BadWebhook/","text":"class Tourmaline::Error::BadWebhook inherits Tourmaline::Error::BadRequest # Direct known subclasses Tourmaline::Error::BadWebhookAddrInfo Tourmaline::Error::BadWebhookNoAddressAssociatedWithHostname Tourmaline::Error::BadWebhookPort Tourmaline::Error::WebhookRequireHTTPS","title":"BadWebhook"},{"location":"api_reference/Tourmaline/Error/BadWebhook/#Tourmaline::Error::BadWebhook","text":"","title":"BadWebhook"},{"location":"api_reference/Tourmaline/Error/BadWebhookAddrInfo/","text":"class Tourmaline::Error::BadWebhookAddrInfo inherits Tourmaline::Error::BadWebhook #","title":"BadWebhookAddrInfo"},{"location":"api_reference/Tourmaline/Error/BadWebhookAddrInfo/#Tourmaline::Error::BadWebhookAddrInfo","text":"","title":"BadWebhookAddrInfo"},{"location":"api_reference/Tourmaline/Error/BadWebhookNoAddressAssociatedWithHostname/","text":"class Tourmaline::Error::BadWebhookNoAddressAssociatedWithHostname inherits Tourmaline::Error::BadWebhook #","title":"BadWebhookNoAddressAssociatedWithHostname"},{"location":"api_reference/Tourmaline/Error/BadWebhookNoAddressAssociatedWithHostname/#Tourmaline::Error::BadWebhookNoAddressAssociatedWithHostname","text":"","title":"BadWebhookNoAddressAssociatedWithHostname"},{"location":"api_reference/Tourmaline/Error/BadWebhookPort/","text":"class Tourmaline::Error::BadWebhookPort inherits Tourmaline::Error::BadWebhook #","title":"BadWebhookPort"},{"location":"api_reference/Tourmaline/Error/BadWebhookPort/#Tourmaline::Error::BadWebhookPort","text":"","title":"BadWebhookPort"},{"location":"api_reference/Tourmaline/Error/BotBlocked/","text":"class Tourmaline::Error::BotBlocked inherits Tourmaline::Error::Unauthorized #","title":"BotBlocked"},{"location":"api_reference/Tourmaline/Error/BotBlocked/#Tourmaline::Error::BotBlocked","text":"","title":"BotBlocked"},{"location":"api_reference/Tourmaline/Error/BotDomainInvalid/","text":"class Tourmaline::Error::BotDomainInvalid inherits Tourmaline::Error::BadRequest #","title":"BotDomainInvalid"},{"location":"api_reference/Tourmaline/Error/BotDomainInvalid/#Tourmaline::Error::BotDomainInvalid","text":"","title":"BotDomainInvalid"},{"location":"api_reference/Tourmaline/Error/BotKicked/","text":"class Tourmaline::Error::BotKicked inherits Tourmaline::Error::Unauthorized #","title":"BotKicked"},{"location":"api_reference/Tourmaline/Error/BotKicked/#Tourmaline::Error::BotKicked","text":"","title":"BotKicked"},{"location":"api_reference/Tourmaline/Error/ButtonDataInvalid/","text":"class Tourmaline::Error::ButtonDataInvalid inherits Tourmaline::Error::BadRequest #","title":"ButtonDataInvalid"},{"location":"api_reference/Tourmaline/Error/ButtonDataInvalid/#Tourmaline::Error::ButtonDataInvalid","text":"","title":"ButtonDataInvalid"},{"location":"api_reference/Tourmaline/Error/ButtonURLInvalid/","text":"class Tourmaline::Error::ButtonURLInvalid inherits Tourmaline::Error::BadRequest #","title":"ButtonURLInvalid"},{"location":"api_reference/Tourmaline/Error/ButtonURLInvalid/#Tourmaline::Error::ButtonURLInvalid","text":"","title":"ButtonURLInvalid"},{"location":"api_reference/Tourmaline/Error/CantDemoteChatCreator/","text":"class Tourmaline::Error::CantDemoteChatCreator inherits Tourmaline::Error::BadRequest #","title":"CantDemoteChatCreator"},{"location":"api_reference/Tourmaline/Error/CantDemoteChatCreator/#Tourmaline::Error::CantDemoteChatCreator","text":"","title":"CantDemoteChatCreator"},{"location":"api_reference/Tourmaline/Error/CantGetUpdates/","text":"class Tourmaline::Error::CantGetUpdates inherits Tourmaline::Error::ConflictError #","title":"CantGetUpdates"},{"location":"api_reference/Tourmaline/Error/CantGetUpdates/#Tourmaline::Error::CantGetUpdates","text":"","title":"CantGetUpdates"},{"location":"api_reference/Tourmaline/Error/CantInitiateConversation/","text":"class Tourmaline::Error::CantInitiateConversation inherits Tourmaline::Error::Unauthorized #","title":"CantInitiateConversation"},{"location":"api_reference/Tourmaline/Error/CantInitiateConversation/#Tourmaline::Error::CantInitiateConversation","text":"","title":"CantInitiateConversation"},{"location":"api_reference/Tourmaline/Error/CantParseEntities/","text":"class Tourmaline::Error::CantParseEntities inherits Tourmaline::Error::BadRequest #","title":"CantParseEntities"},{"location":"api_reference/Tourmaline/Error/CantParseEntities/#Tourmaline::Error::CantParseEntities","text":"","title":"CantParseEntities"},{"location":"api_reference/Tourmaline/Error/CantParseUrl/","text":"class Tourmaline::Error::CantParseUrl inherits Tourmaline::Error::BadRequest #","title":"CantParseUrl"},{"location":"api_reference/Tourmaline/Error/CantParseUrl/#Tourmaline::Error::CantParseUrl","text":"","title":"CantParseUrl"},{"location":"api_reference/Tourmaline/Error/CantRemoveChatOwner/","text":"class Tourmaline::Error::CantRemoveChatOwner inherits Tourmaline::Error::BadRequest #","title":"CantRemoveChatOwner"},{"location":"api_reference/Tourmaline/Error/CantRemoveChatOwner/#Tourmaline::Error::CantRemoveChatOwner","text":"","title":"CantRemoveChatOwner"},{"location":"api_reference/Tourmaline/Error/CantRestrictSelf/","text":"class Tourmaline::Error::CantRestrictSelf inherits Tourmaline::Error::BadRequest #","title":"CantRestrictSelf"},{"location":"api_reference/Tourmaline/Error/CantRestrictSelf/#Tourmaline::Error::CantRestrictSelf","text":"","title":"CantRestrictSelf"},{"location":"api_reference/Tourmaline/Error/CantTalkWithBots/","text":"class Tourmaline::Error::CantTalkWithBots inherits Tourmaline::Error::Unauthorized #","title":"CantTalkWithBots"},{"location":"api_reference/Tourmaline/Error/CantTalkWithBots/#Tourmaline::Error::CantTalkWithBots","text":"","title":"CantTalkWithBots"},{"location":"api_reference/Tourmaline/Error/ChatAdminRequired/","text":"class Tourmaline::Error::ChatAdminRequired inherits Tourmaline::Error::BadRequest #","title":"ChatAdminRequired"},{"location":"api_reference/Tourmaline/Error/ChatAdminRequired/#Tourmaline::Error::ChatAdminRequired","text":"","title":"ChatAdminRequired"},{"location":"api_reference/Tourmaline/Error/ChatDescriptionIsNotModified/","text":"class Tourmaline::Error::ChatDescriptionIsNotModified inherits Tourmaline::Error::BadRequest #","title":"ChatDescriptionIsNotModified"},{"location":"api_reference/Tourmaline/Error/ChatDescriptionIsNotModified/#Tourmaline::Error::ChatDescriptionIsNotModified","text":"","title":"ChatDescriptionIsNotModified"},{"location":"api_reference/Tourmaline/Error/ChatIdIsEmpty/","text":"class Tourmaline::Error::ChatIdIsEmpty inherits Tourmaline::Error::BadRequest #","title":"ChatIdIsEmpty"},{"location":"api_reference/Tourmaline/Error/ChatIdIsEmpty/#Tourmaline::Error::ChatIdIsEmpty","text":"","title":"ChatIdIsEmpty"},{"location":"api_reference/Tourmaline/Error/ChatNotFound/","text":"class Tourmaline::Error::ChatNotFound inherits Tourmaline::Error::BadRequest #","title":"ChatNotFound"},{"location":"api_reference/Tourmaline/Error/ChatNotFound/#Tourmaline::Error::ChatNotFound","text":"","title":"ChatNotFound"},{"location":"api_reference/Tourmaline/Error/ConflictError/","text":"class Tourmaline::Error::ConflictError inherits Tourmaline::Error # Direct known subclasses Tourmaline::Error::CantGetUpdates Tourmaline::Error::TerminatedByOtherGetUpdates","title":"ConflictError"},{"location":"api_reference/Tourmaline/Error/ConflictError/#Tourmaline::Error::ConflictError","text":"","title":"ConflictError"},{"location":"api_reference/Tourmaline/Error/ConnectionLost/","text":"class Tourmaline::Error::ConnectionLost inherits DB::PoolResourceLost # Raised when a connection is unable to be established probably due to socket/network or configuration issues. It is used by the connection pool retry logic.","title":"ConnectionLost"},{"location":"api_reference/Tourmaline/Error/ConnectionLost/#Tourmaline::Error::ConnectionLost","text":"Raised when a connection is unable to be established probably due to socket/network or configuration issues. It is used by the connection pool retry logic.","title":"ConnectionLost"},{"location":"api_reference/Tourmaline/Error/CurrencyTotalAmountInvalid/","text":"class Tourmaline::Error::CurrencyTotalAmountInvalid inherits Tourmaline::Error::BadRequest #","title":"CurrencyTotalAmountInvalid"},{"location":"api_reference/Tourmaline/Error/CurrencyTotalAmountInvalid/#Tourmaline::Error::CurrencyTotalAmountInvalid","text":"","title":"CurrencyTotalAmountInvalid"},{"location":"api_reference/Tourmaline/Error/GroupDeactivated/","text":"class Tourmaline::Error::GroupDeactivated inherits Tourmaline::Error::BadRequest #","title":"GroupDeactivated"},{"location":"api_reference/Tourmaline/Error/GroupDeactivated/#Tourmaline::Error::GroupDeactivated","text":"","title":"GroupDeactivated"},{"location":"api_reference/Tourmaline/Error/InlineKeyboardExpected/","text":"class Tourmaline::Error::InlineKeyboardExpected inherits Tourmaline::Error::BadRequest #","title":"InlineKeyboardExpected"},{"location":"api_reference/Tourmaline/Error/InlineKeyboardExpected/#Tourmaline::Error::InlineKeyboardExpected","text":"","title":"InlineKeyboardExpected"},{"location":"api_reference/Tourmaline/Error/InvalidHTTPUrlContent/","text":"class Tourmaline::Error::InvalidHTTPUrlContent inherits Tourmaline::Error::BadRequest #","title":"InvalidHTTPUrlContent"},{"location":"api_reference/Tourmaline/Error/InvalidHTTPUrlContent/#Tourmaline::Error::InvalidHTTPUrlContent","text":"","title":"InvalidHTTPUrlContent"},{"location":"api_reference/Tourmaline/Error/InvalidPeerID/","text":"class Tourmaline::Error::InvalidPeerID inherits Tourmaline::Error::BadRequest #","title":"InvalidPeerID"},{"location":"api_reference/Tourmaline/Error/InvalidPeerID/#Tourmaline::Error::InvalidPeerID","text":"","title":"InvalidPeerID"},{"location":"api_reference/Tourmaline/Error/InvalidQueryID/","text":"class Tourmaline::Error::InvalidQueryID inherits Tourmaline::Error::BadRequest #","title":"InvalidQueryID"},{"location":"api_reference/Tourmaline/Error/InvalidQueryID/#Tourmaline::Error::InvalidQueryID","text":"","title":"InvalidQueryID"},{"location":"api_reference/Tourmaline/Error/InvalidResultID/","text":"class Tourmaline::Error::InvalidResultID inherits Tourmaline::Error::BadRequest #","title":"InvalidResultID"},{"location":"api_reference/Tourmaline/Error/InvalidResultID/#Tourmaline::Error::InvalidResultID","text":"","title":"InvalidResultID"},{"location":"api_reference/Tourmaline/Error/InvalidStickersSet/","text":"class Tourmaline::Error::InvalidStickersSet inherits Tourmaline::Error::BadRequest #","title":"InvalidStickersSet"},{"location":"api_reference/Tourmaline/Error/InvalidStickersSet/#Tourmaline::Error::InvalidStickersSet","text":"","title":"InvalidStickersSet"},{"location":"api_reference/Tourmaline/Error/InvalidUserId/","text":"class Tourmaline::Error::InvalidUserId inherits Tourmaline::Error::BadRequest #","title":"InvalidUserId"},{"location":"api_reference/Tourmaline/Error/InvalidUserId/#Tourmaline::Error::InvalidUserId","text":"","title":"InvalidUserId"},{"location":"api_reference/Tourmaline/Error/MemberListInaccessible/","text":"class Tourmaline::Error::MemberListInaccessible inherits Tourmaline::Error::BadRequest #","title":"MemberListInaccessible"},{"location":"api_reference/Tourmaline/Error/MemberListInaccessible/#Tourmaline::Error::MemberListInaccessible","text":"","title":"MemberListInaccessible"},{"location":"api_reference/Tourmaline/Error/MessageCantBeDeleted/","text":"class Tourmaline::Error::MessageCantBeDeleted inherits Tourmaline::Error::MessageError #","title":"MessageCantBeDeleted"},{"location":"api_reference/Tourmaline/Error/MessageCantBeDeleted/#Tourmaline::Error::MessageCantBeDeleted","text":"","title":"MessageCantBeDeleted"},{"location":"api_reference/Tourmaline/Error/MessageCantBeEdited/","text":"class Tourmaline::Error::MessageCantBeEdited inherits Tourmaline::Error::MessageError #","title":"MessageCantBeEdited"},{"location":"api_reference/Tourmaline/Error/MessageCantBeEdited/#Tourmaline::Error::MessageCantBeEdited","text":"","title":"MessageCantBeEdited"},{"location":"api_reference/Tourmaline/Error/MessageError/","text":"class Tourmaline::Error::MessageError inherits Tourmaline::Error::BadRequest # Direct known subclasses Tourmaline::Error::MessageCantBeDeleted Tourmaline::Error::MessageCantBeEdited Tourmaline::Error::MessageIdentifierNotSpecified Tourmaline::Error::MessageIdInvalid Tourmaline::Error::MessageIsNotAPoll Tourmaline::Error::MessageIsTooLong Tourmaline::Error::MessageNotModified Tourmaline::Error::MessageTextIsEmpty Tourmaline::Error::MessageToDeleteNotFound Tourmaline::Error::MessageToEditNotFound Tourmaline::Error::MessageToForwardNotFound Tourmaline::Error::MessageToReplyNotFound Tourmaline::Error::MessageWithPollNotFound Tourmaline::Error::PollCantBeStopped Tourmaline::Error::PollHasAlreadyClosed Tourmaline::Error::PollsCantBeSentToPrivateChats Tourmaline::Error::TooMuchMessages","title":"MessageError"},{"location":"api_reference/Tourmaline/Error/MessageError/#Tourmaline::Error::MessageError","text":"","title":"MessageError"},{"location":"api_reference/Tourmaline/Error/MessageIdInvalid/","text":"class Tourmaline::Error::MessageIdInvalid inherits Tourmaline::Error::MessageError #","title":"MessageIdInvalid"},{"location":"api_reference/Tourmaline/Error/MessageIdInvalid/#Tourmaline::Error::MessageIdInvalid","text":"","title":"MessageIdInvalid"},{"location":"api_reference/Tourmaline/Error/MessageIdentifierNotSpecified/","text":"class Tourmaline::Error::MessageIdentifierNotSpecified inherits Tourmaline::Error::MessageError #","title":"MessageIdentifierNotSpecified"},{"location":"api_reference/Tourmaline/Error/MessageIdentifierNotSpecified/#Tourmaline::Error::MessageIdentifierNotSpecified","text":"","title":"MessageIdentifierNotSpecified"},{"location":"api_reference/Tourmaline/Error/MessageIsNotAPoll/","text":"class Tourmaline::Error::MessageIsNotAPoll inherits Tourmaline::Error::MessageError #","title":"MessageIsNotAPoll"},{"location":"api_reference/Tourmaline/Error/MessageIsNotAPoll/#Tourmaline::Error::MessageIsNotAPoll","text":"","title":"MessageIsNotAPoll"},{"location":"api_reference/Tourmaline/Error/MessageIsTooLong/","text":"class Tourmaline::Error::MessageIsTooLong inherits Tourmaline::Error::MessageError #","title":"MessageIsTooLong"},{"location":"api_reference/Tourmaline/Error/MessageIsTooLong/#Tourmaline::Error::MessageIsTooLong","text":"","title":"MessageIsTooLong"},{"location":"api_reference/Tourmaline/Error/MessageNotModified/","text":"class Tourmaline::Error::MessageNotModified inherits Tourmaline::Error::MessageError #","title":"MessageNotModified"},{"location":"api_reference/Tourmaline/Error/MessageNotModified/#Tourmaline::Error::MessageNotModified","text":"","title":"MessageNotModified"},{"location":"api_reference/Tourmaline/Error/MessageTextIsEmpty/","text":"class Tourmaline::Error::MessageTextIsEmpty inherits Tourmaline::Error::MessageError #","title":"MessageTextIsEmpty"},{"location":"api_reference/Tourmaline/Error/MessageTextIsEmpty/#Tourmaline::Error::MessageTextIsEmpty","text":"","title":"MessageTextIsEmpty"},{"location":"api_reference/Tourmaline/Error/MessageToDeleteNotFound/","text":"class Tourmaline::Error::MessageToDeleteNotFound inherits Tourmaline::Error::MessageError #","title":"MessageToDeleteNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToDeleteNotFound/#Tourmaline::Error::MessageToDeleteNotFound","text":"","title":"MessageToDeleteNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToEditNotFound/","text":"class Tourmaline::Error::MessageToEditNotFound inherits Tourmaline::Error::MessageError #","title":"MessageToEditNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToEditNotFound/#Tourmaline::Error::MessageToEditNotFound","text":"","title":"MessageToEditNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToForwardNotFound/","text":"class Tourmaline::Error::MessageToForwardNotFound inherits Tourmaline::Error::MessageError #","title":"MessageToForwardNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToForwardNotFound/#Tourmaline::Error::MessageToForwardNotFound","text":"","title":"MessageToForwardNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToReplyNotFound/","text":"class Tourmaline::Error::MessageToReplyNotFound inherits Tourmaline::Error::MessageError #","title":"MessageToReplyNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToReplyNotFound/#Tourmaline::Error::MessageToReplyNotFound","text":"","title":"MessageToReplyNotFound"},{"location":"api_reference/Tourmaline/Error/MessageWithPollNotFound/","text":"class Tourmaline::Error::MessageWithPollNotFound inherits Tourmaline::Error::MessageError #","title":"MessageWithPollNotFound"},{"location":"api_reference/Tourmaline/Error/MessageWithPollNotFound/#Tourmaline::Error::MessageWithPollNotFound","text":"","title":"MessageWithPollNotFound"},{"location":"api_reference/Tourmaline/Error/MethodIsNotAvailable/","text":"class Tourmaline::Error::MethodIsNotAvailable inherits Tourmaline::Error::BadRequest #","title":"MethodIsNotAvailable"},{"location":"api_reference/Tourmaline/Error/MethodIsNotAvailable/#Tourmaline::Error::MethodIsNotAvailable","text":"","title":"MethodIsNotAvailable"},{"location":"api_reference/Tourmaline/Error/MethodNotAvailableInPrivateChats/","text":"class Tourmaline::Error::MethodNotAvailableInPrivateChats inherits Tourmaline::Error::BadRequest #","title":"MethodNotAvailableInPrivateChats"},{"location":"api_reference/Tourmaline/Error/MethodNotAvailableInPrivateChats/#Tourmaline::Error::MethodNotAvailableInPrivateChats","text":"","title":"MethodNotAvailableInPrivateChats"},{"location":"api_reference/Tourmaline/Error/MethodNotKnown/","text":"class Tourmaline::Error::MethodNotKnown inherits Tourmaline::Error::NotFound #","title":"MethodNotKnown"},{"location":"api_reference/Tourmaline/Error/MethodNotKnown/#Tourmaline::Error::MethodNotKnown","text":"","title":"MethodNotKnown"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/","text":"class Tourmaline::Error::MigrateToChat inherits Tourmaline::Error # Constructors # .new ( chat_id ) # View source Methods # #chat_id : Int64 # View source","title":"MigrateToChat"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/#Tourmaline::Error::MigrateToChat","text":"","title":"MigrateToChat"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/#Tourmaline::Error::MigrateToChat-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/#Tourmaline::Error::MigrateToChat.new(chat_id)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/#Tourmaline::Error::MigrateToChat-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/#Tourmaline::Error::MigrateToChat#chat_id","text":"View source","title":"#chat_id"},{"location":"api_reference/Tourmaline/Error/NeedAdministratorRightsInTheChannel/","text":"class Tourmaline::Error::NeedAdministratorRightsInTheChannel inherits Tourmaline::Error::BadRequest #","title":"NeedAdministratorRightsInTheChannel"},{"location":"api_reference/Tourmaline/Error/NeedAdministratorRightsInTheChannel/#Tourmaline::Error::NeedAdministratorRightsInTheChannel","text":"","title":"NeedAdministratorRightsInTheChannel"},{"location":"api_reference/Tourmaline/Error/NetworkError/","text":"class Tourmaline::Error::NetworkError inherits Tourmaline::Error #","title":"NetworkError"},{"location":"api_reference/Tourmaline/Error/NetworkError/#Tourmaline::Error::NetworkError","text":"","title":"NetworkError"},{"location":"api_reference/Tourmaline/Error/NoStickerInRequest/","text":"class Tourmaline::Error::NoStickerInRequest inherits Tourmaline::Error::BadRequest #","title":"NoStickerInRequest"},{"location":"api_reference/Tourmaline/Error/NoStickerInRequest/#Tourmaline::Error::NoStickerInRequest","text":"","title":"NoStickerInRequest"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsOther/","text":"class Tourmaline::Error::NotEnoughRightsOther inherits Tourmaline::Error::BadRequest #","title":"NotEnoughRightsOther"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsOther/#Tourmaline::Error::NotEnoughRightsOther","text":"","title":"NotEnoughRightsOther"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsToPinMessage/","text":"class Tourmaline::Error::NotEnoughRightsToPinMessage inherits Tourmaline::Error::BadRequest #","title":"NotEnoughRightsToPinMessage"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsToPinMessage/#Tourmaline::Error::NotEnoughRightsToPinMessage","text":"","title":"NotEnoughRightsToPinMessage"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsToRestrict/","text":"class Tourmaline::Error::NotEnoughRightsToRestrict inherits Tourmaline::Error::BadRequest #","title":"NotEnoughRightsToRestrict"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsToRestrict/#Tourmaline::Error::NotEnoughRightsToRestrict","text":"","title":"NotEnoughRightsToRestrict"},{"location":"api_reference/Tourmaline/Error/NotFound/","text":"class Tourmaline::Error::NotFound inherits Tourmaline::Error::BadRequest # Direct known subclasses Tourmaline::Error::MethodNotKnown","title":"NotFound"},{"location":"api_reference/Tourmaline/Error/NotFound/#Tourmaline::Error::NotFound","text":"","title":"NotFound"},{"location":"api_reference/Tourmaline/Error/ObjectExpectedAsReplyMarkup/","text":"class Tourmaline::Error::ObjectExpectedAsReplyMarkup inherits Tourmaline::Error::BadRequest #","title":"ObjectExpectedAsReplyMarkup"},{"location":"api_reference/Tourmaline/Error/ObjectExpectedAsReplyMarkup/#Tourmaline::Error::ObjectExpectedAsReplyMarkup","text":"","title":"ObjectExpectedAsReplyMarkup"},{"location":"api_reference/Tourmaline/Error/PaymentProviderInvalid/","text":"class Tourmaline::Error::PaymentProviderInvalid inherits Tourmaline::Error::BadRequest #","title":"PaymentProviderInvalid"},{"location":"api_reference/Tourmaline/Error/PaymentProviderInvalid/#Tourmaline::Error::PaymentProviderInvalid","text":"","title":"PaymentProviderInvalid"},{"location":"api_reference/Tourmaline/Error/PhotoAsInputFileRequired/","text":"class Tourmaline::Error::PhotoAsInputFileRequired inherits Tourmaline::Error::BadRequest #","title":"PhotoAsInputFileRequired"},{"location":"api_reference/Tourmaline/Error/PhotoAsInputFileRequired/#Tourmaline::Error::PhotoAsInputFileRequired","text":"","title":"PhotoAsInputFileRequired"},{"location":"api_reference/Tourmaline/Error/PhotoDimensions/","text":"class Tourmaline::Error::PhotoDimensions inherits Tourmaline::Error::BadRequest #","title":"PhotoDimensions"},{"location":"api_reference/Tourmaline/Error/PhotoDimensions/#Tourmaline::Error::PhotoDimensions","text":"","title":"PhotoDimensions"},{"location":"api_reference/Tourmaline/Error/PollCantBeStopped/","text":"class Tourmaline::Error::PollCantBeStopped inherits Tourmaline::Error::MessageError #","title":"PollCantBeStopped"},{"location":"api_reference/Tourmaline/Error/PollCantBeStopped/#Tourmaline::Error::PollCantBeStopped","text":"","title":"PollCantBeStopped"},{"location":"api_reference/Tourmaline/Error/PollCantHaveMoreOptions/","text":"class Tourmaline::Error::PollCantHaveMoreOptions inherits Tourmaline::Error::PollError #","title":"PollCantHaveMoreOptions"},{"location":"api_reference/Tourmaline/Error/PollCantHaveMoreOptions/#Tourmaline::Error::PollCantHaveMoreOptions","text":"","title":"PollCantHaveMoreOptions"},{"location":"api_reference/Tourmaline/Error/PollError/","text":"class Tourmaline::Error::PollError inherits Tourmaline::Error::BadRequest # Direct known subclasses Tourmaline::Error::PollCantHaveMoreOptions Tourmaline::Error::PollMustHaveMoreOptions Tourmaline::Error::PollOptionsMustBeNonEmpty Tourmaline::Error::PollQuestionMustBeNonEmpty Tourmaline::Error::PollSizeError Tourmaline::Error::PollsOptionsLengthTooLong","title":"PollError"},{"location":"api_reference/Tourmaline/Error/PollError/#Tourmaline::Error::PollError","text":"","title":"PollError"},{"location":"api_reference/Tourmaline/Error/PollHasAlreadyClosed/","text":"class Tourmaline::Error::PollHasAlreadyClosed inherits Tourmaline::Error::MessageError #","title":"PollHasAlreadyClosed"},{"location":"api_reference/Tourmaline/Error/PollHasAlreadyClosed/#Tourmaline::Error::PollHasAlreadyClosed","text":"","title":"PollHasAlreadyClosed"},{"location":"api_reference/Tourmaline/Error/PollMustHaveMoreOptions/","text":"class Tourmaline::Error::PollMustHaveMoreOptions inherits Tourmaline::Error::PollError #","title":"PollMustHaveMoreOptions"},{"location":"api_reference/Tourmaline/Error/PollMustHaveMoreOptions/#Tourmaline::Error::PollMustHaveMoreOptions","text":"","title":"PollMustHaveMoreOptions"},{"location":"api_reference/Tourmaline/Error/PollOptionsMustBeNonEmpty/","text":"class Tourmaline::Error::PollOptionsMustBeNonEmpty inherits Tourmaline::Error::PollError #","title":"PollOptionsMustBeNonEmpty"},{"location":"api_reference/Tourmaline/Error/PollOptionsMustBeNonEmpty/#Tourmaline::Error::PollOptionsMustBeNonEmpty","text":"","title":"PollOptionsMustBeNonEmpty"},{"location":"api_reference/Tourmaline/Error/PollQuestionMustBeNonEmpty/","text":"class Tourmaline::Error::PollQuestionMustBeNonEmpty inherits Tourmaline::Error::PollError #","title":"PollQuestionMustBeNonEmpty"},{"location":"api_reference/Tourmaline/Error/PollQuestionMustBeNonEmpty/#Tourmaline::Error::PollQuestionMustBeNonEmpty","text":"","title":"PollQuestionMustBeNonEmpty"},{"location":"api_reference/Tourmaline/Error/PollSizeError/","text":"class Tourmaline::Error::PollSizeError inherits Tourmaline::Error::PollError #","title":"PollSizeError"},{"location":"api_reference/Tourmaline/Error/PollSizeError/#Tourmaline::Error::PollSizeError","text":"","title":"PollSizeError"},{"location":"api_reference/Tourmaline/Error/PollsCantBeSentToPrivateChats/","text":"class Tourmaline::Error::PollsCantBeSentToPrivateChats inherits Tourmaline::Error::MessageError #","title":"PollsCantBeSentToPrivateChats"},{"location":"api_reference/Tourmaline/Error/PollsCantBeSentToPrivateChats/#Tourmaline::Error::PollsCantBeSentToPrivateChats","text":"","title":"PollsCantBeSentToPrivateChats"},{"location":"api_reference/Tourmaline/Error/PollsOptionsLengthTooLong/","text":"class Tourmaline::Error::PollsOptionsLengthTooLong inherits Tourmaline::Error::PollError #","title":"PollsOptionsLengthTooLong"},{"location":"api_reference/Tourmaline/Error/PollsOptionsLengthTooLong/#Tourmaline::Error::PollsOptionsLengthTooLong","text":"","title":"PollsOptionsLengthTooLong"},{"location":"api_reference/Tourmaline/Error/PoolRetryAttemptsExceeded/","text":"class Tourmaline::Error::PoolRetryAttemptsExceeded inherits DB::PoolRetryAttemptsExceeded #","title":"PoolRetryAttemptsExceeded"},{"location":"api_reference/Tourmaline/Error/PoolRetryAttemptsExceeded/#Tourmaline::Error::PoolRetryAttemptsExceeded","text":"","title":"PoolRetryAttemptsExceeded"},{"location":"api_reference/Tourmaline/Error/RequestTimeoutError/","text":"class Tourmaline::Error::RequestTimeoutError inherits Tourmaline::Error::BadRequest #","title":"RequestTimeoutError"},{"location":"api_reference/Tourmaline/Error/RequestTimeoutError/#Tourmaline::Error::RequestTimeoutError","text":"","title":"RequestTimeoutError"},{"location":"api_reference/Tourmaline/Error/ResultIdDuplicate/","text":"class Tourmaline::Error::ResultIdDuplicate inherits Tourmaline::Error::BadRequest #","title":"ResultIdDuplicate"},{"location":"api_reference/Tourmaline/Error/ResultIdDuplicate/#Tourmaline::Error::ResultIdDuplicate","text":"","title":"ResultIdDuplicate"},{"location":"api_reference/Tourmaline/Error/RetryAfter/","text":"class Tourmaline::Error::RetryAfter inherits Tourmaline::Error # Constructors # .new ( seconds ) # View source Methods # #seconds : Int32 # View source","title":"RetryAfter"},{"location":"api_reference/Tourmaline/Error/RetryAfter/#Tourmaline::Error::RetryAfter","text":"","title":"RetryAfter"},{"location":"api_reference/Tourmaline/Error/RetryAfter/#Tourmaline::Error::RetryAfter-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Error/RetryAfter/#Tourmaline::Error::RetryAfter.new(seconds)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Error/RetryAfter/#Tourmaline::Error::RetryAfter-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Error/RetryAfter/#Tourmaline::Error::RetryAfter#seconds","text":"View source","title":"#seconds"},{"location":"api_reference/Tourmaline/Error/StartParamInvalid/","text":"class Tourmaline::Error::StartParamInvalid inherits Tourmaline::Error::BadRequest #","title":"StartParamInvalid"},{"location":"api_reference/Tourmaline/Error/StartParamInvalid/#Tourmaline::Error::StartParamInvalid","text":"","title":"StartParamInvalid"},{"location":"api_reference/Tourmaline/Error/TerminatedByOtherGetUpdates/","text":"class Tourmaline::Error::TerminatedByOtherGetUpdates inherits Tourmaline::Error::ConflictError #","title":"TerminatedByOtherGetUpdates"},{"location":"api_reference/Tourmaline/Error/TerminatedByOtherGetUpdates/#Tourmaline::Error::TerminatedByOtherGetUpdates","text":"","title":"TerminatedByOtherGetUpdates"},{"location":"api_reference/Tourmaline/Error/Throttled/","text":"class Tourmaline::Error::Throttled inherits Tourmaline::Error #","title":"Throttled"},{"location":"api_reference/Tourmaline/Error/Throttled/#Tourmaline::Error::Throttled","text":"","title":"Throttled"},{"location":"api_reference/Tourmaline/Error/TooMuchMessages/","text":"class Tourmaline::Error::TooMuchMessages inherits Tourmaline::Error::MessageError #","title":"TooMuchMessages"},{"location":"api_reference/Tourmaline/Error/TooMuchMessages/#Tourmaline::Error::TooMuchMessages","text":"","title":"TooMuchMessages"},{"location":"api_reference/Tourmaline/Error/TypeOfFileMismatch/","text":"class Tourmaline::Error::TypeOfFileMismatch inherits Tourmaline::Error::BadRequest #","title":"TypeOfFileMismatch"},{"location":"api_reference/Tourmaline/Error/TypeOfFileMismatch/#Tourmaline::Error::TypeOfFileMismatch","text":"","title":"TypeOfFileMismatch"},{"location":"api_reference/Tourmaline/Error/URLHostIsEmpty/","text":"class Tourmaline::Error::URLHostIsEmpty inherits Tourmaline::Error::BadRequest #","title":"URLHostIsEmpty"},{"location":"api_reference/Tourmaline/Error/URLHostIsEmpty/#Tourmaline::Error::URLHostIsEmpty","text":"","title":"URLHostIsEmpty"},{"location":"api_reference/Tourmaline/Error/Unauthorized/","text":"class Tourmaline::Error::Unauthorized inherits Tourmaline::Error # Direct known subclasses Tourmaline::Error::BotBlocked Tourmaline::Error::BotKicked Tourmaline::Error::CantInitiateConversation Tourmaline::Error::CantTalkWithBots Tourmaline::Error::UserDeactivated","title":"Unauthorized"},{"location":"api_reference/Tourmaline/Error/Unauthorized/#Tourmaline::Error::Unauthorized","text":"","title":"Unauthorized"},{"location":"api_reference/Tourmaline/Error/UnavailableMembers/","text":"class Tourmaline::Error::UnavailableMembers inherits Tourmaline::Error::BadRequest #","title":"UnavailableMembers"},{"location":"api_reference/Tourmaline/Error/UnavailableMembers/#Tourmaline::Error::UnavailableMembers","text":"","title":"UnavailableMembers"},{"location":"api_reference/Tourmaline/Error/UnsupportedUrlProtocol/","text":"class Tourmaline::Error::UnsupportedUrlProtocol inherits Tourmaline::Error::BadRequest #","title":"UnsupportedUrlProtocol"},{"location":"api_reference/Tourmaline/Error/UnsupportedUrlProtocol/#Tourmaline::Error::UnsupportedUrlProtocol","text":"","title":"UnsupportedUrlProtocol"},{"location":"api_reference/Tourmaline/Error/UserDeactivated/","text":"class Tourmaline::Error::UserDeactivated inherits Tourmaline::Error::Unauthorized #","title":"UserDeactivated"},{"location":"api_reference/Tourmaline/Error/UserDeactivated/#Tourmaline::Error::UserDeactivated","text":"","title":"UserDeactivated"},{"location":"api_reference/Tourmaline/Error/ValidationError/","text":"class Tourmaline::Error::ValidationError inherits Tourmaline::Error #","title":"ValidationError"},{"location":"api_reference/Tourmaline/Error/ValidationError/#Tourmaline::Error::ValidationError","text":"","title":"ValidationError"},{"location":"api_reference/Tourmaline/Error/WebhookRequireHTTPS/","text":"class Tourmaline::Error::WebhookRequireHTTPS inherits Tourmaline::Error::BadWebhook #","title":"WebhookRequireHTTPS"},{"location":"api_reference/Tourmaline/Error/WebhookRequireHTTPS/#Tourmaline::Error::WebhookRequireHTTPS","text":"","title":"WebhookRequireHTTPS"},{"location":"api_reference/Tourmaline/Error/WrongFileIdentifier/","text":"class Tourmaline::Error::WrongFileIdentifier inherits Tourmaline::Error::BadRequest #","title":"WrongFileIdentifier"},{"location":"api_reference/Tourmaline/Error/WrongFileIdentifier/#Tourmaline::Error::WrongFileIdentifier","text":"","title":"WrongFileIdentifier"},{"location":"api_reference/Tourmaline/Error/WrongLiveLocationPeriod/","text":"class Tourmaline::Error::WrongLiveLocationPeriod inherits Tourmaline::Error::BadRequest #","title":"WrongLiveLocationPeriod"},{"location":"api_reference/Tourmaline/Error/WrongLiveLocationPeriod/#Tourmaline::Error::WrongLiveLocationPeriod","text":"","title":"WrongLiveLocationPeriod"},{"location":"api_reference/Tourmaline/Error/WrongRemoteFileIdSpecified/","text":"class Tourmaline::Error::WrongRemoteFileIdSpecified inherits Tourmaline::Error::BadRequest #","title":"WrongRemoteFileIdSpecified"},{"location":"api_reference/Tourmaline/Error/WrongRemoteFileIdSpecified/#Tourmaline::Error::WrongRemoteFileIdSpecified","text":"","title":"WrongRemoteFileIdSpecified"},{"location":"api_reference/Tourmaline/EventHandler/","text":"abstract class Tourmaline::EventHandler inherits Reference # Base class for all handlers. Direct known subclasses Tourmaline::Handlers::CallbackQueryHandler Tourmaline::Handlers::ChosenInlineResultHandler Tourmaline::Handlers::CommandHandler Tourmaline::Handlers::EditedHandler Tourmaline::Handlers::HearsHandler Tourmaline::Handlers::InlineQueryHandler Tourmaline::Handlers::UpdateHandler Constructors # .new ( group = :default , priority = 0 ) # View source Methods # abstract #call ( client : Client , update : Update ) # View source #group : String # View source #priority : Int32 # View source","title":"EventHandler"},{"location":"api_reference/Tourmaline/EventHandler/#Tourmaline::EventHandler","text":"Base class for all handlers.","title":"EventHandler"},{"location":"api_reference/Tourmaline/EventHandler/#Tourmaline::EventHandler-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/EventHandler/#Tourmaline::EventHandler.new(group,priority)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/EventHandler/#Tourmaline::EventHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/EventHandler/#Tourmaline::EventHandler#call(client,update)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/EventHandler/#Tourmaline::EventHandler#group","text":"View source","title":"#group"},{"location":"api_reference/Tourmaline/EventHandler/#Tourmaline::EventHandler#priority","text":"View source","title":"#priority"},{"location":"api_reference/Tourmaline/ForceReply/","text":"class Tourmaline::ForceReply inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( selective : Bool , force_reply : Bool = true ) # View source Methods # #force_reply : Bool # View source #input_field_placeholder : String? # View source #selective : Bool # View source","title":"ForceReply"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply","text":"","title":"ForceReply"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply#force_reply","text":"View source","title":"#force_reply"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply#input_field_placeholder","text":"View source","title":"#input_field_placeholder"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply#selective","text":"View source","title":"#selective"},{"location":"api_reference/Tourmaline/Format/","text":"module Tourmaline::Format # The Tourmaline::Format module provides an easy to use DSL for formatting text for Telegram. It takes care of escaping entities for you so you don't have to. Heavily inspired by the mdtex module from Kantek, so thanks Simon!","title":"Format"},{"location":"api_reference/Tourmaline/Format/#Tourmaline::Format","text":"The Tourmaline::Format module provides an easy to use DSL for formatting text for Telegram. It takes care of escaping entities for you so you don't have to. Heavily inspired by the mdtex module from Kantek, so thanks Simon!","title":"Format"},{"location":"api_reference/Tourmaline/Format/Bold/","text":"class Tourmaline::Format::Bold inherits Tourmaline::Format::Token # Constructors # .new ( token : Token | String ) # View source Methods # #to_html : String # View source #to_md ( version : Int32 = 2 ) : String # View source #token : String | Tourmaline::Format::Token # View source #token= ( token ) # View source","title":"Bold"},{"location":"api_reference/Tourmaline/Format/Bold/#Tourmaline::Format::Bold","text":"","title":"Bold"},{"location":"api_reference/Tourmaline/Format/Bold/#Tourmaline::Format::Bold-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Format/Bold/#Tourmaline::Format::Bold.new(token)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Format/Bold/#Tourmaline::Format::Bold-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Format/Bold/#Tourmaline::Format::Bold#to_html","text":"View source","title":"#to_html"},{"location":"api_reference/Tourmaline/Format/Bold/#Tourmaline::Format::Bold#to_md(version)","text":"View source","title":"#to_md"},{"location":"api_reference/Tourmaline/Format/Bold/#Tourmaline::Format::Bold#token","text":"View source","title":"#token"},{"location":"api_reference/Tourmaline/Format/Bold/#Tourmaline::Format::Bold#token=(token)","text":"View source","title":"#token="},{"location":"api_reference/Tourmaline/Format/Code/","text":"class Tourmaline::Format::Code inherits Tourmaline::Format::Token # Constructors # .new ( token : String ) # View source Methods # #to_html : String # View source #to_md ( version : Int32 = 2 ) : String # View source #token : String # View source #token= ( token ) # View source","title":"Code"},{"location":"api_reference/Tourmaline/Format/Code/#Tourmaline::Format::Code","text":"","title":"Code"},{"location":"api_reference/Tourmaline/Format/Code/#Tourmaline::Format::Code-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Format/Code/#Tourmaline::Format::Code.new(token)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Format/Code/#Tourmaline::Format::Code-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Format/Code/#Tourmaline::Format::Code#to_html","text":"View source","title":"#to_html"},{"location":"api_reference/Tourmaline/Format/Code/#Tourmaline::Format::Code#to_md(version)","text":"View source","title":"#to_md"},{"location":"api_reference/Tourmaline/Format/Code/#Tourmaline::Format::Code#token","text":"View source","title":"#token"},{"location":"api_reference/Tourmaline/Format/Code/#Tourmaline::Format::Code#token=(token)","text":"View source","title":"#token="},{"location":"api_reference/Tourmaline/Format/CodeBlock/","text":"class Tourmaline::Format::CodeBlock inherits Tourmaline::Format::Token # Constructors # .new ( token : String , language : String? = nil ) # View source Methods # #language : String? # View source #language= ( language ) # View source #to_html : String # View source #to_md ( version : Int32 = 2 ) : String # View source #token : String # View source #token= ( token ) # View source","title":"CodeBlock"},{"location":"api_reference/Tourmaline/Format/CodeBlock/#Tourmaline::Format::CodeBlock","text":"","title":"CodeBlock"},{"location":"api_reference/Tourmaline/Format/CodeBlock/#Tourmaline::Format::CodeBlock-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Format/CodeBlock/#Tourmaline::Format::CodeBlock.new(token,language)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Format/CodeBlock/#Tourmaline::Format::CodeBlock-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Format/CodeBlock/#Tourmaline::Format::CodeBlock#language","text":"View source","title":"#language"},{"location":"api_reference/Tourmaline/Format/CodeBlock/#Tourmaline::Format::CodeBlock#language=(language)","text":"View source","title":"#language="},{"location":"api_reference/Tourmaline/Format/CodeBlock/#Tourmaline::Format::CodeBlock#to_html","text":"View source","title":"#to_html"},{"location":"api_reference/Tourmaline/Format/CodeBlock/#Tourmaline::Format::CodeBlock#to_md(version)","text":"View source","title":"#to_md"},{"location":"api_reference/Tourmaline/Format/CodeBlock/#Tourmaline::Format::CodeBlock#token","text":"View source","title":"#token"},{"location":"api_reference/Tourmaline/Format/CodeBlock/#Tourmaline::Format::CodeBlock#token=(token)","text":"View source","title":"#token="},{"location":"api_reference/Tourmaline/Format/Group/","text":"class Tourmaline::Format::Group inherits Tourmaline::Format::Token # Direct known subclasses Tourmaline::Format::LineItem Constructors # .new ( * tokens ) # View source Methods # #<< ( * args , ** options ) # View source #<< # View source #build ( * args , ** kwargs , & block : self -> ) # View source #push ( * args , ** options ) # View source #push # View source #shift ( * args , ** options ) # View source #shift # View source #to_html : String # View source #to_md ( version : Int32 = 2 ) : String # View source #tokens : Array ( Token | String ) # View source #tokens= ( tokens : Array ( Token | String )) # View source #unshift ( * args , ** options ) # View source #unshift # View source","title":"Group"},{"location":"api_reference/Tourmaline/Format/Group/#Tourmaline::Format::Group","text":"","title":"Group"},{"location":"api_reference/Tourmaline/Format/Group/#Tourmaline::Format::Group-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Format/Group/#Tourmaline::Format::Group.new(*)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Format/Group/#Tourmaline::Format::Group-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Format/Group/#Tourmaline::Format::Group#<<(*,**)","text":"View source","title":"#&lt;&lt;"},{"location":"api_reference/Tourmaline/Format/Group/#Tourmaline::Format::Group#build(*,**,&)","text":"View source","title":"#build"},{"location":"api_reference/Tourmaline/Format/Group/#Tourmaline::Format::Group#push(*,**)","text":"View source","title":"#push"},{"location":"api_reference/Tourmaline/Format/Group/#Tourmaline::Format::Group#shift(*,**)","text":"View source","title":"#shift"},{"location":"api_reference/Tourmaline/Format/Group/#Tourmaline::Format::Group#to_html","text":"View source","title":"#to_html"},{"location":"api_reference/Tourmaline/Format/Group/#Tourmaline::Format::Group#to_md(version)","text":"View source","title":"#to_md"},{"location":"api_reference/Tourmaline/Format/Group/#Tourmaline::Format::Group#tokens","text":"View source","title":"#tokens"},{"location":"api_reference/Tourmaline/Format/Group/#Tourmaline::Format::Group#tokens=(tokens)","text":"View source","title":"#tokens="},{"location":"api_reference/Tourmaline/Format/Group/#Tourmaline::Format::Group#unshift(*,**)","text":"View source","title":"#unshift"},{"location":"api_reference/Tourmaline/Format/Italic/","text":"class Tourmaline::Format::Italic inherits Tourmaline::Format::Token # Constructors # .new ( token : Token | String ) # View source Methods # #to_html : String # View source #to_md ( version : Int32 = 2 ) : String # View source #token : String | Tourmaline::Format::Token # View source #token= ( token ) # View source","title":"Italic"},{"location":"api_reference/Tourmaline/Format/Italic/#Tourmaline::Format::Italic","text":"","title":"Italic"},{"location":"api_reference/Tourmaline/Format/Italic/#Tourmaline::Format::Italic-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Format/Italic/#Tourmaline::Format::Italic.new(token)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Format/Italic/#Tourmaline::Format::Italic-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Format/Italic/#Tourmaline::Format::Italic#to_html","text":"View source","title":"#to_html"},{"location":"api_reference/Tourmaline/Format/Italic/#Tourmaline::Format::Italic#to_md(version)","text":"View source","title":"#to_md"},{"location":"api_reference/Tourmaline/Format/Italic/#Tourmaline::Format::Italic#token","text":"View source","title":"#token"},{"location":"api_reference/Tourmaline/Format/Italic/#Tourmaline::Format::Italic#token=(token)","text":"View source","title":"#token="},{"location":"api_reference/Tourmaline/Format/KeyValueItem/","text":"class Tourmaline::Format::KeyValueItem inherits Tourmaline::Format::Token # Constructors # .new ( key : Token | String , value : Token | String ) # View source Methods # #key : String | Tourmaline::Format::Token # View source #key= ( key ) # View source #to_html : String # View source #to_md ( version : Int32 = 2 ) : String # View source #value : String | Tourmaline::Format::Token # View source #value= ( value ) # View source","title":"KeyValueItem"},{"location":"api_reference/Tourmaline/Format/KeyValueItem/#Tourmaline::Format::KeyValueItem","text":"","title":"KeyValueItem"},{"location":"api_reference/Tourmaline/Format/KeyValueItem/#Tourmaline::Format::KeyValueItem-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Format/KeyValueItem/#Tourmaline::Format::KeyValueItem.new(key,value)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Format/KeyValueItem/#Tourmaline::Format::KeyValueItem-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Format/KeyValueItem/#Tourmaline::Format::KeyValueItem#key","text":"View source","title":"#key"},{"location":"api_reference/Tourmaline/Format/KeyValueItem/#Tourmaline::Format::KeyValueItem#key=(key)","text":"View source","title":"#key="},{"location":"api_reference/Tourmaline/Format/KeyValueItem/#Tourmaline::Format::KeyValueItem#to_html","text":"View source","title":"#to_html"},{"location":"api_reference/Tourmaline/Format/KeyValueItem/#Tourmaline::Format::KeyValueItem#to_md(version)","text":"View source","title":"#to_md"},{"location":"api_reference/Tourmaline/Format/KeyValueItem/#Tourmaline::Format::KeyValueItem#value","text":"View source","title":"#value"},{"location":"api_reference/Tourmaline/Format/KeyValueItem/#Tourmaline::Format::KeyValueItem#value=(value)","text":"View source","title":"#value="},{"location":"api_reference/Tourmaline/Format/LineItem/","text":"class Tourmaline::Format::LineItem inherits Tourmaline::Format::Group # Constructors # .new ( * tokens , spaces : Int32 = 1 ) # View source Methods # #<< ( * args , ** options ) # View source #<< # View source #push ( * args , ** options ) # View source #push # View source #shift ( * args , ** options ) # View source #shift # View source #spaces : Int32 # View source #spaces= ( spaces : Int32 ) # View source #to_html : String # View source #to_md ( version : Int32 = 2 ) : String # View source #tokens : Array ( Token | String ) # View source #tokens= ( tokens : Array ( Token | String )) # View source #unshift ( * args , ** options ) # View source #unshift # View source","title":"LineItem"},{"location":"api_reference/Tourmaline/Format/LineItem/#Tourmaline::Format::LineItem","text":"","title":"LineItem"},{"location":"api_reference/Tourmaline/Format/LineItem/#Tourmaline::Format::LineItem-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Format/LineItem/#Tourmaline::Format::LineItem.new(*,spaces)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Format/LineItem/#Tourmaline::Format::LineItem-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Format/LineItem/#Tourmaline::Format::LineItem#<<(*,**)","text":"View source","title":"#&lt;&lt;"},{"location":"api_reference/Tourmaline/Format/LineItem/#Tourmaline::Format::LineItem#push(*,**)","text":"View source","title":"#push"},{"location":"api_reference/Tourmaline/Format/LineItem/#Tourmaline::Format::LineItem#shift(*,**)","text":"View source","title":"#shift"},{"location":"api_reference/Tourmaline/Format/LineItem/#Tourmaline::Format::LineItem#spaces","text":"View source","title":"#spaces"},{"location":"api_reference/Tourmaline/Format/LineItem/#Tourmaline::Format::LineItem#spaces=(spaces)","text":"View source","title":"#spaces="},{"location":"api_reference/Tourmaline/Format/LineItem/#Tourmaline::Format::LineItem#to_html","text":"View source","title":"#to_html"},{"location":"api_reference/Tourmaline/Format/LineItem/#Tourmaline::Format::LineItem#to_md(version)","text":"View source","title":"#to_md"},{"location":"api_reference/Tourmaline/Format/LineItem/#Tourmaline::Format::LineItem#tokens","text":"View source","title":"#tokens"},{"location":"api_reference/Tourmaline/Format/LineItem/#Tourmaline::Format::LineItem#tokens=(tokens)","text":"View source","title":"#tokens="},{"location":"api_reference/Tourmaline/Format/LineItem/#Tourmaline::Format::LineItem#unshift(*,**)","text":"View source","title":"#unshift"},{"location":"api_reference/Tourmaline/Format/Link/","text":"class Tourmaline::Format::Link inherits Tourmaline::Format::Token # Constructors # .new ( token : Token | String , url : String ) # View source Methods # #to_html : String # View source #to_md ( version : Int32 = 2 ) : String # View source #token : String | Tourmaline::Format::Token # View source #token= ( token ) # View source #url : String # View source #url= ( url ) # View source","title":"Link"},{"location":"api_reference/Tourmaline/Format/Link/#Tourmaline::Format::Link","text":"","title":"Link"},{"location":"api_reference/Tourmaline/Format/Link/#Tourmaline::Format::Link-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Format/Link/#Tourmaline::Format::Link.new(token,url)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Format/Link/#Tourmaline::Format::Link-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Format/Link/#Tourmaline::Format::Link#to_html","text":"View source","title":"#to_html"},{"location":"api_reference/Tourmaline/Format/Link/#Tourmaline::Format::Link#to_md(version)","text":"View source","title":"#to_md"},{"location":"api_reference/Tourmaline/Format/Link/#Tourmaline::Format::Link#token","text":"View source","title":"#token"},{"location":"api_reference/Tourmaline/Format/Link/#Tourmaline::Format::Link#token=(token)","text":"View source","title":"#token="},{"location":"api_reference/Tourmaline/Format/Link/#Tourmaline::Format::Link#url","text":"View source","title":"#url"},{"location":"api_reference/Tourmaline/Format/Link/#Tourmaline::Format::Link#url=(url)","text":"View source","title":"#url="},{"location":"api_reference/Tourmaline/Format/Section/","text":"class Tourmaline::Format::Section inherits Tourmaline::Format::Token # Direct known subclasses Tourmaline::Format::SubSection Tourmaline::Format::SubSubSection Constructors # .new ( * tokens , indent : Int32 = 4 , spacing : Int32 = 1 ) # View source Class methods # .build ( * args , ** kwargs , & block : self -> ) # View source Methods # #<< ( * args , ** options ) # View source #<< # View source #indent : Int32 # View source #indent= ( indent : Int32 ) # View source #push ( * args , ** options ) # View source #push # View source #shift ( * args , ** options ) # View source #shift # View source #spacing : Int32 # View source #spacing= ( spacing : Int32 ) # View source #to_html : String # View source #to_md ( version : Int32 = 2 ) : String # View source #tokens : Array ( Token | String ) # View source #tokens= ( tokens : Array ( Token | String )) # View source #unshift ( * args , ** options ) # View source #unshift # View source","title":"Section"},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section","text":"","title":"Section"},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section.new(*,indent,spacing)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section.build(*,**,&)","text":"View source","title":".build"},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section#<<(*,**)","text":"View source","title":"#&lt;&lt;"},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section#indent","text":"View source","title":"#indent"},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section#indent=(indent)","text":"View source","title":"#indent="},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section#push(*,**)","text":"View source","title":"#push"},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section#shift(*,**)","text":"View source","title":"#shift"},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section#spacing","text":"View source","title":"#spacing"},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section#spacing=(spacing)","text":"View source","title":"#spacing="},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section#to_html","text":"View source","title":"#to_html"},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section#to_md(version)","text":"View source","title":"#to_md"},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section#tokens","text":"View source","title":"#tokens"},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section#tokens=(tokens)","text":"View source","title":"#tokens="},{"location":"api_reference/Tourmaline/Format/Section/#Tourmaline::Format::Section#unshift(*,**)","text":"View source","title":"#unshift"},{"location":"api_reference/Tourmaline/Format/Strikethrough/","text":"class Tourmaline::Format::Strikethrough inherits Tourmaline::Format::Token # Constructors # .new ( token : Token | String ) # View source Methods # #to_html : String # View source #to_md ( version : Int32 = 2 ) : String # View source #token : String | Tourmaline::Format::Token # View source #token= ( token ) # View source","title":"Strikethrough"},{"location":"api_reference/Tourmaline/Format/Strikethrough/#Tourmaline::Format::Strikethrough","text":"","title":"Strikethrough"},{"location":"api_reference/Tourmaline/Format/Strikethrough/#Tourmaline::Format::Strikethrough-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Format/Strikethrough/#Tourmaline::Format::Strikethrough.new(token)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Format/Strikethrough/#Tourmaline::Format::Strikethrough-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Format/Strikethrough/#Tourmaline::Format::Strikethrough#to_html","text":"View source","title":"#to_html"},{"location":"api_reference/Tourmaline/Format/Strikethrough/#Tourmaline::Format::Strikethrough#to_md(version)","text":"View source","title":"#to_md"},{"location":"api_reference/Tourmaline/Format/Strikethrough/#Tourmaline::Format::Strikethrough#token","text":"View source","title":"#token"},{"location":"api_reference/Tourmaline/Format/Strikethrough/#Tourmaline::Format::Strikethrough#token=(token)","text":"View source","title":"#token="},{"location":"api_reference/Tourmaline/Format/SubSection/","text":"class Tourmaline::Format::SubSection inherits Tourmaline::Format::Section # Constructors # .new ( tokens : Array ( Token | String ), indent = 8 , spacing = 1 ) # View source","title":"SubSection"},{"location":"api_reference/Tourmaline/Format/SubSection/#Tourmaline::Format::SubSection","text":"","title":"SubSection"},{"location":"api_reference/Tourmaline/Format/SubSection/#Tourmaline::Format::SubSection-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Format/SubSection/#Tourmaline::Format::SubSection.new(tokens,indent,spacing)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Format/SubSubSection/","text":"class Tourmaline::Format::SubSubSection inherits Tourmaline::Format::Section # Constructors # .new ( tokens : Array ( Token | String ), indent = 12 , spacing = 1 ) # View source","title":"SubSubSection"},{"location":"api_reference/Tourmaline/Format/SubSubSection/#Tourmaline::Format::SubSubSection","text":"","title":"SubSubSection"},{"location":"api_reference/Tourmaline/Format/SubSubSection/#Tourmaline::Format::SubSubSection-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Format/SubSubSection/#Tourmaline::Format::SubSubSection.new(tokens,indent,spacing)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Format/Token/","text":"abstract class Tourmaline::Format::Token inherits Reference # Direct known subclasses Tourmaline::Format::Bold Tourmaline::Format::Code Tourmaline::Format::CodeBlock Tourmaline::Format::Group Tourmaline::Format::Italic Tourmaline::Format::KeyValueItem Tourmaline::Format::Link Tourmaline::Format::Section Tourmaline::Format::Strikethrough Tourmaline::Format::Underline Tourmaline::Format::UserMention Methods # abstract #to_html : String # View source abstract #to_md ( version : Int32 ) : String # View source","title":"Token"},{"location":"api_reference/Tourmaline/Format/Token/#Tourmaline::Format::Token","text":"","title":"Token"},{"location":"api_reference/Tourmaline/Format/Token/#Tourmaline::Format::Token-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Format/Token/#Tourmaline::Format::Token#to_html","text":"View source","title":"#to_html"},{"location":"api_reference/Tourmaline/Format/Token/#Tourmaline::Format::Token#to_md(version)","text":"View source","title":"#to_md"},{"location":"api_reference/Tourmaline/Format/Underline/","text":"class Tourmaline::Format::Underline inherits Tourmaline::Format::Token # Constructors # .new ( token : Token | String ) # View source Methods # #to_html : String # View source #to_md ( version : Int32 = 2 ) : String # View source #token : String | Tourmaline::Format::Token # View source #token= ( token ) # View source","title":"Underline"},{"location":"api_reference/Tourmaline/Format/Underline/#Tourmaline::Format::Underline","text":"","title":"Underline"},{"location":"api_reference/Tourmaline/Format/Underline/#Tourmaline::Format::Underline-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Format/Underline/#Tourmaline::Format::Underline.new(token)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Format/Underline/#Tourmaline::Format::Underline-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Format/Underline/#Tourmaline::Format::Underline#to_html","text":"View source","title":"#to_html"},{"location":"api_reference/Tourmaline/Format/Underline/#Tourmaline::Format::Underline#to_md(version)","text":"View source","title":"#to_md"},{"location":"api_reference/Tourmaline/Format/Underline/#Tourmaline::Format::Underline#token","text":"View source","title":"#token"},{"location":"api_reference/Tourmaline/Format/Underline/#Tourmaline::Format::Underline#token=(token)","text":"View source","title":"#token="},{"location":"api_reference/Tourmaline/Format/UserMention/","text":"class Tourmaline::Format::UserMention inherits Tourmaline::Format::Token # Constructors # .new ( token : Token | String , user_id : Int64 ) # View source .new ( user ) # View source Methods # #to_html : String # View source #to_md ( version : Int32 = 2 ) : String # View source #token : String | Tourmaline::Format::Token # View source #token= ( token ) # View source #user_id : Int64 # View source #user_id= ( user_id ) # View source","title":"UserMention"},{"location":"api_reference/Tourmaline/Format/UserMention/#Tourmaline::Format::UserMention","text":"","title":"UserMention"},{"location":"api_reference/Tourmaline/Format/UserMention/#Tourmaline::Format::UserMention-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Format/UserMention/#Tourmaline::Format::UserMention.new(token,user_id)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Format/UserMention/#Tourmaline::Format::UserMention-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Format/UserMention/#Tourmaline::Format::UserMention#to_html","text":"View source","title":"#to_html"},{"location":"api_reference/Tourmaline/Format/UserMention/#Tourmaline::Format::UserMention#to_md(version)","text":"View source","title":"#to_md"},{"location":"api_reference/Tourmaline/Format/UserMention/#Tourmaline::Format::UserMention#token","text":"View source","title":"#token"},{"location":"api_reference/Tourmaline/Format/UserMention/#Tourmaline::Format::UserMention#token=(token)","text":"View source","title":"#token="},{"location":"api_reference/Tourmaline/Format/UserMention/#Tourmaline::Format::UserMention#user_id","text":"View source","title":"#user_id"},{"location":"api_reference/Tourmaline/Format/UserMention/#Tourmaline::Format::UserMention#user_id=(user_id)","text":"View source","title":"#user_id="},{"location":"api_reference/Tourmaline/Game/","text":"class Tourmaline::Game inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #animation : Animation? # View source #description : String # View source #photo : Array ( PhotoSize ) # View source #text : String? # View source #text_entities : Array ( MessageEntity )? # View source #title : String # View source","title":"Game"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game","text":"","title":"Game"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#animation","text":"View source","title":"#animation"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#photo","text":"View source","title":"#photo"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#text","text":"View source","title":"#text"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#text_entities","text":"View source","title":"#text_entities"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/GameHighScore/","text":"class Tourmaline::GameHighScore inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #position : Int32 # View source #score : Int32 # View source #user : User # View source","title":"GameHighScore"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore","text":"","title":"GameHighScore"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore#position","text":"View source","title":"#position"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore#score","text":"View source","title":"#score"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore#user","text":"View source","title":"#user"},{"location":"api_reference/Tourmaline/Handlers/","text":"module Tourmaline::Handlers # Direct including types Tourmaline","title":"Handlers"},{"location":"api_reference/Tourmaline/Handlers/#Tourmaline::Handlers","text":"","title":"Handlers"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/","text":"class Tourmaline::Handlers::CallbackQueryHandler inherits Tourmaline::EventHandler # Constants # ANNOTATION = OnCallbackQuery # Constructors # .new ( pattern : String | Regex , group = :default , priority = 0 , & block : Context -> ) # View source Methods # #call ( client : Client , update : Update ) # View source #pattern : Regex # View source","title":"CallbackQueryHandler"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/#Tourmaline::Handlers::CallbackQueryHandler","text":"","title":"CallbackQueryHandler"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/#Tourmaline::Handlers::CallbackQueryHandler-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/#Tourmaline::Handlers::CallbackQueryHandler::ANNOTATION","text":"","title":"ANNOTATION"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/#Tourmaline::Handlers::CallbackQueryHandler-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/#Tourmaline::Handlers::CallbackQueryHandler.new(pattern,group,priority,&)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/#Tourmaline::Handlers::CallbackQueryHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/#Tourmaline::Handlers::CallbackQueryHandler#call(client,update)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/#Tourmaline::Handlers::CallbackQueryHandler#pattern","text":"View source","title":"#pattern"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/Context/","text":"struct Tourmaline::Handlers::CallbackQueryHandler::Context inherits Struct # Constructors # .new ( update : Update , context : Middleware::Context , message : Message? , query : CallbackQuery , match : Regex :: MatchData ) # View source Methods # #clone # View source #context : Middleware::Context # #copy_with ( update _update = @update , context _context = @context , message _message = @message , query _query = @query , match _match = @match ) # View source #match : Regex :: MatchData # #message : Message? # #query : CallbackQuery # #update : Update #","title":"Context"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/Context/#Tourmaline::Handlers::CallbackQueryHandler::Context","text":"","title":"Context"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/Context/#Tourmaline::Handlers::CallbackQueryHandler::Context-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/Context/#Tourmaline::Handlers::CallbackQueryHandler::Context.new(update,context,message,query,match)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/Context/#Tourmaline::Handlers::CallbackQueryHandler::Context-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/Context/#Tourmaline::Handlers::CallbackQueryHandler::Context#clone","text":"View source","title":"#clone"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/Context/#Tourmaline::Handlers::CallbackQueryHandler::Context#context","text":"","title":"#context"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/Context/#Tourmaline::Handlers::CallbackQueryHandler::Context#copy_with(update,context,message,query,match)","text":"View source","title":"#copy_with"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/Context/#Tourmaline::Handlers::CallbackQueryHandler::Context#match","text":"","title":"#match"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/Context/#Tourmaline::Handlers::CallbackQueryHandler::Context#message","text":"","title":"#message"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/Context/#Tourmaline::Handlers::CallbackQueryHandler::Context#query","text":"","title":"#query"},{"location":"api_reference/Tourmaline/Handlers/CallbackQueryHandler/Context/#Tourmaline::Handlers::CallbackQueryHandler::Context#update","text":"","title":"#update"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/","text":"class Tourmaline::Handlers::ChosenInlineResultHandler inherits Tourmaline::EventHandler # Constants # ANNOTATION = OnChosenInlineResult # Constructors # .new ( pattern : String | Regex? = nil , group = :default , priority = 0 , & block : Context -> ) # View source Methods # #call ( client : Client , update : Update ) # View source #pattern : Regex? # View source","title":"ChosenInlineResultHandler"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/#Tourmaline::Handlers::ChosenInlineResultHandler","text":"","title":"ChosenInlineResultHandler"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/#Tourmaline::Handlers::ChosenInlineResultHandler-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/#Tourmaline::Handlers::ChosenInlineResultHandler::ANNOTATION","text":"","title":"ANNOTATION"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/#Tourmaline::Handlers::ChosenInlineResultHandler-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/#Tourmaline::Handlers::ChosenInlineResultHandler.new(pattern,group,priority,&)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/#Tourmaline::Handlers::ChosenInlineResultHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/#Tourmaline::Handlers::ChosenInlineResultHandler#call(client,update)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/#Tourmaline::Handlers::ChosenInlineResultHandler#pattern","text":"View source","title":"#pattern"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/Context/","text":"struct Tourmaline::Handlers::ChosenInlineResultHandler::Context inherits Struct # Constructors # .new ( update : Update , context : Middleware::Context , result : ChosenInlineResult , match : Regex :: MatchData? ) # View source Methods # #clone # View source #context : Middleware::Context # #copy_with ( update _update = @update , context _context = @context , result _result = @result , match _match = @match ) # View source #match : Regex :: MatchData? # #result : ChosenInlineResult # #update : Update #","title":"Context"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/Context/#Tourmaline::Handlers::ChosenInlineResultHandler::Context","text":"","title":"Context"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/Context/#Tourmaline::Handlers::ChosenInlineResultHandler::Context-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/Context/#Tourmaline::Handlers::ChosenInlineResultHandler::Context.new(update,context,result,match)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/Context/#Tourmaline::Handlers::ChosenInlineResultHandler::Context-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/Context/#Tourmaline::Handlers::ChosenInlineResultHandler::Context#clone","text":"View source","title":"#clone"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/Context/#Tourmaline::Handlers::ChosenInlineResultHandler::Context#context","text":"","title":"#context"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/Context/#Tourmaline::Handlers::ChosenInlineResultHandler::Context#copy_with(update,context,result,match)","text":"View source","title":"#copy_with"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/Context/#Tourmaline::Handlers::ChosenInlineResultHandler::Context#match","text":"","title":"#match"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/Context/#Tourmaline::Handlers::ChosenInlineResultHandler::Context#result","text":"","title":"#result"},{"location":"api_reference/Tourmaline/Handlers/ChosenInlineResultHandler/Context/#Tourmaline::Handlers::ChosenInlineResultHandler::Context#update","text":"","title":"#update"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/","text":"class Tourmaline::Handlers::CommandHandler inherits Tourmaline::EventHandler # Constants # ANNOTATION = Command # Constructors # .new ( commands , prefix = nil , group = :default , priority = 0 , outgoing = true , private_only = false , group_only = false , admin_only = false , on_edit = false , register = false , register_as = nil , description = nil , & block : Context -> ) # Create a new CommandHandler instance using the provided commands . commands can be a single command string, or an array of possible commands. Warning If #admin_only is true, get_chat_adminstrators will be run every time the handler is invoked. This should be fine in testing, but in production it's recommended to cache admins and do your own guarding. View source Methods # #admin_only : Bool # If true, this handler will only respond if the command is sent by a group admin. View source #admin_only= ( admin_only : Bool ) # If true, this handler will only respond if the command is sent by a group admin. View source #call ( client : Client , update : Update ) # View source #commands : Array ( String ) # Commands (without prefix) that this handler should respond to. View source #commands= ( commands : Array ( String )) # Commands (without prefix) that this handler should respond to. View source #description : String? # Used when registering the command with BotFather. If register is true, but this is not set, the command will not be registered. View source #description= ( description : String? ) # Used when registering the command with BotFather. If register is true, but this is not set, the command will not be registered. View source #group_only : Bool # If true, this handler will only respond if the command is sent in a group. View source #group_only= ( group_only : Bool ) # If true, this handler will only respond if the command is sent in a group. View source #on_edit : Bool # If true, this handler will also run (or re-run) when messages are edited. View source #on_edit= ( on_edit : Bool ) # If true, this handler will also run (or re-run) when messages are edited. View source #outgoing : Bool # User API: if true, this command will only be activated by an outgoing message. View source #outgoing= ( outgoing : Bool ) # User API: if true, this command will only be activated by an outgoing message. View source #prefixes : Array ( String ) # Prefixes that commands should start with. View source #prefixes= ( prefixes : Array ( String )) # Prefixes that commands should start with. View source #private_only : Bool # If true, this handler will only respond if the command is sent in private. View source #private_only= ( private_only : Bool ) # If true, this handler will only respond if the command is sent in private. View source #register : Bool # Register this command with BotFather. Only works is prefixes contains / (as it does by default), as non-botcommands can't be registed with BotFather. View source #register= ( register : Bool ) # Register this command with BotFather. Only works is prefixes contains / (as it does by default), as non-botcommands can't be registed with BotFather. View source #register_as : String? # By default the first command in commands will be selected as the command name to register. If this property is set, it will be used instead. View source #register_as= ( register_as : String? ) # By default the first command in commands will be selected as the command name to register. If this property is set, it will be used instead. View source","title":"CommandHandler"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler","text":"","title":"CommandHandler"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler::ANNOTATION","text":"","title":"ANNOTATION"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler.new(commands,prefix,group,priority,outgoing,private_only,group_only,admin_only,on_edit,register,register_as,description,&)","text":"Create a new CommandHandler instance using the provided commands . commands can be a single command string, or an array of possible commands. Warning If #admin_only is true, get_chat_adminstrators will be run every time the handler is invoked. This should be fine in testing, but in production it's recommended to cache admins and do your own guarding. View source","title":".new"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#admin_only","text":"If true, this handler will only respond if the command is sent by a group admin. View source","title":"#admin_only"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#admin_only=(admin_only)","text":"If true, this handler will only respond if the command is sent by a group admin. View source","title":"#admin_only="},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#call(client,update)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#commands","text":"Commands (without prefix) that this handler should respond to. View source","title":"#commands"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#commands=(commands)","text":"Commands (without prefix) that this handler should respond to. View source","title":"#commands="},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#description","text":"Used when registering the command with BotFather. If register is true, but this is not set, the command will not be registered. View source","title":"#description"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#description=(description)","text":"Used when registering the command with BotFather. If register is true, but this is not set, the command will not be registered. View source","title":"#description="},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#group_only","text":"If true, this handler will only respond if the command is sent in a group. View source","title":"#group_only"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#group_only=(group_only)","text":"If true, this handler will only respond if the command is sent in a group. View source","title":"#group_only="},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#on_edit","text":"If true, this handler will also run (or re-run) when messages are edited. View source","title":"#on_edit"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#on_edit=(on_edit)","text":"If true, this handler will also run (or re-run) when messages are edited. View source","title":"#on_edit="},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#outgoing","text":"User API: if true, this command will only be activated by an outgoing message. View source","title":"#outgoing"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#outgoing=(outgoing)","text":"User API: if true, this command will only be activated by an outgoing message. View source","title":"#outgoing="},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#prefixes","text":"Prefixes that commands should start with. View source","title":"#prefixes"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#prefixes=(prefixes)","text":"Prefixes that commands should start with. View source","title":"#prefixes="},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#private_only","text":"If true, this handler will only respond if the command is sent in private. View source","title":"#private_only"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#private_only=(private_only)","text":"If true, this handler will only respond if the command is sent in private. View source","title":"#private_only="},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#register","text":"Register this command with BotFather. Only works is prefixes contains / (as it does by default), as non-botcommands can't be registed with BotFather. View source","title":"#register"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#register=(register)","text":"Register this command with BotFather. Only works is prefixes contains / (as it does by default), as non-botcommands can't be registed with BotFather. View source","title":"#register="},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#register_as","text":"By default the first command in commands will be selected as the command name to register. If this property is set, it will be used instead. View source","title":"#register_as"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/#Tourmaline::Handlers::CommandHandler#register_as=(register_as)","text":"By default the first command in commands will be selected as the command name to register. If this property is set, it will be used instead. View source","title":"#register_as="},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/Context/","text":"struct Tourmaline::Handlers::CommandHandler::Context inherits Struct # Constructors # .new ( update : Update , context : Middleware::Context , message : Message , command : String , text : String , raw_text : String , botname : Bool , edit : Bool ) # View source Methods # #botname : Bool # #clone # View source #command : String # #context : Middleware::Context # #copy_with ( update _update = @update , context _context = @context , message _message = @message , command _command = @command , text _text = @text , raw_text _raw_text = @raw_text , botname _botname = @botname , edit _edit = @edit ) # View source #edit : Bool # #message : Message # #raw_text : String # #text : String # #update : Update #","title":"Context"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/Context/#Tourmaline::Handlers::CommandHandler::Context","text":"","title":"Context"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/Context/#Tourmaline::Handlers::CommandHandler::Context-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/Context/#Tourmaline::Handlers::CommandHandler::Context.new(update,context,message,command,text,raw_text,botname,edit)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/Context/#Tourmaline::Handlers::CommandHandler::Context-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/Context/#Tourmaline::Handlers::CommandHandler::Context#botname","text":"","title":"#botname"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/Context/#Tourmaline::Handlers::CommandHandler::Context#clone","text":"View source","title":"#clone"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/Context/#Tourmaline::Handlers::CommandHandler::Context#command","text":"","title":"#command"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/Context/#Tourmaline::Handlers::CommandHandler::Context#context","text":"","title":"#context"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/Context/#Tourmaline::Handlers::CommandHandler::Context#copy_with(update,context,message,command,text,raw_text,botname,edit)","text":"View source","title":"#copy_with"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/Context/#Tourmaline::Handlers::CommandHandler::Context#edit","text":"","title":"#edit"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/Context/#Tourmaline::Handlers::CommandHandler::Context#message","text":"","title":"#message"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/Context/#Tourmaline::Handlers::CommandHandler::Context#raw_text","text":"","title":"#raw_text"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/Context/#Tourmaline::Handlers::CommandHandler::Context#text","text":"","title":"#text"},{"location":"api_reference/Tourmaline/Handlers/CommandHandler/Context/#Tourmaline::Handlers::CommandHandler::Context#update","text":"","title":"#update"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/","text":"class Tourmaline::Handlers::EditedHandler inherits Tourmaline::EventHandler # Constants # ANNOTATION = Edited # Constructors # .new ( group = :default , priority = 0 , & block : Context -> ) # View source Methods # #call ( client : Client , update : Update ) # View source","title":"EditedHandler"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/#Tourmaline::Handlers::EditedHandler","text":"","title":"EditedHandler"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/#Tourmaline::Handlers::EditedHandler-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/#Tourmaline::Handlers::EditedHandler::ANNOTATION","text":"","title":"ANNOTATION"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/#Tourmaline::Handlers::EditedHandler-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/#Tourmaline::Handlers::EditedHandler.new(group,priority,&)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/#Tourmaline::Handlers::EditedHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/#Tourmaline::Handlers::EditedHandler#call(client,update)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/Context/","text":"struct Tourmaline::Handlers::EditedHandler::Context inherits Struct # Constructors # .new ( update : Update , context : Middleware::Context , message : Message ) # View source Methods # #clone # View source #context : Middleware::Context # #copy_with ( update _update = @update , context _context = @context , message _message = @message ) # View source #message : Message # #update : Update #","title":"Context"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/Context/#Tourmaline::Handlers::EditedHandler::Context","text":"","title":"Context"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/Context/#Tourmaline::Handlers::EditedHandler::Context-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/Context/#Tourmaline::Handlers::EditedHandler::Context.new(update,context,message)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/Context/#Tourmaline::Handlers::EditedHandler::Context-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/Context/#Tourmaline::Handlers::EditedHandler::Context#clone","text":"View source","title":"#clone"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/Context/#Tourmaline::Handlers::EditedHandler::Context#context","text":"","title":"#context"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/Context/#Tourmaline::Handlers::EditedHandler::Context#copy_with(update,context,message)","text":"View source","title":"#copy_with"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/Context/#Tourmaline::Handlers::EditedHandler::Context#message","text":"","title":"#message"},{"location":"api_reference/Tourmaline/Handlers/EditedHandler/Context/#Tourmaline::Handlers::EditedHandler::Context#update","text":"","title":"#update"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/","text":"class Tourmaline::Handlers::HearsHandler inherits Tourmaline::EventHandler # Constants # ANNOTATION = Hears # Constructors # .new ( pattern : String | Regex , group = :default , priority = 0 , & block : Context -> ) # View source Methods # #call ( client : Client , update : Update ) # View source #pattern : Regex # View source","title":"HearsHandler"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/#Tourmaline::Handlers::HearsHandler","text":"","title":"HearsHandler"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/#Tourmaline::Handlers::HearsHandler-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/#Tourmaline::Handlers::HearsHandler::ANNOTATION","text":"","title":"ANNOTATION"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/#Tourmaline::Handlers::HearsHandler-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/#Tourmaline::Handlers::HearsHandler.new(pattern,group,priority,&)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/#Tourmaline::Handlers::HearsHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/#Tourmaline::Handlers::HearsHandler#call(client,update)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/#Tourmaline::Handlers::HearsHandler#pattern","text":"View source","title":"#pattern"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/Context/","text":"struct Tourmaline::Handlers::HearsHandler::Context inherits Struct # Constructors # .new ( update : Update , context : Middleware::Context , message : Message , text : String , match : Regex :: MatchData ) # View source Methods # #clone # View source #context : Middleware::Context # #copy_with ( update _update = @update , context _context = @context , message _message = @message , text _text = @text , match _match = @match ) # View source #match : Regex :: MatchData # #message : Message # #text : String # #update : Update #","title":"Context"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/Context/#Tourmaline::Handlers::HearsHandler::Context","text":"","title":"Context"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/Context/#Tourmaline::Handlers::HearsHandler::Context-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/Context/#Tourmaline::Handlers::HearsHandler::Context.new(update,context,message,text,match)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/Context/#Tourmaline::Handlers::HearsHandler::Context-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/Context/#Tourmaline::Handlers::HearsHandler::Context#clone","text":"View source","title":"#clone"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/Context/#Tourmaline::Handlers::HearsHandler::Context#context","text":"","title":"#context"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/Context/#Tourmaline::Handlers::HearsHandler::Context#copy_with(update,context,message,text,match)","text":"View source","title":"#copy_with"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/Context/#Tourmaline::Handlers::HearsHandler::Context#match","text":"","title":"#match"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/Context/#Tourmaline::Handlers::HearsHandler::Context#message","text":"","title":"#message"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/Context/#Tourmaline::Handlers::HearsHandler::Context#text","text":"","title":"#text"},{"location":"api_reference/Tourmaline/Handlers/HearsHandler/Context/#Tourmaline::Handlers::HearsHandler::Context#update","text":"","title":"#update"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/","text":"class Tourmaline::Handlers::InlineQueryHandler inherits Tourmaline::EventHandler # Constants # ANNOTATION = OnInlineQuery # Constructors # .new ( pattern : String | Regex , group = :default , priority = 0 , & block : Context -> ) # View source Methods # #call ( client : Client , update : Update ) # View source #pattern : Regex # View source","title":"InlineQueryHandler"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/#Tourmaline::Handlers::InlineQueryHandler","text":"","title":"InlineQueryHandler"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/#Tourmaline::Handlers::InlineQueryHandler-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/#Tourmaline::Handlers::InlineQueryHandler::ANNOTATION","text":"","title":"ANNOTATION"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/#Tourmaline::Handlers::InlineQueryHandler-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/#Tourmaline::Handlers::InlineQueryHandler.new(pattern,group,priority,&)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/#Tourmaline::Handlers::InlineQueryHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/#Tourmaline::Handlers::InlineQueryHandler#call(client,update)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/#Tourmaline::Handlers::InlineQueryHandler#pattern","text":"View source","title":"#pattern"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/Context/","text":"struct Tourmaline::Handlers::InlineQueryHandler::Context inherits Struct # Constructors # .new ( update : Update , context : Middleware::Context , query : InlineQuery , match : Regex :: MatchData ) # View source Methods # #clone # View source #context : Middleware::Context # #copy_with ( update _update = @update , context _context = @context , query _query = @query , match _match = @match ) # View source #match : Regex :: MatchData # #query : InlineQuery # #update : Update #","title":"Context"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/Context/#Tourmaline::Handlers::InlineQueryHandler::Context","text":"","title":"Context"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/Context/#Tourmaline::Handlers::InlineQueryHandler::Context-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/Context/#Tourmaline::Handlers::InlineQueryHandler::Context.new(update,context,query,match)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/Context/#Tourmaline::Handlers::InlineQueryHandler::Context-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/Context/#Tourmaline::Handlers::InlineQueryHandler::Context#clone","text":"View source","title":"#clone"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/Context/#Tourmaline::Handlers::InlineQueryHandler::Context#context","text":"","title":"#context"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/Context/#Tourmaline::Handlers::InlineQueryHandler::Context#copy_with(update,context,query,match)","text":"View source","title":"#copy_with"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/Context/#Tourmaline::Handlers::InlineQueryHandler::Context#match","text":"","title":"#match"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/Context/#Tourmaline::Handlers::InlineQueryHandler::Context#query","text":"","title":"#query"},{"location":"api_reference/Tourmaline/Handlers/InlineQueryHandler/Context/#Tourmaline::Handlers::InlineQueryHandler::Context#update","text":"","title":"#update"},{"location":"api_reference/Tourmaline/Handlers/UpdateHandler/","text":"class Tourmaline::Handlers::UpdateHandler inherits Tourmaline::EventHandler # Constants # ANNOTATION = On # Constructors # .new ( actions , group = :default , priority = 0 , & block : Context -> ) # View source Methods # #actions : Array ( UpdateAction ) # View source #call ( client : Client , update : Update ) # View source","title":"UpdateHandler"},{"location":"api_reference/Tourmaline/Handlers/UpdateHandler/#Tourmaline::Handlers::UpdateHandler","text":"","title":"UpdateHandler"},{"location":"api_reference/Tourmaline/Handlers/UpdateHandler/#Tourmaline::Handlers::UpdateHandler-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Handlers/UpdateHandler/#Tourmaline::Handlers::UpdateHandler::ANNOTATION","text":"","title":"ANNOTATION"},{"location":"api_reference/Tourmaline/Handlers/UpdateHandler/#Tourmaline::Handlers::UpdateHandler-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Handlers/UpdateHandler/#Tourmaline::Handlers::UpdateHandler.new(actions,group,priority,&)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Handlers/UpdateHandler/#Tourmaline::Handlers::UpdateHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Handlers/UpdateHandler/#Tourmaline::Handlers::UpdateHandler#actions","text":"View source","title":"#actions"},{"location":"api_reference/Tourmaline/Handlers/UpdateHandler/#Tourmaline::Handlers::UpdateHandler#call(client,update)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/Handlers/UpdateHandler/Context/","text":"alias Tourmaline::Handlers::UpdateHandler::Context # Alias definition Tourmaline::Update","title":"Context"},{"location":"api_reference/Tourmaline/Handlers/UpdateHandler/Context/#Tourmaline::Handlers::UpdateHandler::Context","text":"","title":"Context"},{"location":"api_reference/Tourmaline/HashPersistence/","text":"class Tourmaline::HashPersistence inherits Tourmaline::Persistence # Stores all persisted data in memory using a collection of hash tables. Direct known subclasses Tourmaline::JsonPersistence Constructors # .new ( filename = nil ) # View source Methods # #chat_exists? ( chat_id : Int ) : Bool # Returns true if the chat with the provided chat_id exists. View source #chat_exists? ( username : String ) : Bool # Returns true if the chat with the provided username exists. View source #cleanup # Gets called upon exit. It can be used to perform any necessary cleanup. View source #filename : String # View source #get_chat ( chat_id : Int ) : Chat? # Fetches a chat by chat_id . Returns nil if the chat is not found. View source #get_chat ( username : String ) : Chat? # Fetches a chat by username . Returns nil if the chat is not found. View source #get_user ( user_id : Int ) : User? # Fetches a user by user_id . Returns nil if the user is not found. View source #get_user ( username : String ) : User? # Fetches a user by username . Returns nil if the user is not found. View source #handle_update ( update : Update ) # Takes an Update object, pulls out all unique Chat s and User s, and uses update_user and update_chat on each of them respectively. View source #init # Gets called when the bot is initialized. This can be used for setup if you need access to the bot instance. View source #persisted_chat_ids : Hash ( String , Int64 ) # View source #persisted_chats : Hash ( Int64 , Tourmaline::Chat ) # View source #persisted_user_ids : Hash ( String , Int64 ) # View source #persisted_users : Hash ( Int64 , Tourmaline::User ) # View source #update_chat ( chat : Chat ) : Chat # Create or update the provided Chat . View source #update_user ( user : User ) : User # Create or update the provided User . View source #user_exists? ( user_id : Int ) : Bool # Returns true if the user with the provided user_id exists. View source #user_exists? ( username : String ) : Bool # Returns true if the user with the provided username exists. View source","title":"HashPersistence"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence","text":"Stores all persisted data in memory using a collection of hash tables.","title":"HashPersistence"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence.new(filename)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence#chat_exists?(chat_id)","text":"Returns true if the chat with the provided chat_id exists. View source","title":"#chat_exists?"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence#cleanup","text":"Gets called upon exit. It can be used to perform any necessary cleanup. View source","title":"#cleanup"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence#filename","text":"View source","title":"#filename"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence#get_chat(chat_id)","text":"Fetches a chat by chat_id . Returns nil if the chat is not found. View source","title":"#get_chat"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence#get_user(user_id)","text":"Fetches a user by user_id . Returns nil if the user is not found. View source","title":"#get_user"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence#handle_update(update)","text":"Takes an Update object, pulls out all unique Chat s and User s, and uses update_user and update_chat on each of them respectively. View source","title":"#handle_update"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence#init","text":"Gets called when the bot is initialized. This can be used for setup if you need access to the bot instance. View source","title":"#init"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence#persisted_chat_ids","text":"View source","title":"#persisted_chat_ids"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence#persisted_chats","text":"View source","title":"#persisted_chats"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence#persisted_user_ids","text":"View source","title":"#persisted_user_ids"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence#persisted_users","text":"View source","title":"#persisted_users"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence#update_chat(chat)","text":"Create or update the provided Chat . View source","title":"#update_chat"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence#update_user(user)","text":"Create or update the provided User . View source","title":"#update_user"},{"location":"api_reference/Tourmaline/HashPersistence/#Tourmaline::HashPersistence#user_exists?(user_id)","text":"Returns true if the user with the provided user_id exists. View source","title":"#user_exists?"},{"location":"api_reference/Tourmaline/Helpers/","text":"module Tourmaline::Helpers # Extended modules Tourmaline::Helpers Constants # DEFAULT_EXTENSIONS = { audio : \"mp3\" , photo : \"jpg\" , sticker : \"webp\" , video : \"mp4\" , animation : \"mp4\" , video_note : \"mp4\" , voice : \"ogg\" } # HTML_ENTITY_MAP = { \"bold\" => { \"<b>\" , \"</b>\" }, \"italic\" => { \"<i>\" , \"</i>\" }, \"underline\" => { \"<u>\" , \"</u>\" }, \"code\" => { \"<code>\" , \"</code>\" }, \"pre\" => { \"<pre> \\n \" , \" \\n </pre>\" }, \"pre_language\" => { \"<pre><code class= \\\" language-{language} \\\" > \\n \" , \" \\n </code></pre>\" }, \"strikethrough\" => { \"<s>\" , \"</s>\" }, \"text_mention\" => { \"<a href= \\\" tg://user?id={id} \\\" >\" , \"</a>\" }, \"text_link\" => { \"<a href= \\\" {url} \\\" >\" , \"</a>\" }} # MD_ENTITY_MAP = { \"bold\" => { \"*\" , \"*\" }, \"italic\" => { \"_\" , \"_\" }, \"underline\" => { \"\" , \"\" }, \"code\" => { \"`\" , \"`\" }, \"pre\" => { \"``` \\n \" , \" \\n ```\" }, \"pre_language\" => { \"```{language} \\n \" , \" \\n ```\" }, \"strikethrough\" => { \"\" , \"\" }, \"text_mention\" => { \"[\" , \"](tg://user?id={id})\" }, \"text_link\" => { \"[\" , \"]({url})\" }} # MDV2_ENTITY_MAP = { \"bold\" => { \"*\" , \"*\" }, \"italic\" => { \"_\" , \"_\" }, \"underline\" => { \"__\" , \"__\" }, \"code\" => { \"`\" , \"`\" }, \"pre\" => { \"``` \\n \" , \" \\n ```\" }, \"pre_language\" => { \"```{language} \\n \" , \" \\n ```\" }, \"strikethrough\" => { \"~\" , \"~\" }, \"text_mention\" => { \"[\" , \"](tg://user?id={id})\" }, \"text_link\" => { \"[\" , \"]({url})\" }} # Methods # #escape_html ( text ) # View source #escape_md ( text , version = 1 ) # View source #random_string ( length ) # View source #unparse_text ( text : String , entities ents : Array ( MessageEntity ), parse_mode : ParseMode = :markdown ) # View source","title":"Helpers"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers","text":"","title":"Helpers"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers::DEFAULT_EXTENSIONS","text":"","title":"DEFAULT_EXTENSIONS"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers::HTML_ENTITY_MAP","text":"","title":"HTML_ENTITY_MAP"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers::MD_ENTITY_MAP","text":"","title":"MD_ENTITY_MAP"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers::MDV2_ENTITY_MAP","text":"","title":"MDV2_ENTITY_MAP"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#escape_html(text)","text":"View source","title":"#escape_html"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#escape_md(text,version)","text":"View source","title":"#escape_md"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#random_string(length)","text":"View source","title":"#random_string"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#unparse_text(text,entities,parse_mode)","text":"View source","title":"#unparse_text"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/","text":"class Tourmaline::InlineKeyboardButton inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( text : String , url : String? = nil , login_url : LoginURL? = nil , callback_data : String? = nil , switch_inline_query : String? = nil , switch_inline_query_current_chat : String? = nil , callback_game : CallbackGame? = nil , pay : Bool? = nil ) # View source Methods # #callback_data : String? # View source #callback_data= ( callback_data : String? ) # View source #callback_game : CallbackGame? # View source #callback_game= ( callback_game : CallbackGame? ) # View source #login_url : LoginURL? # View source #login_url= ( login_url : LoginURL? ) # View source #pay : Bool? # View source #pay= ( pay : Bool? ) # View source #switch_inline_query : String? # View source #switch_inline_query= ( switch_inline_query : String? ) # View source #switch_inline_query_current_chat : String? # View source #switch_inline_query_current_chat= ( switch_inline_query_current_chat : String? ) # View source #text : String # View source #text= ( text : String ) # View source #url : String? # View source #url= ( url : String? ) # View source","title":"InlineKeyboardButton"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton","text":"","title":"InlineKeyboardButton"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#callback_data","text":"View source","title":"#callback_data"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#callback_data=(callback_data)","text":"View source","title":"#callback_data="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#callback_game","text":"View source","title":"#callback_game"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#callback_game=(callback_game)","text":"View source","title":"#callback_game="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#login_url","text":"View source","title":"#login_url"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#login_url=(login_url)","text":"View source","title":"#login_url="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#pay","text":"View source","title":"#pay"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#pay=(pay)","text":"View source","title":"#pay="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#switch_inline_query","text":"View source","title":"#switch_inline_query"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#switch_inline_query=(switch_inline_query)","text":"View source","title":"#switch_inline_query="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#switch_inline_query_current_chat","text":"View source","title":"#switch_inline_query_current_chat"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#switch_inline_query_current_chat=(switch_inline_query_current_chat)","text":"View source","title":"#switch_inline_query_current_chat="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#text","text":"View source","title":"#text"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#text=(text)","text":"View source","title":"#text="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#url","text":"View source","title":"#url"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#url=(url)","text":"View source","title":"#url="},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/","text":"class Tourmaline::InlineKeyboardMarkup inherits Reference # Included modules JSON::Serializable Tourmaline::Model Direct known subclasses Tourmaline::PaginatedKeyboard Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( inline_keyboard = [] of Array ( InlineKeyboardButton )) # View source .new ( * lines : Array ( InlineKeyboardButton )) # View source Class methods # .build ( * args , columns = nil # View source Methods # #<< ( row , btn : InlineKeyboardButton ) # View source #<< ( btns : Array ( InlineKeyboardButton )) # View source #inline_keyboard : Array ( Array ( InlineKeyboardButton )) # View source #inline_keyboard= ( inline_keyboard : Array ( Array ( InlineKeyboardButton ))) # View source","title":"InlineKeyboardMarkup"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup","text":"","title":"InlineKeyboardMarkup"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup.build(*,columns,**,&)","text":"View source","title":".build"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup#<<(row,btn)","text":"View source","title":"#&lt;&lt;"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup#inline_keyboard","text":"View source","title":"#inline_keyboard"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup#inline_keyboard=(inline_keyboard)","text":"View source","title":"#inline_keyboard="},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/","text":"class Tourmaline::InlineKeyboardMarkup::Builder inherits Tourmaline::KeyboardBuilder # Direct known subclasses Tourmaline::RoutedMenu::Page::KeyboardBuilder Constructors # .new ( force_reply = false , remove_keyboard = false , selective = false , keyboard = [] of T , resize = false , one_time = false ) # View source Methods # #callback_button ( text , data ) # View source #game_button ( text ) # View source #keyboard ( columns = nil ) : G # View source #login_button ( text , url , * args , ** opts ) # View source #pay_button ( text ) # View source #switch_to_chat_button ( text , value ) # View source #switch_to_current_chat_button ( text , value ) # View source #url_button ( text , url ) # View source","title":"Builder"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder","text":"","title":"Builder"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder.new(force_reply,remove_keyboard,selective,keyboard,resize,one_time)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder#callback_button(text,data)","text":"View source","title":"#callback_button"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder#game_button(text)","text":"View source","title":"#game_button"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder#keyboard(columns)","text":"View source","title":"#keyboard"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder#login_button(text,url,*,**)","text":"View source","title":"#login_button"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder#pay_button(text)","text":"View source","title":"#pay_button"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder#switch_to_chat_button(text,value)","text":"View source","title":"#switch_to_chat_button"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder#switch_to_current_chat_button(text,value)","text":"View source","title":"#switch_to_current_chat_button"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder#url_button(text,url)","text":"View source","title":"#url_button"},{"location":"api_reference/Tourmaline/InlineQuery/","text":"class Tourmaline::InlineQuery inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #answer ( results , ** kwargs ) # View source #chat_type : String? # View source #from : User # View source #id : String # View source #location : Location? # View source #offset : String # View source #query : String # View source","title":"InlineQuery"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery","text":"","title":"InlineQuery"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#answer(results,**)","text":"View source","title":"#answer"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#chat_type","text":"View source","title":"#chat_type"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#from","text":"View source","title":"#from"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#location","text":"View source","title":"#location"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#offset","text":"View source","title":"#offset"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#query","text":"View source","title":"#query"},{"location":"api_reference/Tourmaline/InlineQueryResult/","text":"abstract class Tourmaline::InlineQueryResult inherits Reference # Included modules JSON::Serializable Tourmaline::Model Direct known subclasses Tourmaline::InlineQueryResultArticle Tourmaline::InlineQueryResultAudio Tourmaline::InlineQueryResultCachedAudio Tourmaline::InlineQueryResultCachedDocument Tourmaline::InlineQueryResultCachedGif Tourmaline::InlineQueryResultCachedMpeg4Gif Tourmaline::InlineQueryResultCachedPhoto Tourmaline::InlineQueryResultCachedSticker Tourmaline::InlineQueryResultCachedVideo Tourmaline::InlineQueryResultCachedVoice Tourmaline::InlineQueryResultContact Tourmaline::InlineQueryResultDocument Tourmaline::InlineQueryResultGame Tourmaline::InlineQueryResultGif Tourmaline::InlineQueryResultLocation Tourmaline::InlineQueryResultMpeg4Gif Tourmaline::InlineQueryResultPhoto Tourmaline::InlineQueryResultVenue Tourmaline::InlineQueryResultVideo Tourmaline::InlineQueryResultVoice Constructors # .new ( pull : JSON :: PullParser ) # View source Class methods # .build # View source","title":"InlineQueryResult"},{"location":"api_reference/Tourmaline/InlineQueryResult/#Tourmaline::InlineQueryResult","text":"","title":"InlineQueryResult"},{"location":"api_reference/Tourmaline/InlineQueryResult/#Tourmaline::InlineQueryResult-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResult/#Tourmaline::InlineQueryResult.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResult/#Tourmaline::InlineQueryResult-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/InlineQueryResult/#Tourmaline::InlineQueryResult.build(&)","text":"View source","title":".build"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/","text":"class Tourmaline::InlineQueryResult::Builder inherits Reference # Constructors # .new # View source Methods # #article ( * args , ** opts ) # View source #audio ( * args , ** opts ) # View source #cached_audio ( * args , ** opts ) # View source #cached_document ( * args , ** opts ) # View source #cached_gif ( * args , ** opts ) # View source #cached_mpeg4_gif ( * args , ** opts ) # View source #cached_photo ( * args , ** opts ) # View source #cached_sticker ( * args , ** opts ) # View source #cached_video ( * args , ** opts ) # View source #cached_voice ( * args , ** opts ) # View source #contact ( * args , ** opts ) # View source #document ( * args , ** opts ) # View source #game ( * args , ** opts ) # View source #gif ( * args , ** opts ) # View source #location ( * args , ** opts ) # View source #mpeg4_gif ( * args , ** opts ) # View source #photo ( * args , ** opts ) # View source #results : Array ( Tourmaline::InlineQueryResult ) # View source #venue ( * args , ** opts ) # View source #video ( * args , ** opts ) # View source","title":"Builder"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder","text":"","title":"Builder"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder.new","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#article(*,**)","text":"View source","title":"#article"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#audio(*,**)","text":"View source","title":"#audio"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#cached_audio(*,**)","text":"View source","title":"#cached_audio"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#cached_document(*,**)","text":"View source","title":"#cached_document"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#cached_gif(*,**)","text":"View source","title":"#cached_gif"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#cached_mpeg4_gif(*,**)","text":"View source","title":"#cached_mpeg4_gif"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#cached_photo(*,**)","text":"View source","title":"#cached_photo"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#cached_sticker(*,**)","text":"View source","title":"#cached_sticker"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#cached_video(*,**)","text":"View source","title":"#cached_video"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#cached_voice(*,**)","text":"View source","title":"#cached_voice"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#contact(*,**)","text":"View source","title":"#contact"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#document(*,**)","text":"View source","title":"#document"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#game(*,**)","text":"View source","title":"#game"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#gif(*,**)","text":"View source","title":"#gif"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#location(*,**)","text":"View source","title":"#location"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#mpeg4_gif(*,**)","text":"View source","title":"#mpeg4_gif"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#photo(*,**)","text":"View source","title":"#photo"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#results","text":"View source","title":"#results"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#venue(*,**)","text":"View source","title":"#venue"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#video(*,**)","text":"View source","title":"#video"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/","text":"class Tourmaline::InlineQueryResultArticle inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , title , input_message_content , reply_markup = nil , url = nil , hide_url = nil , description = nil , thumb_url = nil , thumb_width = nil , thumb_height = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #description : String? # View source #hide_url : Bool? # View source #id : String # View source #input_message_content : InputMessageContent # View source #reply_markup : InlineKeyboardMarkup? # View source #thumb_height : Int32? # View source #thumb_url : String? # View source #thumb_width : Int32? # View source #title : String # View source #type : String # View source #url : String? # View source","title":"InlineQueryResultArticle"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle","text":"","title":"InlineQueryResultArticle"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle.new(id,title,input_message_content,reply_markup,url,hide_url,description,thumb_url,thumb_width,thumb_height)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#hide_url","text":"View source","title":"#hide_url"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#thumb_height","text":"View source","title":"#thumb_height"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#thumb_url","text":"View source","title":"#thumb_url"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#thumb_width","text":"View source","title":"#thumb_width"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#url","text":"View source","title":"#url"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/","text":"class Tourmaline::InlineQueryResultAudio inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , audio_url , title , performer = nil , audio_duration = nil , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #audio_duration : Int32? # View source #audio_url : String # View source #id : String # View source #input_message_content : InputMessageContent? # View source #performer : String? # View source #reply_markup : InlineKeyboardMarkup? # View source #title : String # View source #type : String # View source","title":"InlineQueryResultAudio"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio","text":"","title":"InlineQueryResultAudio"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio.new(id,audio_url,title,performer,audio_duration,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#audio_duration","text":"View source","title":"#audio_duration"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#audio_url","text":"View source","title":"#audio_url"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#performer","text":"View source","title":"#performer"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/","text":"class Tourmaline::InlineQueryResultCachedAudio inherits Tourmaline::InlineQueryResult # Constructors # .new ( id : String , audio_file_id , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #audio_file_id : String # View source #id : String # View source #input_message_content : InputMessageContent? # View source #reply_markup : InlineKeyboardMarkup? # View source #type : String # View source","title":"InlineQueryResultCachedAudio"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio","text":"","title":"InlineQueryResultCachedAudio"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio.new(id,audio_file_id,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#audio_file_id","text":"View source","title":"#audio_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/","text":"class Tourmaline::InlineQueryResultCachedDocument inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , title , document_file_id , description = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #description : String? # View source #description= ( description : String? ) # View source #document_file_id : String # View source #document_file_id= ( document_file_id : String ) # View source #id : String # View source #id= ( id : String ) # View source #input_message_content : InputMessageContent? # View source #input_message_content= ( input_message_content : InputMessageContent? ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #reply_markup= ( reply_markup : InlineKeyboardMarkup? ) # View source #title : String # View source #title= ( title : String ) # View source #type : String # View source #type= ( type : String ) # View source","title":"InlineQueryResultCachedDocument"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument","text":"","title":"InlineQueryResultCachedDocument"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument.new(id,title,document_file_id,description,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#description=(description)","text":"View source","title":"#description="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#document_file_id","text":"View source","title":"#document_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#document_file_id=(document_file_id)","text":"View source","title":"#document_file_id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#id=(id)","text":"View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#input_message_content=(input_message_content)","text":"View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#reply_markup=(reply_markup)","text":"View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#title=(title)","text":"View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#type=(type)","text":"View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/","text":"class Tourmaline::InlineQueryResultCachedGif inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , gif_file_id , title = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #gif_file_id : String # View source #id : String # View source #input_message_content : InputMessageContent? # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #title : String? # View source #type : String # View source","title":"InlineQueryResultCachedGif"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif","text":"","title":"InlineQueryResultCachedGif"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif.new(id,gif_file_id,title,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#gif_file_id","text":"View source","title":"#gif_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/","text":"class Tourmaline::InlineQueryResultCachedMpeg4Gif inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , mpeg4_file_id , title = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #id : String # View source #input_message_content : InputMessageContent? # View source #mpeg4_file_id : String # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #title : String? # View source #type : String # View source","title":"InlineQueryResultCachedMpeg4Gif"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif","text":"","title":"InlineQueryResultCachedMpeg4Gif"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif.new(id,mpeg4_file_id,title,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#mpeg4_file_id","text":"View source","title":"#mpeg4_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/","text":"class Tourmaline::InlineQueryResultCachedPhoto inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , photo_file_id , title = nil , description = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #description : String? # View source #id : String # View source #input_message_content : InputMessageContent? # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #photo_file_id : String # View source #reply_markup : InlineKeyboardMarkup? # View source #title : String? # View source #type : String # View source","title":"InlineQueryResultCachedPhoto"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto","text":"","title":"InlineQueryResultCachedPhoto"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto.new(id,photo_file_id,title,description,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#photo_file_id","text":"View source","title":"#photo_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/","text":"class Tourmaline::InlineQueryResultCachedSticker inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , sticker_file_id , reply_markup , input_message_content ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #id : String # View source #input_message_content : InputMessageContent # View source #reply_markup : InlineKeyboardMarkup # View source #sticker_file_id : String # View source #type : String # View source","title":"InlineQueryResultCachedSticker"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker","text":"","title":"InlineQueryResultCachedSticker"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker.new(id,sticker_file_id,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#sticker_file_id","text":"View source","title":"#sticker_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/","text":"class Tourmaline::InlineQueryResultCachedVideo inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , video_file_id , title , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , description = nil , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #description : String? # View source #id : String # View source #input_message_content : InputMessageContent? # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #title : String # View source #type : String # View source #video_file_id : String # View source","title":"InlineQueryResultCachedVideo"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo","text":"","title":"InlineQueryResultCachedVideo"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo.new(id,video_file_id,title,caption,parse_mode,caption_entities,description,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#video_file_id","text":"View source","title":"#video_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/","text":"class Tourmaline::InlineQueryResultCachedVoice inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , voice_file_id , title , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #id : String # View source #input_message_content : InputMessageContent? # View source #reply_markup : InlineKeyboardMarkup? # View source #title : String # View source #type : String # View source #voice_file_id : String # View source","title":"InlineQueryResultCachedVoice"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice","text":"","title":"InlineQueryResultCachedVoice"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice.new(id,voice_file_id,title,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#voice_file_id","text":"View source","title":"#voice_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/","text":"class Tourmaline::InlineQueryResultContact inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , phone_number , first_name , last_name = nil , user_id = nil , reply_markup = nil , input_message_content = nil , thumb_url = nil , thumb_width = nil , thumb_height = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #first_name : String # View source #id : String # View source #input_message_content : InputMessageContent? # View source #last_name : String? # View source #phone_number : String # View source #reply_markup : InlineKeyboardMarkup? # View source #thumb_height : Int32? # View source #thumb_url : String? # View source #thumb_width : Int32? # View source #type : String # View source #user_id : Int32? # View source","title":"InlineQueryResultContact"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact","text":"","title":"InlineQueryResultContact"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact.new(id,phone_number,first_name,last_name,user_id,reply_markup,input_message_content,thumb_url,thumb_width,thumb_height)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#first_name","text":"View source","title":"#first_name"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#last_name","text":"View source","title":"#last_name"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#phone_number","text":"View source","title":"#phone_number"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#thumb_height","text":"View source","title":"#thumb_height"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#thumb_url","text":"View source","title":"#thumb_url"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#thumb_width","text":"View source","title":"#thumb_width"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#user_id","text":"View source","title":"#user_id"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/","text":"class Tourmaline::InlineQueryResultDocument inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , title , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , document_url = nil , mime_type = nil , description = nil , reply_markup = nil , input_message_content = nil , thumb_url = nil , thumb_width = nil , thumb_height = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #description : String? # View source #document_url : String # View source #id : String # View source #input_message_content : InputMessageContent? # View source #mime_type : String # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #thumb_height : Int32? # View source #thumb_url : String # View source #thumb_width : Int32? # View source #title : String # View source #type : String # View source","title":"InlineQueryResultDocument"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument","text":"","title":"InlineQueryResultDocument"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument.new(id,title,caption,parse_mode,caption_entities,document_url,mime_type,description,reply_markup,input_message_content,thumb_url,thumb_width,thumb_height)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#document_url","text":"View source","title":"#document_url"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#mime_type","text":"View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#thumb_height","text":"View source","title":"#thumb_height"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#thumb_url","text":"View source","title":"#thumb_url"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#thumb_width","text":"View source","title":"#thumb_width"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/","text":"class Tourmaline::InlineQueryResultGame inherits Tourmaline::InlineQueryResult # Constructors # .new ( id : String , game_short_name , reply_markup = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #game_short_name : String # View source #id : String # View source #reply_markup : InlineKeyboardMarkup? # View source #type : String # View source","title":"InlineQueryResultGame"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame","text":"","title":"InlineQueryResultGame"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame.new(id,game_short_name,reply_markup)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame#game_short_name","text":"View source","title":"#game_short_name"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/","text":"class Tourmaline::InlineQueryResultGif inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , gif_url , gif_width = nil , gif_height = nil , gif_duration = nil , thumb_url = nil , title = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #gif_duration : Int32? # View source #gif_duration= ( gif_duration : Int32? ) # View source #gif_height : Int32? # View source #gif_height= ( gif_height : Int32? ) # View source #gif_url : String # View source #gif_url= ( gif_url : String ) # View source #gif_width : Int32? # View source #gif_width= ( gif_width : Int32? ) # View source #id : String # View source #id= ( id : String ) # View source #input_message_content : InputMessageContent? # View source #input_message_content= ( input_message_content : InputMessageContent? ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #reply_markup= ( reply_markup : InlineKeyboardMarkup? ) # View source #thumb_mime_type : String? # View source #thumb_mime_type= ( thumb_mime_type : String? ) # View source #thumb_url : String # View source #thumb_url= ( thumb_url : String ) # View source #title : String? # View source #title= ( title : String? ) # View source #type : String # View source #type= ( type : String ) # View source","title":"InlineQueryResultGif"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif","text":"","title":"InlineQueryResultGif"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif.new(id,gif_url,gif_width,gif_height,gif_duration,thumb_url,title,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_duration","text":"View source","title":"#gif_duration"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_duration=(gif_duration)","text":"View source","title":"#gif_duration="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_height","text":"View source","title":"#gif_height"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_height=(gif_height)","text":"View source","title":"#gif_height="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_url","text":"View source","title":"#gif_url"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_url=(gif_url)","text":"View source","title":"#gif_url="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_width","text":"View source","title":"#gif_width"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_width=(gif_width)","text":"View source","title":"#gif_width="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#id=(id)","text":"View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#input_message_content=(input_message_content)","text":"View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#reply_markup=(reply_markup)","text":"View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#thumb_mime_type","text":"View source","title":"#thumb_mime_type"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#thumb_mime_type=(thumb_mime_type)","text":"View source","title":"#thumb_mime_type="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#thumb_url","text":"View source","title":"#thumb_url"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#thumb_url=(thumb_url)","text":"View source","title":"#thumb_url="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#title=(title)","text":"View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#type=(type)","text":"View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/","text":"class Tourmaline::InlineQueryResultLocation inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , latitude , longitude , title , live_period = nil , reply_markup = nil , input_message_content = nil , thumb_url = nil , thumb_width = nil , thumb_height = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #heading : Int32? # View source #horizontal_accuracy : Int32? # View source #id : String # View source #input_message_content : InputMessageContent? # View source #latitude : Float64 # View source #live_period : Int32? # View source #longitude : Float64 # View source #proximity_alert_radius : Int32? # View source #reply_markup : InlineKeyboardMarkup? # View source #thumb_height : Int32? # View source #thumb_url : String? # View source #thumb_width : Int32? # View source #title : String # View source #type : String # View source","title":"InlineQueryResultLocation"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation","text":"","title":"InlineQueryResultLocation"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation.new(id,latitude,longitude,title,live_period,reply_markup,input_message_content,thumb_url,thumb_width,thumb_height)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#heading","text":"View source","title":"#heading"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#horizontal_accuracy","text":"View source","title":"#horizontal_accuracy"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#latitude","text":"View source","title":"#latitude"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#live_period","text":"View source","title":"#live_period"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#longitude","text":"View source","title":"#longitude"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#proximity_alert_radius","text":"View source","title":"#proximity_alert_radius"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#thumb_height","text":"View source","title":"#thumb_height"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#thumb_url","text":"View source","title":"#thumb_url"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#thumb_width","text":"View source","title":"#thumb_width"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/","text":"class Tourmaline::InlineQueryResultMpeg4Gif inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , mpeg4_url , mpeg4_width = nil , mpeg4_height = nil , mpeg4_duration = nil , thumb_url = nil , title = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #id : String # View source #input_message_content : InputMessageContent? # View source #mpeg4_duration : Int32? # View source #mpeg4_height : Int32? # View source #mpeg4_url : String # View source #mpeg4_width : Int32? # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #thumb_mime_type : String? # View source #thumb_url : String? # View source #title : String? # View source #type : String # View source","title":"InlineQueryResultMpeg4Gif"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif","text":"","title":"InlineQueryResultMpeg4Gif"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif.new(id,mpeg4_url,mpeg4_width,mpeg4_height,mpeg4_duration,thumb_url,title,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#mpeg4_duration","text":"View source","title":"#mpeg4_duration"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#mpeg4_height","text":"View source","title":"#mpeg4_height"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#mpeg4_url","text":"View source","title":"#mpeg4_url"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#mpeg4_width","text":"View source","title":"#mpeg4_width"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#thumb_mime_type","text":"View source","title":"#thumb_mime_type"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#thumb_url","text":"View source","title":"#thumb_url"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/","text":"class Tourmaline::InlineQueryResultPhoto inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , photo_url , thumb_url , photo_width = nil , photo_height = nil , title = nil , description = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #description : String? # View source #description= ( description : String? ) # View source #id : String # View source #id= ( id : String ) # View source #input_message_content : InputMessageContent? # View source #input_message_content= ( input_message_content : InputMessageContent? ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #photo_height : Int32? # View source #photo_height= ( photo_height : Int32? ) # View source #photo_url : String # View source #photo_url= ( photo_url : String ) # View source #photo_width : Int32? # View source #photo_width= ( photo_width : Int32? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #reply_markup= ( reply_markup : InlineKeyboardMarkup? ) # View source #thumb_url : String # View source #thumb_url= ( thumb_url : String ) # View source #title : String? # View source #title= ( title : String? ) # View source #type : String # View source #type= ( type : String ) # View source","title":"InlineQueryResultPhoto"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto","text":"","title":"InlineQueryResultPhoto"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto.new(id,photo_url,thumb_url,photo_width,photo_height,title,description,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#description=(description)","text":"View source","title":"#description="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#id=(id)","text":"View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#input_message_content=(input_message_content)","text":"View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_height","text":"View source","title":"#photo_height"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_height=(photo_height)","text":"View source","title":"#photo_height="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_url","text":"View source","title":"#photo_url"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_url=(photo_url)","text":"View source","title":"#photo_url="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_width","text":"View source","title":"#photo_width"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_width=(photo_width)","text":"View source","title":"#photo_width="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#reply_markup=(reply_markup)","text":"View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#thumb_url","text":"View source","title":"#thumb_url"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#thumb_url=(thumb_url)","text":"View source","title":"#thumb_url="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#title=(title)","text":"View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#type=(type)","text":"View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/","text":"class Tourmaline::InlineQueryResultVenue inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , latitude , longitude , title , address , foursquare_id = nil , foursquare_type = nil , reply_markup = nil , google_place_id = nil , google_place_type = nil , input_message_content = nil , thumb_url = nil , thumb_width = nil , thumb_height = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #address : String # View source #foursquare_id : String? # View source #foursquare_type : String? # View source #google_place_id : String? # View source #google_place_type : String? # View source #id : String # View source #input_message_content : InputMessageContent? # View source #latitude : Float64 # View source #longitude : Float64 # View source #reply_markup : InlineKeyboardMarkup? # View source #thumb_height : Int32? # View source #thumb_url : String? # View source #thumb_width : Int32? # View source #title : String # View source #type : String # View source","title":"InlineQueryResultVenue"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue","text":"","title":"InlineQueryResultVenue"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue.new(id,latitude,longitude,title,address,foursquare_id,foursquare_type,reply_markup,google_place_id,google_place_type,input_message_content,thumb_url,thumb_width,thumb_height)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#address","text":"View source","title":"#address"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#foursquare_id","text":"View source","title":"#foursquare_id"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#foursquare_type","text":"View source","title":"#foursquare_type"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#google_place_id","text":"View source","title":"#google_place_id"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#google_place_type","text":"View source","title":"#google_place_type"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#latitude","text":"View source","title":"#latitude"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#longitude","text":"View source","title":"#longitude"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#thumb_height","text":"View source","title":"#thumb_height"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#thumb_url","text":"View source","title":"#thumb_url"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#thumb_width","text":"View source","title":"#thumb_width"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/","text":"class Tourmaline::InlineQueryResultVideo inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , video_url , mime_type , thumb_url , title , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , video_width = nil , video_height = nil , video_duration = nil , description = nil , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #description : String? # View source #description= ( description : String? ) # View source #id : String # View source #id= ( id : String ) # View source #input_message_content : InputMessageContent? # View source #input_message_content= ( input_message_content : InputMessageContent? ) # View source #mime_type : String # View source #mime_type= ( mime_type : String ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #reply_markup= ( reply_markup : InlineKeyboardMarkup? ) # View source #thumb_url : String # View source #thumb_url= ( thumb_url : String ) # View source #title : String # View source #title= ( title : String ) # View source #type : String # View source #type= ( type : String ) # View source #video_duration : Int32? # View source #video_duration= ( video_duration : Int32? ) # View source #video_height : Int32? # View source #video_height= ( video_height : Int32? ) # View source #video_url : String # View source #video_url= ( video_url : String ) # View source #video_width : Int32? # View source #video_width= ( video_width : Int32? ) # View source","title":"InlineQueryResultVideo"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo","text":"","title":"InlineQueryResultVideo"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo.new(id,video_url,mime_type,thumb_url,title,caption,parse_mode,caption_entities,video_width,video_height,video_duration,description,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#description=(description)","text":"View source","title":"#description="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#id=(id)","text":"View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#input_message_content=(input_message_content)","text":"View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#mime_type","text":"View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#mime_type=(mime_type)","text":"View source","title":"#mime_type="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#reply_markup=(reply_markup)","text":"View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#thumb_url","text":"View source","title":"#thumb_url"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#thumb_url=(thumb_url)","text":"View source","title":"#thumb_url="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#title=(title)","text":"View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#type=(type)","text":"View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_duration","text":"View source","title":"#video_duration"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_duration=(video_duration)","text":"View source","title":"#video_duration="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_height","text":"View source","title":"#video_height"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_height=(video_height)","text":"View source","title":"#video_height="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_url","text":"View source","title":"#video_url"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_url=(video_url)","text":"View source","title":"#video_url="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_width","text":"View source","title":"#video_width"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_width=(video_width)","text":"View source","title":"#video_width="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/","text":"class Tourmaline::InlineQueryResultVoice inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , voice_url , title , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , voice_duration = nil , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #id : String # View source #id= ( id : String ) # View source #input_message_content : InputMessageContent? # View source #input_message_content= ( input_message_content : InputMessageContent? ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #reply_markup= ( reply_markup : InlineKeyboardMarkup? ) # View source #title : String # View source #title= ( title : String ) # View source #type : String # View source #type= ( type : String ) # View source #voice_duration : Int32? # View source #voice_duration= ( voice_duration : Int32? ) # View source #voice_url : String # View source #voice_url= ( voice_url : String ) # View source","title":"InlineQueryResultVoice"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice","text":"","title":"InlineQueryResultVoice"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice.new(id,voice_url,title,caption,parse_mode,caption_entities,voice_duration,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#id=(id)","text":"View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#input_message_content=(input_message_content)","text":"View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#reply_markup=(reply_markup)","text":"View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#title=(title)","text":"View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#type=(type)","text":"View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#voice_duration","text":"View source","title":"#voice_duration"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#voice_duration=(voice_duration)","text":"View source","title":"#voice_duration="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#voice_url","text":"View source","title":"#voice_url"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#voice_url=(voice_url)","text":"View source","title":"#voice_url="},{"location":"api_reference/Tourmaline/InputContactMessageContent/","text":"class Tourmaline::InputContactMessageContent inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( phone_number : String , first_name : String , last_name : String? = nil , vcard : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #first_name : String # View source #last_name : String? # View source #phone_number : String # View source #vcard : String? # View source","title":"InputContactMessageContent"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent","text":"","title":"InputContactMessageContent"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent.new(phone_number,first_name,last_name,vcard)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent#first_name","text":"View source","title":"#first_name"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent#last_name","text":"View source","title":"#last_name"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent#phone_number","text":"View source","title":"#phone_number"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent#vcard","text":"View source","title":"#vcard"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/","text":"class Tourmaline::InputInvoiceMessageContent inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( title : String , description : String , payload : String , provider_token : String , currency : String , prices = [] of Tourmaline :: LabeledPrice , max_tip_amount : Int32? = nil , suggested_tip_amounts : Array ( Int32 ) = [] of Int32 , provider_data : String? = nil , photo_url : String? = nil , photo_size : Int32? = nil , photo_width : Int32? = nil , photo_height : Int32? = nil , need_name : Bool = false , need_phone_number : Bool = false , need_email : Bool = false , need_shipping_address : Bool = false , send_phone_number_to_provider : Bool = false , send_email_to_provider : Bool = false ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #currency : String # View source #description : String # View source #flexible? : Bool # View source #max_tip_amount : Int32? # View source #need_email? : Bool # View source #need_name? : Bool # View source #need_phone_number? : Bool # View source #need_shipping_address? : Bool # View source #payload : String # View source #photo_height : Int32? # View source #photo_size : Int32? # View source #photo_url : String? # View source #photo_width : Int32? # View source #prices : Array ( Tourmaline::LabeledPrice ) # View source #provider_data : String? # View source #provider_token : String # View source #send_email_to_provider? : Bool # View source #send_phone_number_to_provider? : Bool # View source #suggested_tip_amounts : Array ( Int32 ) # View source #title : String # View source","title":"InputInvoiceMessageContent"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent","text":"","title":"InputInvoiceMessageContent"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent.new(title,description,payload,provider_token,currency,prices,max_tip_amount,suggested_tip_amounts,provider_data,photo_url,photo_size,photo_width,photo_height,need_name,need_phone_number,need_email,need_shipping_address,send_phone_number_to_provider,send_email_to_provider)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#currency","text":"View source","title":"#currency"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#flexible?","text":"View source","title":"#flexible?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#max_tip_amount","text":"View source","title":"#max_tip_amount"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#need_email?","text":"View source","title":"#need_email?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#need_name?","text":"View source","title":"#need_name?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#need_phone_number?","text":"View source","title":"#need_phone_number?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#need_shipping_address?","text":"View source","title":"#need_shipping_address?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#payload","text":"View source","title":"#payload"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#photo_height","text":"View source","title":"#photo_height"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#photo_size","text":"View source","title":"#photo_size"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#photo_url","text":"View source","title":"#photo_url"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#photo_width","text":"View source","title":"#photo_width"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#prices","text":"View source","title":"#prices"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#provider_data","text":"View source","title":"#provider_data"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#provider_token","text":"View source","title":"#provider_token"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#send_email_to_provider?","text":"View source","title":"#send_email_to_provider?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#send_phone_number_to_provider?","text":"View source","title":"#send_phone_number_to_provider?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#suggested_tip_amounts","text":"View source","title":"#suggested_tip_amounts"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/","text":"class Tourmaline::InputLocationMessageContent inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( latitude , longitude , horizontal_accuracy = nil , live_period = nil , heading = nil , proximity_alert_radius = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #heading : Int32? # View source #horizontal_accuracy : Int32? # View source #latitude : String # View source #live_period : Int32? # View source #longitude : String # View source #proximity_alert_radius : Int32? # View source","title":"InputLocationMessageContent"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent","text":"","title":"InputLocationMessageContent"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent.new(latitude,longitude,horizontal_accuracy,live_period,heading,proximity_alert_radius)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#heading","text":"View source","title":"#heading"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#horizontal_accuracy","text":"View source","title":"#horizontal_accuracy"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#latitude","text":"View source","title":"#latitude"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#live_period","text":"View source","title":"#live_period"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#longitude","text":"View source","title":"#longitude"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#proximity_alert_radius","text":"View source","title":"#proximity_alert_radius"},{"location":"api_reference/Tourmaline/InputMedia/","text":"alias Tourmaline::InputMedia # Alias definition Tourmaline::InputMediaAnimation | Tourmaline::InputMediaAudio | Tourmaline::InputMediaDocument | Tourmaline::InputMediaPhoto | Tourmaline::InputMediaVideo","title":"InputMedia"},{"location":"api_reference/Tourmaline/InputMedia/#Tourmaline::InputMedia","text":"","title":"InputMedia"},{"location":"api_reference/Tourmaline/InputMediaAnimation/","text":"class Tourmaline::InputMediaAnimation inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( media , thumb = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , width = nil , height = nil , duration = nil ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #duration : Int32? # View source #duration= ( duration : Int32? ) # View source #height : Int32? # View source #height= ( height : Int32? ) # View source #media : String | File # View source #media= ( media : String | File ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #thumb : String | File | Nil # View source #thumb= ( thumb : String | File | Nil ) # View source #width : Int32? # View source #width= ( width : Int32? ) # View source","title":"InputMediaAnimation"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation","text":"","title":"InputMediaAnimation"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#duration","text":"View source","title":"#duration"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#duration=(duration)","text":"View source","title":"#duration="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#height","text":"View source","title":"#height"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#height=(height)","text":"View source","title":"#height="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#media","text":"View source","title":"#media"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#media=(media)","text":"View source","title":"#media="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#thumb","text":"View source","title":"#thumb"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#thumb=(thumb)","text":"View source","title":"#thumb="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#width","text":"View source","title":"#width"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#width=(width)","text":"View source","title":"#width="},{"location":"api_reference/Tourmaline/InputMediaAudio/","text":"class Tourmaline::InputMediaAudio inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( media , thumb = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , duration = nil , performer = nil , title = nil ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #duration : Int32? # View source #duration= ( duration : Int32? ) # View source #media : String | File # View source #media= ( media : String | File ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #performer : String? # View source #performer= ( performer : String? ) # View source #thumb : String | File | Nil # View source #thumb= ( thumb : String | File | Nil ) # View source #title : String? # View source #title= ( title : String? ) # View source","title":"InputMediaAudio"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio","text":"","title":"InputMediaAudio"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#duration","text":"View source","title":"#duration"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#duration=(duration)","text":"View source","title":"#duration="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#media","text":"View source","title":"#media"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#media=(media)","text":"View source","title":"#media="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#performer","text":"View source","title":"#performer"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#performer=(performer)","text":"View source","title":"#performer="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#thumb","text":"View source","title":"#thumb"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#thumb=(thumb)","text":"View source","title":"#thumb="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#title=(title)","text":"View source","title":"#title="},{"location":"api_reference/Tourmaline/InputMediaDocument/","text":"class Tourmaline::InputMediaDocument inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( media , thumb = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #media : String | File # View source #media= ( media : String | File ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #thumb : String | File | Nil # View source #thumb= ( thumb : String | File | Nil ) # View source","title":"InputMediaDocument"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument","text":"","title":"InputMediaDocument"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#media","text":"View source","title":"#media"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#media=(media)","text":"View source","title":"#media="},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#thumb","text":"View source","title":"#thumb"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#thumb=(thumb)","text":"View source","title":"#thumb="},{"location":"api_reference/Tourmaline/InputMediaPhoto/","text":"class Tourmaline::InputMediaPhoto inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( media , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #media : String | File # View source #media= ( media : String | File ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source","title":"InputMediaPhoto"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto","text":"","title":"InputMediaPhoto"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#media","text":"View source","title":"#media"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#media=(media)","text":"View source","title":"#media="},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputMediaVideo/","text":"class Tourmaline::InputMediaVideo inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( media , thumb = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , width = nil , height = nil , duration = nil , supports_streaming = nil ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #duration : Int32? # View source #duration= ( duration : Int32? ) # View source #height : Int32? # View source #height= ( height : Int32? ) # View source #media : String | File # View source #media= ( media : String | File ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #supports_streaming : Bool? # View source #supports_streaming= ( supports_streaming : Bool? ) # View source #thumb : String | File | Nil # View source #thumb= ( thumb : String | File | Nil ) # View source #width : Int32? # View source #width= ( width : Int32? ) # View source","title":"InputMediaVideo"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo","text":"","title":"InputMediaVideo"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#duration","text":"View source","title":"#duration"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#duration=(duration)","text":"View source","title":"#duration="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#height","text":"View source","title":"#height"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#height=(height)","text":"View source","title":"#height="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#media","text":"View source","title":"#media"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#media=(media)","text":"View source","title":"#media="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#supports_streaming","text":"View source","title":"#supports_streaming"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#supports_streaming=(supports_streaming)","text":"View source","title":"#supports_streaming="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#thumb","text":"View source","title":"#thumb"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#thumb=(thumb)","text":"View source","title":"#thumb="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#width","text":"View source","title":"#width"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#width=(width)","text":"View source","title":"#width="},{"location":"api_reference/Tourmaline/InputMessageContent/","text":"alias Tourmaline::InputMessageContent # Alias definition Tourmaline::InputContactMessageContent | Tourmaline::InputInvoiceMessageContent | Tourmaline::InputLocationMessageContent | Tourmaline::InputTextMessageContent | Tourmaline::InputVenueMessageContent","title":"InputMessageContent"},{"location":"api_reference/Tourmaline/InputMessageContent/#Tourmaline::InputMessageContent","text":"","title":"InputMessageContent"},{"location":"api_reference/Tourmaline/InputTextMessageContent/","text":"class Tourmaline::InputTextMessageContent inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( message_text , parse_mode = nil , caption_entities = [] of MessageEntity , disable_web_page_preview = nil ) # View source Methods # #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #disable_web_page_preview : Bool? # View source #message_text : String # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source","title":"InputTextMessageContent"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent","text":"","title":"InputTextMessageContent"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#disable_web_page_preview","text":"View source","title":"#disable_web_page_preview"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#message_text","text":"View source","title":"#message_text"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputVenueMessageContent/","text":"class Tourmaline::InputVenueMessageContent inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( latitude , longitude , title , address , foursquare_id = nil , foursquare_type = nil , google_place_id = nil , google_place_type = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #address : String # View source #foursquare_id : String? # View source #foursquare_type : String? # View source #google_place_id : String? # View source #google_place_type : String? # View source #latitude : Float64 # View source #longitude : Float64 # View source #title : String # View source","title":"InputVenueMessageContent"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent","text":"","title":"InputVenueMessageContent"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent.new(latitude,longitude,title,address,foursquare_id,foursquare_type,google_place_id,google_place_type)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#address","text":"View source","title":"#address"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#foursquare_id","text":"View source","title":"#foursquare_id"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#foursquare_type","text":"View source","title":"#foursquare_type"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#google_place_id","text":"View source","title":"#google_place_id"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#google_place_type","text":"View source","title":"#google_place_type"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#latitude","text":"View source","title":"#latitude"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#longitude","text":"View source","title":"#longitude"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/Invoice/","text":"class Tourmaline::Invoice inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( title , description , start_parameter , currency , total_amount ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #currency : String # View source #currency= ( currency : String ) # View source #description : String # View source #description= ( description : String ) # View source #start_parameter : String # View source #start_parameter= ( start_parameter : String ) # View source #title : String # View source #title= ( title : String ) # View source #total_amount : Int32 # View source #total_amount= ( total_amount : Int32 ) # View source","title":"Invoice"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice","text":"","title":"Invoice"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice.new(title,description,start_parameter,currency,total_amount)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#currency","text":"View source","title":"#currency"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#currency=(currency)","text":"View source","title":"#currency="},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#description=(description)","text":"View source","title":"#description="},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#start_parameter","text":"View source","title":"#start_parameter"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#start_parameter=(start_parameter)","text":"View source","title":"#start_parameter="},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#title=(title)","text":"View source","title":"#title="},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#total_amount","text":"View source","title":"#total_amount"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#total_amount=(total_amount)","text":"View source","title":"#total_amount="},{"location":"api_reference/Tourmaline/JsonPersistence/","text":"class Tourmaline::JsonPersistence inherits Tourmaline::HashPersistence # Persists users and chats in a json file. This isn't the most efficient, but it is easy to set up for testing. Constructors # .new ( filename = \"tourmaline_persistence.json\" ) # View source Methods # #cleanup # Gets called upon exit. It can be used to perform any necessary cleanup. View source #filename : String # View source #filename= ( filename : String ) # View source #init # Gets called when the bot is initialized. This can be used for setup if you need access to the bot instance. View source","title":"JsonPersistence"},{"location":"api_reference/Tourmaline/JsonPersistence/#Tourmaline::JsonPersistence","text":"Persists users and chats in a json file. This isn't the most efficient, but it is easy to set up for testing.","title":"JsonPersistence"},{"location":"api_reference/Tourmaline/JsonPersistence/#Tourmaline::JsonPersistence-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/JsonPersistence/#Tourmaline::JsonPersistence.new(filename)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/JsonPersistence/#Tourmaline::JsonPersistence-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/JsonPersistence/#Tourmaline::JsonPersistence#cleanup","text":"Gets called upon exit. It can be used to perform any necessary cleanup. View source","title":"#cleanup"},{"location":"api_reference/Tourmaline/JsonPersistence/#Tourmaline::JsonPersistence#filename","text":"View source","title":"#filename"},{"location":"api_reference/Tourmaline/JsonPersistence/#Tourmaline::JsonPersistence#filename=(filename)","text":"View source","title":"#filename="},{"location":"api_reference/Tourmaline/JsonPersistence/#Tourmaline::JsonPersistence#init","text":"Gets called when the bot is initialized. This can be used for setup if you need access to the bot instance. View source","title":"#init"},{"location":"api_reference/Tourmaline/KemalAdapter/","text":"class Tourmaline::KemalAdapter inherits Kemal::Handler # Tourmaline adapter for Kemal. This handler allows you to use Tourmaline as a part of your Kemal server rather than as a standalone server. This means that webhook requests can be sent to a specific path and handled accordingly. Constructors # .new ( bot : Tourmaline::Client , url : String , path = nil , certificate = nil , max_connections = nil ) # Create a new instance of TourmalineHandler Requires a bot instance, a url , and an optional path . The url needs to be the publically accessable URL for the Kemal server. The path defines where this will be served on your kemal instance. By default this is at /webhook/{bot.name} , but it is recommended to use your bot's API key somewhere in the path for security reasons. View source Methods # #bot : Tourmaline::Client # View source #bot= ( bot : Tourmaline::Client ) # View source #call ( context ) # View source #check_config # View source #path : String # View source #path= ( path : String ) # View source #set_webhook ( certificate = nil , max_connections = nil ) # View source #unset_webhook # View source #url : String # View source #url= ( url : String ) # View source","title":"KemalAdapter"},{"location":"api_reference/Tourmaline/KemalAdapter/#Tourmaline::KemalAdapter","text":"Tourmaline adapter for Kemal. This handler allows you to use Tourmaline as a part of your Kemal server rather than as a standalone server. This means that webhook requests can be sent to a specific path and handled accordingly.","title":"KemalAdapter"},{"location":"api_reference/Tourmaline/KemalAdapter/#Tourmaline::KemalAdapter-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/KemalAdapter/#Tourmaline::KemalAdapter.new(bot,url,path,certificate,max_connections)","text":"Create a new instance of TourmalineHandler Requires a bot instance, a url , and an optional path . The url needs to be the publically accessable URL for the Kemal server. The path defines where this will be served on your kemal instance. By default this is at /webhook/{bot.name} , but it is recommended to use your bot's API key somewhere in the path for security reasons. View source","title":".new"},{"location":"api_reference/Tourmaline/KemalAdapter/#Tourmaline::KemalAdapter-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/KemalAdapter/#Tourmaline::KemalAdapter#bot","text":"View source","title":"#bot"},{"location":"api_reference/Tourmaline/KemalAdapter/#Tourmaline::KemalAdapter#bot=(bot)","text":"View source","title":"#bot="},{"location":"api_reference/Tourmaline/KemalAdapter/#Tourmaline::KemalAdapter#call(context)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/KemalAdapter/#Tourmaline::KemalAdapter#check_config","text":"View source","title":"#check_config"},{"location":"api_reference/Tourmaline/KemalAdapter/#Tourmaline::KemalAdapter#path","text":"View source","title":"#path"},{"location":"api_reference/Tourmaline/KemalAdapter/#Tourmaline::KemalAdapter#path=(path)","text":"View source","title":"#path="},{"location":"api_reference/Tourmaline/KemalAdapter/#Tourmaline::KemalAdapter#set_webhook(certificate,max_connections)","text":"View source","title":"#set_webhook"},{"location":"api_reference/Tourmaline/KemalAdapter/#Tourmaline::KemalAdapter#unset_webhook","text":"View source","title":"#unset_webhook"},{"location":"api_reference/Tourmaline/KemalAdapter/#Tourmaline::KemalAdapter#url","text":"View source","title":"#url"},{"location":"api_reference/Tourmaline/KemalAdapter/#Tourmaline::KemalAdapter#url=(url)","text":"View source","title":"#url="},{"location":"api_reference/Tourmaline/KemalAdapter/TGModel/","text":"alias Tourmaline::KemalAdapter::TGModel # Alias definition Tourmaline","title":"TGModel"},{"location":"api_reference/Tourmaline/KemalAdapter/TGModel/#Tourmaline::KemalAdapter::TGModel","text":"","title":"TGModel"},{"location":"api_reference/Tourmaline/KeyboardBuilder/","text":"abstract class Tourmaline::KeyboardBuilder(T, G) inherits Reference # Base builder class for InlineKeyboardMarkup::Builder and ReplyKeyboardMarkup::Builder . Direct known subclasses Tourmaline::InlineKeyboardMarkup::Builder Tourmaline::ReplyKeyboardMarkup::Builder Constructors # .new ( force_reply = false , remove_keyboard = false , selective = false , keyboard = [] of T , resize = false , one_time = false ) # View source Class methods # .build_keyboard ( buttons : Array ( T ), columns = 1 , wrap = nil ) # View source .buttons ( buttons , ** options ) # View source .force_reply ( value : Bool ) # View source .inline_buttons ( buttons , ** options ) # View source .one_time ( value : Bool ) # View source .remove_keyboard ( value : Bool ) # View source .resize ( value : Bool ) # View source .selective ( value : Bool ) # View source Methods # #button ( * args , ** options ) # View source #force_reply ( value ) # View source #force_reply : Bool # View source #force_reply= ( force_reply : Bool ) # View source abstract #keyboard ( columns = nil ) : G # View source #one_time ( value ) # View source #one_time : Bool # View source #one_time= ( one_time : Bool ) # View source #remove_keyboard ( value ) # View source #remove_keyboard : Bool # View source #remove_keyboard= ( remove_keyboard : Bool ) # View source #resize ( value ) # View source #resize : Bool # View source #resize= ( resize : Bool ) # View source #selective ( value ) # View source #selective : Bool # View source #selective= ( selective : Bool ) # View source","title":"KeyboardBuilder"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder","text":"Base builder class for InlineKeyboardMarkup::Builder and ReplyKeyboardMarkup::Builder .","title":"KeyboardBuilder"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.new(force_reply,remove_keyboard,selective,keyboard,resize,one_time)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.build_keyboard(buttons,columns,wrap)","text":"View source","title":".build_keyboard"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.buttons(buttons,**)","text":"View source","title":".buttons"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.force_reply(value)","text":"View source","title":".force_reply"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.inline_buttons(buttons,**)","text":"View source","title":".inline_buttons"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.one_time(value)","text":"View source","title":".one_time"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.remove_keyboard(value)","text":"View source","title":".remove_keyboard"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.resize(value)","text":"View source","title":".resize"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.selective(value)","text":"View source","title":".selective"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#button(*,**)","text":"View source","title":"#button"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#force_reply(value)","text":"View source","title":"#force_reply"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#force_reply=(force_reply)","text":"View source","title":"#force_reply="},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#keyboard(columns)","text":"View source","title":"#keyboard"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#one_time(value)","text":"View source","title":"#one_time"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#one_time=(one_time)","text":"View source","title":"#one_time="},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#remove_keyboard(value)","text":"View source","title":"#remove_keyboard"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#remove_keyboard=(remove_keyboard)","text":"View source","title":"#remove_keyboard="},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#resize(value)","text":"View source","title":"#resize"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#resize=(resize)","text":"View source","title":"#resize="},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#selective(value)","text":"View source","title":"#selective"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#selective=(selective)","text":"View source","title":"#selective="},{"location":"api_reference/Tourmaline/KeyboardButton/","text":"class Tourmaline::KeyboardButton inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( text : String , request_contact = false , request_location = false , request_poll = nil ) # View source Methods # #request_contact : Bool # View source #request_contact= ( request_contact : Bool ) # View source #request_location : Bool # View source #request_location= ( request_location : Bool ) # View source #request_poll : KeyboardButtonPollType? # View source #request_poll= ( request_poll : KeyboardButtonPollType? ) # View source #text : String # View source #text= ( text : String ) # View source","title":"KeyboardButton"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton","text":"","title":"KeyboardButton"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_contact","text":"View source","title":"#request_contact"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_contact=(request_contact)","text":"View source","title":"#request_contact="},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_location","text":"View source","title":"#request_location"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_location=(request_location)","text":"View source","title":"#request_location="},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_poll","text":"View source","title":"#request_poll"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_poll=(request_poll)","text":"View source","title":"#request_poll="},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#text","text":"View source","title":"#text"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#text=(text)","text":"View source","title":"#text="},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/","text":"class Tourmaline::KeyboardButtonPollType inherits Reference # This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed. Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( type ) # View source Methods # #type : Poll::Type # View source #type= ( type : Poll::Type ) # View source","title":"KeyboardButtonPollType"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType","text":"This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.","title":"KeyboardButtonPollType"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType#type=(type)","text":"View source","title":"#type="},{"location":"api_reference/Tourmaline/LabeledPrice/","text":"class Tourmaline::LabeledPrice inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( label : String , amount : Int32 ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #amount : Int32 # View source #label : String # View source","title":"LabeledPrice"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice","text":"","title":"LabeledPrice"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice.new(label,amount)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice#amount","text":"View source","title":"#amount"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice#label","text":"View source","title":"#label"},{"location":"api_reference/Tourmaline/Location/","text":"class Tourmaline::Location inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( latitude , longitude , horizontal_accuracy = nil , live_period = nil , heading = nil , proximity_alert_radius = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #heading : Int32? # View source #horizontal_accuracy : Int32? # View source #latitude : Float64 # View source #live_period : Int32? # View source #longitude : Float64 # View source #proximity_alert_radius : Int32? # View source","title":"Location"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location","text":"","title":"Location"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location.new(latitude,longitude,horizontal_accuracy,live_period,heading,proximity_alert_radius)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#heading","text":"View source","title":"#heading"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#horizontal_accuracy","text":"View source","title":"#horizontal_accuracy"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#latitude","text":"View source","title":"#latitude"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#live_period","text":"View source","title":"#live_period"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#longitude","text":"View source","title":"#longitude"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#proximity_alert_radius","text":"View source","title":"#proximity_alert_radius"},{"location":"api_reference/Tourmaline/LoginURL/","text":"struct Tourmaline::LoginURL inherits Struct # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( url , forward_text = nil , bot_username = nil , request_write_access = nil ) # View source Methods # #bot_username : String? # View source #forward_text : String? # View source #request_write_access : Bool? # View source #url : String # View source","title":"LoginURL"},{"location":"api_reference/Tourmaline/LoginURL/#Tourmaline::LoginURL","text":"","title":"LoginURL"},{"location":"api_reference/Tourmaline/LoginURL/#Tourmaline::LoginURL-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/LoginURL/#Tourmaline::LoginURL.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/LoginURL/#Tourmaline::LoginURL-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/LoginURL/#Tourmaline::LoginURL#bot_username","text":"View source","title":"#bot_username"},{"location":"api_reference/Tourmaline/LoginURL/#Tourmaline::LoginURL#forward_text","text":"View source","title":"#forward_text"},{"location":"api_reference/Tourmaline/LoginURL/#Tourmaline::LoginURL#request_write_access","text":"View source","title":"#request_write_access"},{"location":"api_reference/Tourmaline/LoginURL/#Tourmaline::LoginURL#url","text":"View source","title":"#url"},{"location":"api_reference/Tourmaline/MaskPosition/","text":"class Tourmaline::MaskPosition inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( point : String , x_shift : Float64 , y_shift : Float64 , scale : Float64 ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #point : String # View source #scale : Float64 # View source #x_shift : Float64 # View source #y_shift : Float64 # View source","title":"MaskPosition"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition","text":"","title":"MaskPosition"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition.new(point,x_shift,y_shift,scale)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition#point","text":"View source","title":"#point"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition#scale","text":"View source","title":"#scale"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition#x_shift","text":"View source","title":"#x_shift"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition#y_shift","text":"View source","title":"#y_shift"},{"location":"api_reference/Tourmaline/Message/","text":"class Tourmaline::Message inherits Reference # This object represents a Telegram user or bot. # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #animation : Animation? # View source #audio : Audio? # View source #author_signature : String? # View source #caption : String? # View source #caption_entities : Array ( MessageEntity ) # View source #channel_chat_created : Bool? # View source #chat : Chat # View source #chats # View source #chats ( & block : Chat -> ) # View source #connected_website : String? # View source #contact : Contact? # View source #date : Time # View source #delete # Delete the message. See Tourmaline::Client#delete_message . View source #delete_chat_photo : Bool? # View source #dice : Dice? # View source #document : Document? # View source #edit_caption ( caption , ** kwargs ) # Edits the message's caption. See Tourmaline::Client#edit_message_caption View source #edit_date : Time? # View source #edit_live_location ( latitude , longitude , ** kwargs ) # Edits the message's live_location. See Tourmaline::Client#edit_message_live_location View source #edit_media ( media , ** kwargs ) # Edits the message's media. See Tourmaline::Client#edit_message_media View source #edit_reply_markup ( reply_markup ) # Set the reply markup for the message. See Tourmaline::Client#edit_message_reply_markup . View source #edit_text ( text , ** kwargs ) # Edits the text of a message. See Tourmaline::Client#edit_message_text . View source #entities : Array ( MessageEntity ) # View source #file # View source #forward ( to_chat , ** kwargs ) # Forward the message to another chat. See Tourmaline::Client#forward_message . View source #forward_date : Time? # View source #forward_from : User? # View source #forward_from_chat : Chat? # View source #forward_from_message_id : Int64? # View source #forward_sender_name : String? # View source #forward_signature : String? # View source #forwards : Int32? # USER API ONLY View source #from : User? # View source #game : Game? # View source #group_chat_created : Bool? # View source #has_protected_content : Bool? # View source #invoice : Invoice? # View source #is_automatic_forward : Bool? # View source #is_outgoing? : Bool? # USER API ONLY View source #left_chat_member : User? # View source #link # View source #location : Location? # View source #media_group_id : String? # View source #message_auto_delete_timer_changed : MessageAutoDeleteTimerChanged? # View source #message_id : Int64 # View source #migrate_from_chat_id : Int64? # View source #migrate_to_chat_id : Int64? # View source #new_chat_members : Array ( User ) # View source #new_chat_photo : Array ( PhotoSize ) # View source #new_chat_title : String? # View source #passport_data : PassportData? # View source #photo : Array ( PhotoSize ) # View source #pin ( ** kwargs ) # Pin the message. See Tourmaline::Client#pin_chat_message . View source #pinned_message : Message? # View source #poll : Poll? # View source #proximity_alert_triggered : ProximityAlertTriggered? # View source #raw_caption ( parse_mode : ParseMode = :markdown ) # View source #raw_text ( parse_mode : ParseMode = :markdown ) # View source #reply ( message , ** kwargs ) # Reply to a message. See Tourmaline::Client#send_message . View source #reply_markup : InlineKeyboardMarkup? # View source #reply_message : Message? # View source #reply_with_animation ( * args , ** kwargs ) # View source #reply_with_audio ( * args , ** kwargs ) # View source #reply_with_basketball ( * args , ** kwargs ) # View source #reply_with_contact ( * args , ** kwargs ) # View source #reply_with_dart ( * args , ** kwargs ) # View source #reply_with_dice ( * args , ** kwargs ) # View source #reply_with_document ( * args , ** kwargs ) # View source #reply_with_invoice ( * args , ** kwargs ) # View source #reply_with_location ( * args , ** kwargs ) # View source #reply_with_media_group ( * args , ** kwargs ) # View source #reply_with_menu ( menu : RoutedMenu , ** kwargs ) # View source #reply_with_photo ( * args , ** kwargs ) # View source #reply_with_poll ( * args , ** kwargs ) # View source #reply_with_sticker ( * args , ** kwargs ) # View source #reply_with_venu ( * args , ** kwargs ) # View source #reply_with_video ( * args , ** kwargs ) # View source #reply_with_video_note ( * args , ** kwargs ) # View source #reply_with_voice ( * args , ** kwargs ) # View source #respond ( message , ** kwargs ) # Respond to a message. See Tourmaline::Client#send_message . View source #respond_with_animation ( * args , ** kwargs ) # View source #respond_with_audio ( * args , ** kwargs ) # View source #respond_with_basketball ( * args , ** kwargs ) # View source #respond_with_contact ( * args , ** kwargs ) # View source #respond_with_dart ( * args , ** kwargs ) # View source #respond_with_dice ( * args , ** kwargs ) # View source #respond_with_document ( * args , ** kwargs ) # View source #respond_with_invoice ( * args , ** kwargs ) # View source #respond_with_location ( * args , ** kwargs ) # View source #respond_with_media_group ( * args , ** kwargs ) # View source #respond_with_menu ( menu : RoutedMenu , ** kwargs ) # View source #respond_with_photo ( * args , ** kwargs ) # View source #respond_with_poll ( * args , ** kwargs ) # View source #respond_with_sticker ( * args , ** kwargs ) # View source #respond_with_venu ( * args , ** kwargs ) # View source #respond_with_video ( * args , ** kwargs ) # View source #respond_with_video_note ( * args , ** kwargs ) # View source #respond_with_voice ( * args , ** kwargs ) # View source #sender_chat : Chat? # View source #sender_type # View source #sticker : Sticker? # View source #stop_live_location ( ** kwargs ) # View source #successful_payment : SuccessfulPayment? # View source #supergroup_chat_created : Bool? # View source #text : String? # View source #text_entities # View source #unpin ( ** kwargs ) # Unpin the message. See Tourmaline::Client#unpin_chat_message . View source #users # View source #users ( & block : User -> ) # View source #venue : Venue? # View source #via_bot : User? # View source #video : Video? # View source #video_note : VideoNote? # View source #views : Int32? # USER API ONLY View source #voice : Voice? # View source #voice_chat_ended : VoiceChatEnded? # View source #voice_chat_participants_invited : VoiceChatParticipantsInvited? # View source #voice_chat_scheduled : VoiceChatScheduled? # View source #voice_chat_started : VoiceChatStarted? # View source","title":"Message"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message","text":"","title":"Message"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message--this-object-represents-a-telegram-user-or-bot","text":"","title":"This object represents a Telegram user or bot."},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#animation","text":"View source","title":"#animation"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#audio","text":"View source","title":"#audio"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#author_signature","text":"View source","title":"#author_signature"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#channel_chat_created","text":"View source","title":"#channel_chat_created"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#chat","text":"View source","title":"#chat"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#chats","text":"View source","title":"#chats"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#connected_website","text":"View source","title":"#connected_website"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#contact","text":"View source","title":"#contact"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#date","text":"View source","title":"#date"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#delete","text":"Delete the message. See Tourmaline::Client#delete_message . View source","title":"#delete"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#delete_chat_photo","text":"View source","title":"#delete_chat_photo"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#dice","text":"View source","title":"#dice"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#document","text":"View source","title":"#document"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#edit_caption(caption,**)","text":"Edits the message's caption. See Tourmaline::Client#edit_message_caption View source","title":"#edit_caption"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#edit_date","text":"View source","title":"#edit_date"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#edit_live_location(latitude,longitude,**)","text":"Edits the message's live_location. See Tourmaline::Client#edit_message_live_location View source","title":"#edit_live_location"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#edit_media(media,**)","text":"Edits the message's media. See Tourmaline::Client#edit_message_media View source","title":"#edit_media"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#edit_reply_markup(reply_markup)","text":"Set the reply markup for the message. See Tourmaline::Client#edit_message_reply_markup . View source","title":"#edit_reply_markup"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#edit_text(text,**)","text":"Edits the text of a message. See Tourmaline::Client#edit_message_text . View source","title":"#edit_text"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#entities","text":"View source","title":"#entities"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#file","text":"View source","title":"#file"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forward(to_chat,**)","text":"Forward the message to another chat. See Tourmaline::Client#forward_message . View source","title":"#forward"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forward_date","text":"View source","title":"#forward_date"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forward_from","text":"View source","title":"#forward_from"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forward_from_chat","text":"View source","title":"#forward_from_chat"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forward_from_message_id","text":"View source","title":"#forward_from_message_id"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forward_sender_name","text":"View source","title":"#forward_sender_name"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forward_signature","text":"View source","title":"#forward_signature"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forwards","text":"USER API ONLY View source","title":"#forwards"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#from","text":"View source","title":"#from"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#game","text":"View source","title":"#game"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#group_chat_created","text":"View source","title":"#group_chat_created"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#has_protected_content","text":"View source","title":"#has_protected_content"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#invoice","text":"View source","title":"#invoice"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#is_automatic_forward","text":"View source","title":"#is_automatic_forward"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#is_outgoing?","text":"USER API ONLY View source","title":"#is_outgoing?"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#left_chat_member","text":"View source","title":"#left_chat_member"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#link","text":"View source","title":"#link"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#location","text":"View source","title":"#location"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#media_group_id","text":"View source","title":"#media_group_id"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#message_auto_delete_timer_changed","text":"View source","title":"#message_auto_delete_timer_changed"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#message_id","text":"View source","title":"#message_id"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#migrate_from_chat_id","text":"View source","title":"#migrate_from_chat_id"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#migrate_to_chat_id","text":"View source","title":"#migrate_to_chat_id"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#new_chat_members","text":"View source","title":"#new_chat_members"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#new_chat_photo","text":"View source","title":"#new_chat_photo"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#new_chat_title","text":"View source","title":"#new_chat_title"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#passport_data","text":"View source","title":"#passport_data"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#photo","text":"View source","title":"#photo"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#pin(**)","text":"Pin the message. See Tourmaline::Client#pin_chat_message . View source","title":"#pin"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#pinned_message","text":"View source","title":"#pinned_message"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#poll","text":"View source","title":"#poll"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#proximity_alert_triggered","text":"View source","title":"#proximity_alert_triggered"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#raw_caption(parse_mode)","text":"View source","title":"#raw_caption"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#raw_text(parse_mode)","text":"View source","title":"#raw_text"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply(message,**)","text":"Reply to a message. See Tourmaline::Client#send_message . View source","title":"#reply"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_message","text":"View source","title":"#reply_message"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_animation(*,**)","text":"View source","title":"#reply_with_animation"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_audio(*,**)","text":"View source","title":"#reply_with_audio"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_basketball(*,**)","text":"View source","title":"#reply_with_basketball"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_contact(*,**)","text":"View source","title":"#reply_with_contact"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_dart(*,**)","text":"View source","title":"#reply_with_dart"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_dice(*,**)","text":"View source","title":"#reply_with_dice"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_document(*,**)","text":"View source","title":"#reply_with_document"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_invoice(*,**)","text":"View source","title":"#reply_with_invoice"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_location(*,**)","text":"View source","title":"#reply_with_location"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_media_group(*,**)","text":"View source","title":"#reply_with_media_group"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_menu(menu,**)","text":"View source","title":"#reply_with_menu"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_photo(*,**)","text":"View source","title":"#reply_with_photo"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_poll(*,**)","text":"View source","title":"#reply_with_poll"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_sticker(*,**)","text":"View source","title":"#reply_with_sticker"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_venu(*,**)","text":"View source","title":"#reply_with_venu"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_video(*,**)","text":"View source","title":"#reply_with_video"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_video_note(*,**)","text":"View source","title":"#reply_with_video_note"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_with_voice(*,**)","text":"View source","title":"#reply_with_voice"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond(message,**)","text":"Respond to a message. See Tourmaline::Client#send_message . View source","title":"#respond"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_animation(*,**)","text":"View source","title":"#respond_with_animation"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_audio(*,**)","text":"View source","title":"#respond_with_audio"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_basketball(*,**)","text":"View source","title":"#respond_with_basketball"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_contact(*,**)","text":"View source","title":"#respond_with_contact"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_dart(*,**)","text":"View source","title":"#respond_with_dart"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_dice(*,**)","text":"View source","title":"#respond_with_dice"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_document(*,**)","text":"View source","title":"#respond_with_document"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_invoice(*,**)","text":"View source","title":"#respond_with_invoice"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_location(*,**)","text":"View source","title":"#respond_with_location"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_media_group(*,**)","text":"View source","title":"#respond_with_media_group"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_menu(menu,**)","text":"View source","title":"#respond_with_menu"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_photo(*,**)","text":"View source","title":"#respond_with_photo"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_poll(*,**)","text":"View source","title":"#respond_with_poll"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_sticker(*,**)","text":"View source","title":"#respond_with_sticker"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_venu(*,**)","text":"View source","title":"#respond_with_venu"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_video(*,**)","text":"View source","title":"#respond_with_video"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_video_note(*,**)","text":"View source","title":"#respond_with_video_note"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#respond_with_voice(*,**)","text":"View source","title":"#respond_with_voice"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#sender_chat","text":"View source","title":"#sender_chat"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#sender_type","text":"View source","title":"#sender_type"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#sticker","text":"View source","title":"#sticker"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#stop_live_location(**)","text":"View source","title":"#stop_live_location"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#successful_payment","text":"View source","title":"#successful_payment"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#supergroup_chat_created","text":"View source","title":"#supergroup_chat_created"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#text","text":"View source","title":"#text"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#text_entities","text":"View source","title":"#text_entities"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#unpin(**)","text":"Unpin the message. See Tourmaline::Client#unpin_chat_message . View source","title":"#unpin"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#users","text":"View source","title":"#users"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#venue","text":"View source","title":"#venue"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#via_bot","text":"View source","title":"#via_bot"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video","text":"View source","title":"#video"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video_note","text":"View source","title":"#video_note"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#views","text":"USER API ONLY View source","title":"#views"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#voice","text":"View source","title":"#voice"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#voice_chat_ended","text":"View source","title":"#voice_chat_ended"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#voice_chat_participants_invited","text":"View source","title":"#voice_chat_participants_invited"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#voice_chat_scheduled","text":"View source","title":"#voice_chat_scheduled"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#voice_chat_started","text":"View source","title":"#voice_chat_started"},{"location":"api_reference/Tourmaline/Message/SenderType/","text":"enum Tourmaline::Message::SenderType # Members # Bot = 0 # User = 1 # Channel = 2 # ChannelForward = 3 # AnonymousAdmin = 4 # Methods # #anonymous_admin? # View source #bot? # View source #channel? # View source #channel_forward? # View source #user? # View source","title":"SenderType"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType","text":"","title":"SenderType"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType::Bot","text":"","title":"Bot"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType::User","text":"","title":"User"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType::Channel","text":"","title":"Channel"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType::ChannelForward","text":"","title":"ChannelForward"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType::AnonymousAdmin","text":"","title":"AnonymousAdmin"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType#anonymous_admin?","text":"View source","title":"#anonymous_admin?"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType#bot?","text":"View source","title":"#bot?"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType#channel?","text":"View source","title":"#channel?"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType#channel_forward?","text":"View source","title":"#channel_forward?"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType#user?","text":"View source","title":"#user?"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/","text":"class Tourmaline::MessageAutoDeleteTimerChanged inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #message_auto_delete_time : Int32 # View source","title":"MessageAutoDeleteTimerChanged"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/#Tourmaline::MessageAutoDeleteTimerChanged","text":"","title":"MessageAutoDeleteTimerChanged"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/#Tourmaline::MessageAutoDeleteTimerChanged-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/#Tourmaline::MessageAutoDeleteTimerChanged.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/#Tourmaline::MessageAutoDeleteTimerChanged-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/#Tourmaline::MessageAutoDeleteTimerChanged#message_auto_delete_time","text":"View source","title":"#message_auto_delete_time"},{"location":"api_reference/Tourmaline/MessageEntity/","text":"class Tourmaline::MessageEntity inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constants # MENTION_TYPES = [ \"mention\" , \"text_mention\" , \"hashtag\" , \"cashtag\" , \"bot_command\" , \"url\" , \"email\" , \"phone_number\" , \"bold\" , \"italic\" , \"code\" , \"pre\" , \"text_link\" , \"underline\" , \"strikethrough\" ] of :: String # Constructors # .new ( type , offset , length , url = nil , user = nil , language = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #bold? # View source #bot_command? # View source #cashtag? # View source #code? # View source #email? # View source #hashtag? # View source #italic? # View source #language : String? # View source #length : Int64 # View source #mention? # View source #offset : Int64 # View source #phone_number? # View source #pre? # View source #strikethrough? # View source #text_link? # View source #text_mention? # View source #type : String # View source #underline? # View source #url : String? # View source #url? # View source #user : User? # View source","title":"MessageEntity"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity","text":"","title":"MessageEntity"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity::MENTION_TYPES","text":"","title":"MENTION_TYPES"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity.new(type,offset,length,url,user,language)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#bold?","text":"View source","title":"#bold?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#bot_command?","text":"View source","title":"#bot_command?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#cashtag?","text":"View source","title":"#cashtag?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#code?","text":"View source","title":"#code?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#email?","text":"View source","title":"#email?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#hashtag?","text":"View source","title":"#hashtag?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#italic?","text":"View source","title":"#italic?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#language","text":"View source","title":"#language"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#length","text":"View source","title":"#length"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#mention?","text":"View source","title":"#mention?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#offset","text":"View source","title":"#offset"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#phone_number?","text":"View source","title":"#phone_number?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#pre?","text":"View source","title":"#pre?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#strikethrough?","text":"View source","title":"#strikethrough?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#text_link?","text":"View source","title":"#text_link?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#text_mention?","text":"View source","title":"#text_mention?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#underline?","text":"View source","title":"#underline?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#url","text":"View source","title":"#url"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#url?","text":"View source","title":"#url?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#user","text":"View source","title":"#user"},{"location":"api_reference/Tourmaline/Middleware/","text":"module Tourmaline::Middleware # Methods # abstract #call ( client : Client , update : Update ) # View source #next # View source","title":"Middleware"},{"location":"api_reference/Tourmaline/Middleware/#Tourmaline::Middleware","text":"","title":"Middleware"},{"location":"api_reference/Tourmaline/Middleware/#Tourmaline::Middleware-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Middleware/#Tourmaline::Middleware#call(client,update)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/Middleware/#Tourmaline::Middleware#next","text":"View source","title":"#next"},{"location":"api_reference/Tourmaline/Middleware/Context/","text":"struct Tourmaline::Middleware::Context inherits Struct # Constructors # .new # View source Methods # #get ( name , type : T . class ) forall T # Returns the value of the parameter with the provided name as a type . View source #get ( name ) # Returns the value of the parameter with the provided name . Raises a KeyError if no parameter with that name exists. View source #get? ( name , type : T . class ) forall T # Returns the value of the parameter with the provided name as a type if it exists, otherwise nil . View source #get? ( name ) # Returns the value of the parameter with the provided name if it exists, otherwise nil . View source #has? ( name ) : Bool # Returns true if a parameter with the provided name exists, otherwise false . View source #remove ( name ) : Nil # Removes the parameter with the provided name . View source #set ( name , value : _ , type : T . class ) : Nil forall T # Sets a parameter with the provided name to value , restricted to the given type . View source #set ( name , value : T ) : Nil forall T # Sets a parameter with the provided name to value . View source","title":"Context"},{"location":"api_reference/Tourmaline/Middleware/Context/#Tourmaline::Middleware::Context","text":"","title":"Context"},{"location":"api_reference/Tourmaline/Middleware/Context/#Tourmaline::Middleware::Context-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Middleware/Context/#Tourmaline::Middleware::Context.new","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Middleware/Context/#Tourmaline::Middleware::Context-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Middleware/Context/#Tourmaline::Middleware::Context#get(name,type)","text":"Returns the value of the parameter with the provided name as a type . View source","title":"#get"},{"location":"api_reference/Tourmaline/Middleware/Context/#Tourmaline::Middleware::Context#get?(name,type)","text":"Returns the value of the parameter with the provided name as a type if it exists, otherwise nil . View source","title":"#get?"},{"location":"api_reference/Tourmaline/Middleware/Context/#Tourmaline::Middleware::Context#has?(name)","text":"Returns true if a parameter with the provided name exists, otherwise false . View source","title":"#has?"},{"location":"api_reference/Tourmaline/Middleware/Context/#Tourmaline::Middleware::Context#remove(name)","text":"Removes the parameter with the provided name . View source","title":"#remove"},{"location":"api_reference/Tourmaline/Middleware/Context/#Tourmaline::Middleware::Context#set(name,value,type)","text":"Sets a parameter with the provided name to value , restricted to the given type . View source","title":"#set"},{"location":"api_reference/Tourmaline/Middleware/ContinueIteration/","text":"class Tourmaline::Middleware::ContinueIteration inherits Exception #","title":"ContinueIteration"},{"location":"api_reference/Tourmaline/Middleware/ContinueIteration/#Tourmaline::Middleware::ContinueIteration","text":"","title":"ContinueIteration"},{"location":"api_reference/Tourmaline/MiddlewareProc/","text":"alias Tourmaline::MiddlewareProc # Alias definition Tourmaline::Client , Tourmaline::Update -> Nil","title":"MiddlewareProc"},{"location":"api_reference/Tourmaline/MiddlewareProc/#Tourmaline::MiddlewareProc","text":"","title":"MiddlewareProc"},{"location":"api_reference/Tourmaline/Model/","text":"module Tourmaline::Model # Direct including types Tourmaline::Animation Tourmaline::Audio Tourmaline::BotCommand Tourmaline::BotCommandScopeAllChatAdministrators Tourmaline::BotCommandScopeAllGroupChats Tourmaline::BotCommandScopeAllPrivateChats Tourmaline::BotCommandScopeChat Tourmaline::BotCommandScopeChatAdministrators Tourmaline::BotCommandScopeChatMember Tourmaline::BotCommandScopeDefault Tourmaline::CallbackGame Tourmaline::CallbackQuery Tourmaline::Chat Tourmaline::ChatInviteLink Tourmaline::ChatLocation Tourmaline::ChatMember Tourmaline::ChatMemberUpdated Tourmaline::ChatPermissions Tourmaline::ChatPhoto Tourmaline::ChosenInlineResult Tourmaline::Contact Tourmaline::Dice Tourmaline::Document Tourmaline::EncryptedCredentials Tourmaline::EncryptedPassportElement Tourmaline::ForceReply Tourmaline::Game Tourmaline::GameHighScore Tourmaline::InlineKeyboardButton Tourmaline::InlineKeyboardMarkup Tourmaline::InlineQuery Tourmaline::InlineQueryResult Tourmaline::InputContactMessageContent Tourmaline::InputInvoiceMessageContent Tourmaline::InputLocationMessageContent Tourmaline::InputMediaAnimation Tourmaline::InputMediaAudio Tourmaline::InputMediaDocument Tourmaline::InputMediaPhoto Tourmaline::InputMediaVideo Tourmaline::InputTextMessageContent Tourmaline::InputVenueMessageContent Tourmaline::Invoice Tourmaline::KeyboardButton Tourmaline::KeyboardButtonPollType Tourmaline::LabeledPrice Tourmaline::Location Tourmaline::LoginURL Tourmaline::MaskPosition Tourmaline::Message Tourmaline::MessageAutoDeleteTimerChanged Tourmaline::MessageEntity Tourmaline::OrderInfo Tourmaline::PassportData Tourmaline::PassportElementError Tourmaline::PassportFile Tourmaline::PhotoSize Tourmaline::Poll Tourmaline::PollAnswer Tourmaline::PollOption Tourmaline::PreCheckoutQuery Tourmaline::ProximityAlertTriggered Tourmaline::ReplyKeyboardMarkup Tourmaline::ReplyKeyboardRemove Tourmaline::ShippingAddress Tourmaline::ShippingOption Tourmaline::ShippingQuery Tourmaline::Sticker Tourmaline::StickerSet Tourmaline::SuccessfulPayment Tourmaline::TFile Tourmaline::Update Tourmaline::User Tourmaline::UserProfilePhotos Tourmaline::Venue Tourmaline::Video Tourmaline::VideoNote Tourmaline::Voice Tourmaline::VoiceChatEnded Tourmaline::VoiceChatParticipantsInvited Tourmaline::VoiceChatScheduled Tourmaline::VoiceChatStarted Tourmaline::WebhookInfo Methods # #client : Tourmaline::Client # #client= ( client : Tourmaline::Client ) # View source #client? : Tourmaline::Client? # #finish_init ( client : Tourmaline::Client ) # View source","title":"Model"},{"location":"api_reference/Tourmaline/Model/#Tourmaline::Model","text":"","title":"Model"},{"location":"api_reference/Tourmaline/Model/#Tourmaline::Model-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Model/#Tourmaline::Model#client","text":"","title":"#client"},{"location":"api_reference/Tourmaline/Model/#Tourmaline::Model#client=(client)","text":"View source","title":"#client="},{"location":"api_reference/Tourmaline/Model/#Tourmaline::Model#client?","text":"","title":"#client?"},{"location":"api_reference/Tourmaline/Model/#Tourmaline::Model#finish_init(client)","text":"View source","title":"#finish_init"},{"location":"api_reference/Tourmaline/NilPersistence/","text":"class Tourmaline::NilPersistence inherits Tourmaline::Persistence # The default persistence, which is no persistence. This is basically just a placeholder class that does absolutely nothing, but still allows persistence methods to be accessed. Methods # #chat_exists? ( chat_id : Int ) : Bool # Returns true if the chat with the provided chat_id exists. View source #chat_exists? ( username : String ) : Bool # Returns true if the chat with the provided username exists. View source #cleanup # Gets called upon exit. It can be used to perform any necessary cleanup. View source #get_chat ( chat_id : Int ) : Chat? # Fetches a chat by chat_id . Returns nil if the chat is not found. View source #get_chat ( username : String ) : Chat? # Fetches a chat by username . Returns nil if the chat is not found. View source #get_user ( user_id : Int ) : User? # Fetches a user by user_id . Returns nil if the user is not found. View source #get_user ( username : String ) : User? # Fetches a user by username . Returns nil if the user is not found. View source #handle_update ( update : Update ) # Takes an Update object, pulls out all unique Chat s and User s, and uses update_user and update_chat on each of them respectively. View source #init # Gets called when the bot is initialized. This can be used for setup if you need access to the bot instance. View source #update_chat ( chat : Chat ) : Chat # Create or update the provided Chat . View source #update_user ( user : User ) : User # Create or update the provided User . View source #user_exists? ( user_id : Int ) : Bool # Returns true if the user with the provided user_id exists. View source #user_exists? ( username : String ) : Bool # Returns true if the user with the provided username exists. View source","title":"NilPersistence"},{"location":"api_reference/Tourmaline/NilPersistence/#Tourmaline::NilPersistence","text":"The default persistence, which is no persistence. This is basically just a placeholder class that does absolutely nothing, but still allows persistence methods to be accessed.","title":"NilPersistence"},{"location":"api_reference/Tourmaline/NilPersistence/#Tourmaline::NilPersistence-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/NilPersistence/#Tourmaline::NilPersistence#chat_exists?(chat_id)","text":"Returns true if the chat with the provided chat_id exists. View source","title":"#chat_exists?"},{"location":"api_reference/Tourmaline/NilPersistence/#Tourmaline::NilPersistence#cleanup","text":"Gets called upon exit. It can be used to perform any necessary cleanup. View source","title":"#cleanup"},{"location":"api_reference/Tourmaline/NilPersistence/#Tourmaline::NilPersistence#get_chat(chat_id)","text":"Fetches a chat by chat_id . Returns nil if the chat is not found. View source","title":"#get_chat"},{"location":"api_reference/Tourmaline/NilPersistence/#Tourmaline::NilPersistence#get_user(user_id)","text":"Fetches a user by user_id . Returns nil if the user is not found. View source","title":"#get_user"},{"location":"api_reference/Tourmaline/NilPersistence/#Tourmaline::NilPersistence#handle_update(update)","text":"Takes an Update object, pulls out all unique Chat s and User s, and uses update_user and update_chat on each of them respectively. View source","title":"#handle_update"},{"location":"api_reference/Tourmaline/NilPersistence/#Tourmaline::NilPersistence#init","text":"Gets called when the bot is initialized. This can be used for setup if you need access to the bot instance. View source","title":"#init"},{"location":"api_reference/Tourmaline/NilPersistence/#Tourmaline::NilPersistence#update_chat(chat)","text":"Create or update the provided Chat . View source","title":"#update_chat"},{"location":"api_reference/Tourmaline/NilPersistence/#Tourmaline::NilPersistence#update_user(user)","text":"Create or update the provided User . View source","title":"#update_user"},{"location":"api_reference/Tourmaline/NilPersistence/#Tourmaline::NilPersistence#user_exists?(user_id)","text":"Returns true if the user with the provided user_id exists. View source","title":"#user_exists?"},{"location":"api_reference/Tourmaline/OrderInfo/","text":"class Tourmaline::OrderInfo inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #email : String? # View source #name : String? # View source #phone_number : String? # View source #shipping_address : ShippingAddress? # View source","title":"OrderInfo"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo","text":"","title":"OrderInfo"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo#email","text":"View source","title":"#email"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo#name","text":"View source","title":"#name"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo#phone_number","text":"View source","title":"#phone_number"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo#shipping_address","text":"View source","title":"#shipping_address"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/","text":"class Tourmaline::PaginatedKeyboard inherits Tourmaline::InlineKeyboardMarkup # Convenience class for creating an InlineKeyboard with built in pagination. It is designed to be customizable so as not to get in your way. Constructors # .new ( pull : JSON :: PullParser ) # Convenience class for creating an InlineKeyboard with built in pagination. It is designed to be customizable so as not to get in your way. View source .new ( client : Tourmaline::Client , results = [] of String , per_page = 10 , header = nil , footer = nil , prefix = nil , back_text = \"Back\" , next_text = \"Next\" , id = Helpers . random_string ( 8 )) # Creates a new PaginatedKeyboard View source .new ( results = [] of String , per_page = 10 , & block : self -> ) # Creates a new PaginatedKeyboard , yielding the newly created keyboard to the block Arguments # results - the initial set of results per_page - the number of results to show on each page header - text to be displayed above the results footer - text to be displayed below the results prefix - a string to be added to the beginning of each item back_text - text to use for the back button next_text - text to use for the next button id - an id to be used both as the group name, and the prefix for the callback query data Formatting # The params header , footer , and prefix are formatted prior to being injected into the message. - {page} - will be replaced with the current page number, starting at 1 - {page count} - will be replaced with the total number of pages - {index} - for prefix only, gets replaced with the index of the current item, starting at 1 View source Methods # #<< # View source #<< ( * args , ** options ) # View source #back_button_procs : Array ( Proc ( PaginatedKeyboard , Nil )) # View source #back_button_procs= ( back_button_procs : Array ( Proc ( PaginatedKeyboard , Nil ))) # View source #current_page # Returns the content for the current page View source #delete # View source #delete ( * args , ** options ) # View source #each ( * args , ** options ) # View source #each # View source #footer : String? # View source #footer= ( footer : String? ) # View source #header : String? # View source #header= ( header : String? ) # View source #id : String # View source #index ( * args , ** options ) # View source #index # View source #next_button_procs : Array ( Proc ( PaginatedKeyboard , Nil )) # View source #next_button_procs= ( next_button_procs : Array ( Proc ( PaginatedKeyboard , Nil ))) # View source #on_back ( & block : self -> ) # Adds a back button callback handler View source #on_next ( & block : self -> ) # Adds a next button callback handler View source #pages # Returns each page, with it's items View source #per_page : Int32 # View source #per_page= ( per_page : Int32 ) # View source #prefix : String? # View source #prefix= ( prefix : String? ) # View source #push ( * args , ** options ) # View source #push # View source #results : Array ( String ) # View source #results= ( results : Array ( String )) # View source","title":"PaginatedKeyboard"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard","text":"Convenience class for creating an InlineKeyboard with built in pagination. It is designed to be customizable so as not to get in your way.","title":"PaginatedKeyboard"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard.new(pull)","text":"Convenience class for creating an InlineKeyboard with built in pagination. It is designed to be customizable so as not to get in your way. View source","title":".new"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard.new(results,per_page,&)","text":"Creates a new PaginatedKeyboard , yielding the newly created keyboard to the block","title":".new"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard.new(results,per_page,&)--arguments","text":"results - the initial set of results per_page - the number of results to show on each page header - text to be displayed above the results footer - text to be displayed below the results prefix - a string to be added to the beginning of each item back_text - text to use for the back button next_text - text to use for the next button id - an id to be used both as the group name, and the prefix for the callback query data","title":"Arguments"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard.new(results,per_page,&)--formatting","text":"The params header , footer , and prefix are formatted prior to being injected into the message. - {page} - will be replaced with the current page number, starting at 1 - {page count} - will be replaced with the total number of pages - {index} - for prefix only, gets replaced with the index of the current item, starting at 1 View source","title":"Formatting"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#<<(*,**,&)","text":"View source","title":"#&lt;&lt;"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#back_button_procs","text":"View source","title":"#back_button_procs"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#back_button_procs=(back_button_procs)","text":"View source","title":"#back_button_procs="},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#current_page","text":"Returns the content for the current page View source","title":"#current_page"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#delete(*,**,&)","text":"View source","title":"#delete"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#each(*,**)","text":"View source","title":"#each"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#footer","text":"View source","title":"#footer"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#footer=(footer)","text":"View source","title":"#footer="},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#header","text":"View source","title":"#header"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#header=(header)","text":"View source","title":"#header="},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#index(*,**)","text":"View source","title":"#index"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#next_button_procs","text":"View source","title":"#next_button_procs"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#next_button_procs=(next_button_procs)","text":"View source","title":"#next_button_procs="},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#on_back(&)","text":"Adds a back button callback handler View source","title":"#on_back"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#on_next(&)","text":"Adds a next button callback handler View source","title":"#on_next"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#pages","text":"Returns each page, with it's items View source","title":"#pages"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#per_page","text":"View source","title":"#per_page"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#per_page=(per_page)","text":"View source","title":"#per_page="},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#prefix","text":"View source","title":"#prefix"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#prefix=(prefix)","text":"View source","title":"#prefix="},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#push(*,**)","text":"View source","title":"#push"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#results","text":"View source","title":"#results"},{"location":"api_reference/Tourmaline/PaginatedKeyboard/#Tourmaline::PaginatedKeyboard#results=(results)","text":"View source","title":"#results="},{"location":"api_reference/Tourmaline/ParseMode/","text":"enum Tourmaline::ParseMode # Parse mode for messages. Members # Normal = 0 # Markdown = 1 # MarkdownV2 = 2 # HTML = 3 # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #html? # View source #markdown? # View source #markdown_v2? # View source #normal? # View source #to_json ( json : JSON :: Builder ) # Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source","title":"ParseMode"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode","text":"Parse mode for messages.","title":"ParseMode"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode::Normal","text":"","title":"Normal"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode::Markdown","text":"","title":"Markdown"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode::MarkdownV2","text":"","title":"MarkdownV2"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode::HTML","text":"","title":"HTML"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode#html?","text":"View source","title":"#html?"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode#markdown?","text":"View source","title":"#markdown?"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode#markdown_v2?","text":"View source","title":"#markdown_v2?"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode#normal?","text":"View source","title":"#normal?"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode#to_json(json)","text":"Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source","title":"#to_json"},{"location":"api_reference/Tourmaline/PassportData/","text":"class Tourmaline::PassportData inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #credentials : EncryptedCredentials # View source #data : Array ( EncryptedPassportElement ) # View source","title":"PassportData"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData","text":"","title":"PassportData"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData#credentials","text":"View source","title":"#credentials"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData#data","text":"View source","title":"#data"},{"location":"api_reference/Tourmaline/PassportElementError/","text":"class Tourmaline::PassportElementError inherits Reference # Included modules JSON::Serializable Tourmaline::Model Direct known subclasses Tourmaline::PassportElementErrorDataField Tourmaline::PassportElementErrorFile Tourmaline::PassportElementErrorFiles Tourmaline::PassportElementErrorFrontSide Tourmaline::PassportElementErrorReverseSide Tourmaline::PassportElementErrorSelfie Tourmaline::PassportElementErrorTranslationFile Tourmaline::PassportElementErrorTranslationFiles Tourmaline::PassportElementErrorUnspecified Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( ** params ) # View source Methods # #message : String # View source #source : String # View source #type : String # View source","title":"PassportElementError"},{"location":"api_reference/Tourmaline/PassportElementError/#Tourmaline::PassportElementError","text":"","title":"PassportElementError"},{"location":"api_reference/Tourmaline/PassportElementError/#Tourmaline::PassportElementError-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementError/#Tourmaline::PassportElementError.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementError/#Tourmaline::PassportElementError-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementError/#Tourmaline::PassportElementError#message","text":"View source","title":"#message"},{"location":"api_reference/Tourmaline/PassportElementError/#Tourmaline::PassportElementError#source","text":"View source","title":"#source"},{"location":"api_reference/Tourmaline/PassportElementError/#Tourmaline::PassportElementError#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/","text":"class Tourmaline::PassportElementErrorDataField inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #data_hash : String # View source #field_name : String # View source","title":"PassportElementErrorDataField"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField","text":"","title":"PassportElementErrorDataField"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField#data_hash","text":"View source","title":"#data_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField#field_name","text":"View source","title":"#field_name"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/","text":"class Tourmaline::PassportElementErrorFile inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_hash : String # View source","title":"PassportElementErrorFile"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile","text":"","title":"PassportElementErrorFile"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile#file_hash","text":"View source","title":"#file_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/","text":"class Tourmaline::PassportElementErrorFiles inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_hashes : Array ( String ) # View source","title":"PassportElementErrorFiles"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles","text":"","title":"PassportElementErrorFiles"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles#file_hashes","text":"View source","title":"#file_hashes"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/","text":"class Tourmaline::PassportElementErrorFrontSide inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_hash : String # View source","title":"PassportElementErrorFrontSide"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide","text":"","title":"PassportElementErrorFrontSide"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide#file_hash","text":"View source","title":"#file_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/","text":"class Tourmaline::PassportElementErrorReverseSide inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_hash : String # View source","title":"PassportElementErrorReverseSide"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide","text":"","title":"PassportElementErrorReverseSide"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide#file_hash","text":"View source","title":"#file_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/","text":"class Tourmaline::PassportElementErrorSelfie inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_hash : String # View source","title":"PassportElementErrorSelfie"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie","text":"","title":"PassportElementErrorSelfie"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie#file_hash","text":"View source","title":"#file_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/","text":"class Tourmaline::PassportElementErrorTranslationFile inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_hash : String # View source","title":"PassportElementErrorTranslationFile"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile","text":"","title":"PassportElementErrorTranslationFile"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile#file_hash","text":"View source","title":"#file_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/","text":"class Tourmaline::PassportElementErrorTranslationFiles inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_hashes : Array ( String ) # View source","title":"PassportElementErrorTranslationFiles"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles","text":"","title":"PassportElementErrorTranslationFiles"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles#file_hashes","text":"View source","title":"#file_hashes"},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/","text":"class Tourmaline::PassportElementErrorUnspecified inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source","title":"PassportElementErrorUnspecified"},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified","text":"","title":"PassportElementErrorUnspecified"},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportFile/","text":"class Tourmaline::PassportFile inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_date : Time? # View source #file_id : String # View source #file_size : Int64 # View source #file_unique_id : String # View source","title":"PassportFile"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile","text":"","title":"PassportFile"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile#file_date","text":"View source","title":"#file_date"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Persistence/","text":"abstract class Tourmaline::Persistence inherits Reference # Abstract class meant to be a base for other persistence classes. The point of persistence (currently) is to allow Users and Chats to be saved as they're seen, and then provide a way for both to be fetched by either id or username. Example: bot = MyBot . new ( API_KEY , persistence : Tourmaline :: JsonPersistence . new ) # ... do some things if user = bot . persistence . get_user? ( \"foobar\" ) pp user end Direct known subclasses Tourmaline::HashPersistence Tourmaline::NilPersistence Constructors # .new # View source Methods # abstract #chat_exists? ( chat_id : Int ) : Bool # Returns true if the chat with the provided chat_id exists. View source abstract #chat_exists? ( username : String ) : Bool # Returns true if the chat with the provided username exists. View source abstract #cleanup # Gets called upon exit. It can be used to perform any necessary cleanup. View source abstract #get_chat ( chat_id : Int ) : Chat? # Fetches a chat by chat_id . Returns nil if the chat is not found. View source abstract #get_chat ( username : String ) : Chat? # Fetches a chat by username . Returns nil if the chat is not found. View source abstract #get_user ( user_id : Int ) : User? # Fetches a user by user_id . Returns nil if the user is not found. View source abstract #get_user ( username : String ) : User? # Fetches a user by username . Returns nil if the user is not found. View source abstract #handle_update ( update : Update ) # Takes an Update object, pulls out all unique Chat s and User s, and uses update_user and update_chat on each of them respectively. View source abstract #init # Gets called when the bot is initialized. This can be used for setup if you need access to the bot instance. View source abstract #update_chat ( chat : Chat ) : Chat # Create or update the provided Chat . View source abstract #update_user ( user : User ) : User # Create or update the provided User . View source abstract #user_exists? ( user_id : Int ) : Bool # Returns true if the user with the provided user_id exists. View source abstract #user_exists? ( usename : String ) : Bool # Returns true if the user with the provided username exists. View source","title":"Persistence"},{"location":"api_reference/Tourmaline/Persistence/#Tourmaline::Persistence","text":"Abstract class meant to be a base for other persistence classes. The point of persistence (currently) is to allow Users and Chats to be saved as they're seen, and then provide a way for both to be fetched by either id or username. Example: bot = MyBot . new ( API_KEY , persistence : Tourmaline :: JsonPersistence . new ) # ... do some things if user = bot . persistence . get_user? ( \"foobar\" ) pp user end","title":"Persistence"},{"location":"api_reference/Tourmaline/Persistence/#Tourmaline::Persistence-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Persistence/#Tourmaline::Persistence.new","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Persistence/#Tourmaline::Persistence-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Persistence/#Tourmaline::Persistence#chat_exists?(chat_id)","text":"Returns true if the chat with the provided chat_id exists. View source","title":"#chat_exists?"},{"location":"api_reference/Tourmaline/Persistence/#Tourmaline::Persistence#cleanup","text":"Gets called upon exit. It can be used to perform any necessary cleanup. View source","title":"#cleanup"},{"location":"api_reference/Tourmaline/Persistence/#Tourmaline::Persistence#get_chat(chat_id)","text":"Fetches a chat by chat_id . Returns nil if the chat is not found. View source","title":"#get_chat"},{"location":"api_reference/Tourmaline/Persistence/#Tourmaline::Persistence#get_user(user_id)","text":"Fetches a user by user_id . Returns nil if the user is not found. View source","title":"#get_user"},{"location":"api_reference/Tourmaline/Persistence/#Tourmaline::Persistence#handle_update(update)","text":"Takes an Update object, pulls out all unique Chat s and User s, and uses update_user and update_chat on each of them respectively. View source","title":"#handle_update"},{"location":"api_reference/Tourmaline/Persistence/#Tourmaline::Persistence#init","text":"Gets called when the bot is initialized. This can be used for setup if you need access to the bot instance. View source","title":"#init"},{"location":"api_reference/Tourmaline/Persistence/#Tourmaline::Persistence#update_chat(chat)","text":"Create or update the provided Chat . View source","title":"#update_chat"},{"location":"api_reference/Tourmaline/Persistence/#Tourmaline::Persistence#update_user(user)","text":"Create or update the provided User . View source","title":"#update_user"},{"location":"api_reference/Tourmaline/Persistence/#Tourmaline::Persistence#user_exists?(user_id)","text":"Returns true if the user with the provided user_id exists. View source","title":"#user_exists?"},{"location":"api_reference/Tourmaline/PhotoSize/","text":"class Tourmaline::PhotoSize inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_id : String # View source #file_size : Int64 # View source #file_unique_id : String # View source #height : Int32 # View source #width : Int32 # View source","title":"PhotoSize"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize","text":"","title":"PhotoSize"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#height","text":"View source","title":"#height"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#width","text":"View source","title":"#width"},{"location":"api_reference/Tourmaline/Poll/","text":"class Tourmaline::Poll inherits Reference # This object contains information about a poll. Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #allows_multiple_answers : Bool # View source #correct_option_id : Int32? # View source #explanation_entities : Array ( Tourmaline::MessageEntity ) # View source #id : String # View source #is_anonymous : Bool # View source #is_closed : Bool # View source #options : Array ( PollOption ) # View source #question : String # View source #total_voter_count : Int32 # View source #type : Type # View source","title":"Poll"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll","text":"This object contains information about a poll.","title":"Poll"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#allows_multiple_answers","text":"View source","title":"#allows_multiple_answers"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#correct_option_id","text":"View source","title":"#correct_option_id"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#explanation_entities","text":"View source","title":"#explanation_entities"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#is_anonymous","text":"View source","title":"#is_anonymous"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#is_closed","text":"View source","title":"#is_closed"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#options","text":"View source","title":"#options"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#question","text":"View source","title":"#question"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#total_voter_count","text":"View source","title":"#total_voter_count"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/Poll/Type/","text":"enum Tourmaline::Poll::Type # Members # Quiz = 0 # Regular = 1 # Methods # #quiz? # View source #regular? # View source #to_s # Returns a String representation of this enum member. In the case of regular enums, this is just the name of the member. In the case of flag enums, it's the names joined by vertical bars, or \"None\", if the value is zero. If an enum's value doesn't match a member's value, the raw value is returned as a string. Color :: Red . to_s # => \"Red\" IOMode :: None . to_s # => \"None\" ( IOMode :: Read | IOMode :: Write ) . to_s # => \"Read | Write\" Color . new ( 10 ) . to_s # => \"10\" View source","title":"Type"},{"location":"api_reference/Tourmaline/Poll/Type/#Tourmaline::Poll::Type","text":"","title":"Type"},{"location":"api_reference/Tourmaline/Poll/Type/#Tourmaline::Poll::Type-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/Poll/Type/#Tourmaline::Poll::Type::Quiz","text":"","title":"Quiz"},{"location":"api_reference/Tourmaline/Poll/Type/#Tourmaline::Poll::Type::Regular","text":"","title":"Regular"},{"location":"api_reference/Tourmaline/Poll/Type/#Tourmaline::Poll::Type-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Poll/Type/#Tourmaline::Poll::Type#quiz?","text":"View source","title":"#quiz?"},{"location":"api_reference/Tourmaline/Poll/Type/#Tourmaline::Poll::Type#regular?","text":"View source","title":"#regular?"},{"location":"api_reference/Tourmaline/Poll/Type/#Tourmaline::Poll::Type#to_s","text":"Returns a String representation of this enum member. In the case of regular enums, this is just the name of the member. In the case of flag enums, it's the names joined by vertical bars, or \"None\", if the value is zero. If an enum's value doesn't match a member's value, the raw value is returned as a string. Color :: Red . to_s # => \"Red\" IOMode :: None . to_s # => \"None\" ( IOMode :: Read | IOMode :: Write ) . to_s # => \"Read | Write\" Color . new ( 10 ) . to_s # => \"10\" View source","title":"#to_s"},{"location":"api_reference/Tourmaline/PollAnswer/","text":"class Tourmaline::PollAnswer inherits Reference # This object contains information about one answer option in a poll. Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #option_ids : Array ( Int32 ) # View source #poll_id : String # View source #user : User # View source","title":"PollAnswer"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer","text":"This object contains information about one answer option in a poll.","title":"PollAnswer"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer#option_ids","text":"View source","title":"#option_ids"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer#poll_id","text":"View source","title":"#poll_id"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer#user","text":"View source","title":"#user"},{"location":"api_reference/Tourmaline/PollOption/","text":"class Tourmaline::PollOption inherits Reference # This object contains information about one answer option in a poll. Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #text : String # View source #voter_count : Int32 # View source","title":"PollOption"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption","text":"This object contains information about one answer option in a poll.","title":"PollOption"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption#text","text":"View source","title":"#text"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption#voter_count","text":"View source","title":"#voter_count"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/","text":"class Tourmaline::PreCheckoutQuery inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #answer ( ok , ** kwargs ) # View source #currency : String # View source #from : User # View source #id : String # View source #invoice_payload : String # View source #order_info : OrderInfo? # View source #shipping_option_id : String? # View source #total_amount : Int32 # View source","title":"PreCheckoutQuery"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery","text":"","title":"PreCheckoutQuery"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#answer(ok,**)","text":"View source","title":"#answer"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#currency","text":"View source","title":"#currency"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#from","text":"View source","title":"#from"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#invoice_payload","text":"View source","title":"#invoice_payload"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#order_info","text":"View source","title":"#order_info"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#shipping_option_id","text":"View source","title":"#shipping_option_id"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#total_amount","text":"View source","title":"#total_amount"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/","text":"class Tourmaline::ProximityAlertTriggered inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #distance : Int32 # View source #traveler : User # View source #watcher : User # View source","title":"ProximityAlertTriggered"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered","text":"","title":"ProximityAlertTriggered"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered#distance","text":"View source","title":"#distance"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered#traveler","text":"View source","title":"#traveler"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered#watcher","text":"View source","title":"#watcher"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/","text":"class Tourmaline::ReplyKeyboardMarkup inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( keyboard = [] of Array ( KeyboardButton ), resize_keyboard = false , one_time_keyboard = false , input_field_placeholder = nil , selective = false ) # View source Class methods # .build ( * args , columns = nil # View source Methods # #<< ( row : Int32 , key : KeyboardButton ) # View source #<< ( keys : Array ( KeyboardButton )) # View source #delete_row ( row ) # View source #input_field_placeholder : String? # View source #input_field_placeholder= ( input_field_placeholder : String? ) # View source #keyboard : Array ( Array ( KeyboardButton )) # View source #keyboard= ( keyboard : Array ( Array ( KeyboardButton ))) # View source #one_time_keyboard : Bool # View source #one_time_keyboard= ( one_time_keyboard : Bool ) # View source #resize_keyboard : Bool # View source #resize_keyboard= ( resize_keyboard : Bool ) # View source #selective : Bool # View source #selective= ( selective : Bool ) # View source #size # View source #swap_row ( row : Int32 , keys : Array ( KeyboardButton )) # View source","title":"ReplyKeyboardMarkup"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup","text":"","title":"ReplyKeyboardMarkup"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup.build(*,columns,**,&)","text":"View source","title":".build"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#<<(row,key)","text":"View source","title":"#&lt;&lt;"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#delete_row(row)","text":"View source","title":"#delete_row"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#input_field_placeholder","text":"View source","title":"#input_field_placeholder"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#input_field_placeholder=(input_field_placeholder)","text":"View source","title":"#input_field_placeholder="},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#keyboard","text":"View source","title":"#keyboard"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#keyboard=(keyboard)","text":"View source","title":"#keyboard="},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#one_time_keyboard","text":"View source","title":"#one_time_keyboard"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#one_time_keyboard=(one_time_keyboard)","text":"View source","title":"#one_time_keyboard="},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#resize_keyboard","text":"View source","title":"#resize_keyboard"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#resize_keyboard=(resize_keyboard)","text":"View source","title":"#resize_keyboard="},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#selective","text":"View source","title":"#selective"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#selective=(selective)","text":"View source","title":"#selective="},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#size","text":"View source","title":"#size"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#swap_row(row,keys)","text":"View source","title":"#swap_row"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/","text":"class Tourmaline::ReplyKeyboardMarkup::Builder inherits Tourmaline::KeyboardBuilder # Constructors # .new ( force_reply = false , remove_keyboard = false , selective = false , keyboard = [] of T , resize = false , one_time = false ) # View source Methods # #contact_request_button ( text ) # View source #keyboard ( columns = nil ) : G # View source #location_request_button ( text ) # View source #poll_request_button ( text , type : Poll::Type ) # View source #text_button ( text ) # View source","title":"Builder"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder","text":"","title":"Builder"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder.new(force_reply,remove_keyboard,selective,keyboard,resize,one_time)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder#contact_request_button(text)","text":"View source","title":"#contact_request_button"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder#keyboard(columns)","text":"View source","title":"#keyboard"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder#location_request_button(text)","text":"View source","title":"#location_request_button"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder#poll_request_button(text,type)","text":"View source","title":"#poll_request_button"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder#text_button(text)","text":"View source","title":"#text_button"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/","text":"class Tourmaline::ReplyKeyboardRemove inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( selective : Bool? , remove_keyboard : Bool = true ) # View source Methods # #remove_keyboard : Bool # View source #selective : Bool? # View source","title":"ReplyKeyboardRemove"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove","text":"","title":"ReplyKeyboardRemove"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove#remove_keyboard","text":"View source","title":"#remove_keyboard"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove#selective","text":"View source","title":"#selective"},{"location":"api_reference/Tourmaline/RoutedMenu/","text":"class Tourmaline::RoutedMenu inherits Reference # The RoutedMenu helper class offers a simple to use DSL for creating menus, potentially with multiple levels. Includes support for HTTP like routing, route history, back buttons, and more. Routes are hashed and shortened before being sent, which means you have no need to worry about the typical 65 character callback query data limit. Example: MENU = RoutedMenu . build do route \"/\" do content \"Some content to go in the home route\" buttons do route_button \"Next page\" , \"/page_2\" end end route \"/page_2\" do content \"...\" buttons do back_button \"Back\" end end end # in a command send_menu ( chat_id , MENU ) Constructors # .new ( routes = {} of String => Page , start_route = \"/\" , group = Helpers . random_string ( 8 )) # View source Class methods # .build ( starting_route = \"/\" # View source .hash_route ( route : String ) # View source Methods # #add_route ( route , page ) # View source #client : Client # #client= ( client : Client ) # View source #client? : Client? # #current_page # View source #current_route : String # View source #event_handler : EventHandler # View source #handle_button_click ( ctx ) # View source #route_history : Array ( String ) # View source #routes : Hash ( String , Page ) # View source","title":"RoutedMenu"},{"location":"api_reference/Tourmaline/RoutedMenu/#Tourmaline::RoutedMenu","text":"The RoutedMenu helper class offers a simple to use DSL for creating menus, potentially with multiple levels. Includes support for HTTP like routing, route history, back buttons, and more. Routes are hashed and shortened before being sent, which means you have no need to worry about the typical 65 character callback query data limit. Example: MENU = RoutedMenu . build do route \"/\" do content \"Some content to go in the home route\" buttons do route_button \"Next page\" , \"/page_2\" end end route \"/page_2\" do content \"...\" buttons do back_button \"Back\" end end end # in a command send_menu ( chat_id , MENU )","title":"RoutedMenu"},{"location":"api_reference/Tourmaline/RoutedMenu/#Tourmaline::RoutedMenu-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/RoutedMenu/#Tourmaline::RoutedMenu.new(routes,start_route,group)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/RoutedMenu/#Tourmaline::RoutedMenu-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/RoutedMenu/#Tourmaline::RoutedMenu.build(starting_route,**,&)","text":"View source","title":".build"},{"location":"api_reference/Tourmaline/RoutedMenu/#Tourmaline::RoutedMenu.hash_route(route)","text":"View source","title":".hash_route"},{"location":"api_reference/Tourmaline/RoutedMenu/#Tourmaline::RoutedMenu-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/RoutedMenu/#Tourmaline::RoutedMenu#add_route(route,page)","text":"View source","title":"#add_route"},{"location":"api_reference/Tourmaline/RoutedMenu/#Tourmaline::RoutedMenu#client","text":"","title":"#client"},{"location":"api_reference/Tourmaline/RoutedMenu/#Tourmaline::RoutedMenu#client=(client)","text":"View source","title":"#client="},{"location":"api_reference/Tourmaline/RoutedMenu/#Tourmaline::RoutedMenu#client?","text":"","title":"#client?"},{"location":"api_reference/Tourmaline/RoutedMenu/#Tourmaline::RoutedMenu#current_page","text":"View source","title":"#current_page"},{"location":"api_reference/Tourmaline/RoutedMenu/#Tourmaline::RoutedMenu#current_route","text":"View source","title":"#current_route"},{"location":"api_reference/Tourmaline/RoutedMenu/#Tourmaline::RoutedMenu#event_handler","text":"View source","title":"#event_handler"},{"location":"api_reference/Tourmaline/RoutedMenu/#Tourmaline::RoutedMenu#handle_button_click(ctx)","text":"View source","title":"#handle_button_click"},{"location":"api_reference/Tourmaline/RoutedMenu/#Tourmaline::RoutedMenu#route_history","text":"View source","title":"#route_history"},{"location":"api_reference/Tourmaline/RoutedMenu/#Tourmaline::RoutedMenu#routes","text":"View source","title":"#routes"},{"location":"api_reference/Tourmaline/RoutedMenu/Builder/","text":"class Tourmaline::RoutedMenu::Builder inherits Reference # Constructors # .new ( routes = {} of String => Page ) # View source Methods # #route # View source #routes : Hash ( String , Page ) # View source","title":"Builder"},{"location":"api_reference/Tourmaline/RoutedMenu/Builder/#Tourmaline::RoutedMenu::Builder","text":"","title":"Builder"},{"location":"api_reference/Tourmaline/RoutedMenu/Builder/#Tourmaline::RoutedMenu::Builder-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/RoutedMenu/Builder/#Tourmaline::RoutedMenu::Builder.new(routes)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/RoutedMenu/Builder/#Tourmaline::RoutedMenu::Builder-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/RoutedMenu/Builder/#Tourmaline::RoutedMenu::Builder#route(path,&)","text":"View source","title":"#route"},{"location":"api_reference/Tourmaline/RoutedMenu/Builder/#Tourmaline::RoutedMenu::Builder#routes","text":"View source","title":"#routes"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/","text":"class Tourmaline::RoutedMenu::Page inherits Reference # Constructors # .new ( content = \"\" , buttons = InlineKeyboardMarkup . new , parse_mode = nil , link_preview = false ) # View source Methods # #buttons : InlineKeyboardMarkup # View source #buttons= ( buttons : InlineKeyboardMarkup ) # View source #content : String # View source #content= ( content : String ) # View source #link_preview : Bool # View source #link_preview= ( link_preview : Bool ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source","title":"Page"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/#Tourmaline::RoutedMenu::Page","text":"","title":"Page"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/#Tourmaline::RoutedMenu::Page-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/#Tourmaline::RoutedMenu::Page.new(content,buttons,parse_mode,link_preview)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/#Tourmaline::RoutedMenu::Page-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/#Tourmaline::RoutedMenu::Page#buttons","text":"View source","title":"#buttons"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/#Tourmaline::RoutedMenu::Page#buttons=(buttons)","text":"View source","title":"#buttons="},{"location":"api_reference/Tourmaline/RoutedMenu/Page/#Tourmaline::RoutedMenu::Page#content","text":"View source","title":"#content"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/#Tourmaline::RoutedMenu::Page#content=(content)","text":"View source","title":"#content="},{"location":"api_reference/Tourmaline/RoutedMenu/Page/#Tourmaline::RoutedMenu::Page#link_preview","text":"View source","title":"#link_preview"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/#Tourmaline::RoutedMenu::Page#link_preview=(link_preview)","text":"View source","title":"#link_preview="},{"location":"api_reference/Tourmaline/RoutedMenu/Page/#Tourmaline::RoutedMenu::Page#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/#Tourmaline::RoutedMenu::Page#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/RoutedMenu/Page/Builder/","text":"class Tourmaline::RoutedMenu::Page::Builder inherits Reference # Constructors # .new # View source Methods # #buttons ( * args , columns = nil # View source #content ( content ) # View source #link_preview ( link_preview : Bool ) # View source #page : Page # View source #parse_mode ( parse_mode : ParseMode ) # View source","title":"Builder"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/Builder/#Tourmaline::RoutedMenu::Page::Builder","text":"","title":"Builder"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/Builder/#Tourmaline::RoutedMenu::Page::Builder-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/Builder/#Tourmaline::RoutedMenu::Page::Builder.new","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/Builder/#Tourmaline::RoutedMenu::Page::Builder-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/Builder/#Tourmaline::RoutedMenu::Page::Builder#buttons(*,columns,**,&)","text":"View source","title":"#buttons"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/Builder/#Tourmaline::RoutedMenu::Page::Builder#content(content)","text":"View source","title":"#content"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/Builder/#Tourmaline::RoutedMenu::Page::Builder#link_preview(link_preview)","text":"View source","title":"#link_preview"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/Builder/#Tourmaline::RoutedMenu::Page::Builder#page","text":"View source","title":"#page"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/Builder/#Tourmaline::RoutedMenu::Page::Builder#parse_mode(parse_mode)","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/KeyboardBuilder/","text":"class Tourmaline::RoutedMenu::Page::KeyboardBuilder inherits Tourmaline::InlineKeyboardMarkup::Builder # Constructors # .new ( force_reply = false , remove_keyboard = false , selective = false , keyboard = [] of T , resize = false , one_time = false ) # View source Methods # #back_button ( title = \"Back\" ) # View source #route_button ( title , to route ) # View source","title":"KeyboardBuilder"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/KeyboardBuilder/#Tourmaline::RoutedMenu::Page::KeyboardBuilder","text":"","title":"KeyboardBuilder"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/KeyboardBuilder/#Tourmaline::RoutedMenu::Page::KeyboardBuilder-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/KeyboardBuilder/#Tourmaline::RoutedMenu::Page::KeyboardBuilder.new(force_reply,remove_keyboard,selective,keyboard,resize,one_time)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/KeyboardBuilder/#Tourmaline::RoutedMenu::Page::KeyboardBuilder-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/KeyboardBuilder/#Tourmaline::RoutedMenu::Page::KeyboardBuilder#back_button(title)","text":"View source","title":"#back_button"},{"location":"api_reference/Tourmaline/RoutedMenu/Page/KeyboardBuilder/#Tourmaline::RoutedMenu::Page::KeyboardBuilder#route_button(title,to)","text":"View source","title":"#route_button"},{"location":"api_reference/Tourmaline/ShippingAddress/","text":"class Tourmaline::ShippingAddress inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #city : String # View source #country_code : String # View source #post_code : String # View source #state : String # View source #street_line1 : String # View source #street_line2 : String # View source","title":"ShippingAddress"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress","text":"","title":"ShippingAddress"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#city","text":"View source","title":"#city"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#country_code","text":"View source","title":"#country_code"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#post_code","text":"View source","title":"#post_code"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#state","text":"View source","title":"#state"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#street_line1","text":"View source","title":"#street_line1"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#street_line2","text":"View source","title":"#street_line2"},{"location":"api_reference/Tourmaline/ShippingOption/","text":"class Tourmaline::ShippingOption inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( id : String , title : String , prices : Array ( LabeledPrice )) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #id : String # View source #prices : Array ( LabeledPrice ) # View source #title : String # View source","title":"ShippingOption"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption","text":"","title":"ShippingOption"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption.new(id,title,prices)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption#prices","text":"View source","title":"#prices"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/ShippingQuery/","text":"class Tourmaline::ShippingQuery inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( id : Strig , from : User , invoice_payload : String , shipping_address : ShippingAddress ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #answer ( ok , ** kwargs ) # View source #from : User # View source #id : String # View source #invoice_payload : String # View source #shipping_address : ShippingAddress # View source","title":"ShippingQuery"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery","text":"","title":"ShippingQuery"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery.new(id,from,invoice_payload,shipping_address)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery#answer(ok,**)","text":"View source","title":"#answer"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery#from","text":"View source","title":"#from"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery#invoice_payload","text":"View source","title":"#invoice_payload"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery#shipping_address","text":"View source","title":"#shipping_address"},{"location":"api_reference/Tourmaline/Stage/","text":"class Tourmaline::Stage(T) inherits Reference # FSM (Finite-state machine) like functionality for Tourmaline in the form of a Stage. Stage allows you to create conversations/wizards which maintain their own state for a particular user and/or chat. For an example of a stage bot, check out examples/stage_bot.cr Constructors # .new ( client : Client , * , context : T , chat_id = nil , user_id = nil , group = nil , priority = 0 , ** handler_options ) # Create a new Stage instance View source Class methods # .enter ( * args , ** options ) # Create a new Stage instance and start it immediately View source Methods # #active? : Bool # True if this Stage is currently active View source #await_response ( & block : Context -> ) # Allows you to await a response to a step, yielding the awaited update to the block. View source #chat_id : Int :: Primitive? # The chat id that this stage applies to If nil, this stage will be usable across all chats #chat_id= ( chat_id : Int :: Primitive? ) # The chat id that this stage applies to If nil, this stage will be usable across all chats View source #chat_id? : Int :: Primitive | Nil? # The chat id that this stage applies to If nil, this stage will be usable across all chats #client : Client # The client controlling this stage View source #context : T # The context for this stage View source #context= ( context : T ) # The context for this stage View source #current_step : String? # The key for the currently active step View source #exit # Stop the current Stage and remove the event handler from the client. View source #initial_step : String? # The key to use for the initial step View source #on ( step , proc : Client -> , initial = false ) # Add an event handler for the given event name using the supplied proc View source #on ( step , initial = false , & block : Client -> ) # Add an event handler for the given step name using the supplied block View source #on_exit ( & block : T -> ) # Add a handler that's called when this Stage is exited View source #on_start ( & block : -> ) # Add a handler that's called when this Stage is started View source #start # Start the current Stage, setting the given initial step as the current step and adding an event handler to the client. View source #steps # A hash containing the steps in this stage View source #transition ( event ) # Set the current step to the given value View source #update_history : Array ( Update ) # Maintains a history of updates that match the given chat_id and/or user_id. View source #user_id : Int :: Primitive? # The user id that this stage applies to If nil, this stage will be usable across all users #user_id= ( user_id : Int :: Primitive? ) # The user id that this stage applies to If nil, this stage will be usable across all users View source #user_id? : Int :: Primitive | Nil? # The user id that this stage applies to If nil, this stage will be usable across all users Macros # method_missing ( call ) # View source","title":"Stage"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage","text":"FSM (Finite-state machine) like functionality for Tourmaline in the form of a Stage. Stage allows you to create conversations/wizards which maintain their own state for a particular user and/or chat. For an example of a stage bot, check out examples/stage_bot.cr","title":"Stage"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage.new(client,*,context,chat_id,user_id,group,priority,**)","text":"Create a new Stage instance View source","title":".new"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage.enter(*,**)","text":"Create a new Stage instance and start it immediately View source","title":".enter"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#active?","text":"True if this Stage is currently active View source","title":"#active?"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#await_response(&)","text":"Allows you to await a response to a step, yielding the awaited update to the block. View source","title":"#await_response"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#chat_id","text":"The chat id that this stage applies to If nil, this stage will be usable across all chats","title":"#chat_id"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#chat_id=(chat_id)","text":"The chat id that this stage applies to If nil, this stage will be usable across all chats View source","title":"#chat_id="},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#chat_id?","text":"The chat id that this stage applies to If nil, this stage will be usable across all chats","title":"#chat_id?"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#client","text":"The client controlling this stage View source","title":"#client"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#context","text":"The context for this stage View source","title":"#context"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#context=(context)","text":"The context for this stage View source","title":"#context="},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#current_step","text":"The key for the currently active step View source","title":"#current_step"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#exit","text":"Stop the current Stage and remove the event handler from the client. View source","title":"#exit"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#initial_step","text":"The key to use for the initial step View source","title":"#initial_step"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#on(step,proc,initial)","text":"Add an event handler for the given event name using the supplied proc View source","title":"#on"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#on_exit(&)","text":"Add a handler that's called when this Stage is exited View source","title":"#on_exit"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#on_start(&)","text":"Add a handler that's called when this Stage is started View source","title":"#on_start"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#start","text":"Start the current Stage, setting the given initial step as the current step and adding an event handler to the client. View source","title":"#start"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#steps","text":"A hash containing the steps in this stage View source","title":"#steps"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#transition(event)","text":"Set the current step to the given value View source","title":"#transition"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#update_history","text":"Maintains a history of updates that match the given chat_id and/or user_id. View source","title":"#update_history"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#user_id","text":"The user id that this stage applies to If nil, this stage will be usable across all users","title":"#user_id"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#user_id=(user_id)","text":"The user id that this stage applies to If nil, this stage will be usable across all users View source","title":"#user_id="},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage#user_id?","text":"The user id that this stage applies to If nil, this stage will be usable across all users","title":"#user_id?"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage-macros","text":"","title":"Macros"},{"location":"api_reference/Tourmaline/Stage/#Tourmaline::Stage:method_missing(call)","text":"View source","title":"method_missing"},{"location":"api_reference/Tourmaline/Stage/Context/","text":"struct Tourmaline::Stage::Context inherits Struct # Constructors # .new ( update : Update , message : Message , text : String ) # View source Methods # #clone # View source #copy_with ( update _update = @update , message _message = @message , text _text = @text ) # View source #message : Message # #text : String # #update : Update #","title":"Context"},{"location":"api_reference/Tourmaline/Stage/Context/#Tourmaline::Stage::Context","text":"","title":"Context"},{"location":"api_reference/Tourmaline/Stage/Context/#Tourmaline::Stage::Context-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Stage/Context/#Tourmaline::Stage::Context.new(update,message,text)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Stage/Context/#Tourmaline::Stage::Context-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Stage/Context/#Tourmaline::Stage::Context#clone","text":"View source","title":"#clone"},{"location":"api_reference/Tourmaline/Stage/Context/#Tourmaline::Stage::Context#copy_with(update,message,text)","text":"View source","title":"#copy_with"},{"location":"api_reference/Tourmaline/Stage/Context/#Tourmaline::Stage::Context#message","text":"","title":"#message"},{"location":"api_reference/Tourmaline/Stage/Context/#Tourmaline::Stage::Context#text","text":"","title":"#text"},{"location":"api_reference/Tourmaline/Stage/Context/#Tourmaline::Stage::Context#update","text":"","title":"#update"},{"location":"api_reference/Tourmaline/Stage/Step/","text":"annotation Tourmaline::Stage::Step # Annotation for creating a step from a method. Example: @[ Step ( :foo , initial : true ) ] def foo_step ( update ) ... end","title":"Step"},{"location":"api_reference/Tourmaline/Stage/Step/#Tourmaline::Stage::Step","text":"Annotation for creating a step from a method. Example: @[ Step ( :foo , initial : true ) ] def foo_step ( update ) ... end","title":"Step"},{"location":"api_reference/Tourmaline/Sticker/","text":"class Tourmaline::Sticker inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #animated? : Bool # View source #emoji : String? # View source #file_id : String # View source #file_size : Int32? # View source #file_unique_id : String # View source #height : Int32 # View source #mask_position : MaskPosition? # View source #set_name : String? # View source #thumb : PhotoSize? # View source #width : Int32 # View source","title":"Sticker"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker","text":"","title":"Sticker"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#animated?","text":"View source","title":"#animated?"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#emoji","text":"View source","title":"#emoji"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#height","text":"View source","title":"#height"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#mask_position","text":"View source","title":"#mask_position"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#set_name","text":"View source","title":"#set_name"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#thumb","text":"View source","title":"#thumb"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#width","text":"View source","title":"#width"},{"location":"api_reference/Tourmaline/StickerSet/","text":"class Tourmaline::StickerSet inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #contains_masks : Bool # View source #is_animated : Bool # View source #name : String # View source #stickers : Array ( Sticker ) # View source #thumb : PhotoSize? # View source #title : String # View source","title":"StickerSet"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet","text":"","title":"StickerSet"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#contains_masks","text":"View source","title":"#contains_masks"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#is_animated","text":"View source","title":"#is_animated"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#name","text":"View source","title":"#name"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#stickers","text":"View source","title":"#stickers"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#thumb","text":"View source","title":"#thumb"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/SuccessfulPayment/","text":"class Tourmaline::SuccessfulPayment inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #currency : String # View source #invoice_payload : String # View source #order_info : OrderInfo? # View source #provider_payment_charge_id : String # View source #shipping_option_id : String? # View source #telegram_payment_charge_id : String # View source #total_amount : Int32 # View source","title":"SuccessfulPayment"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment","text":"","title":"SuccessfulPayment"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#currency","text":"View source","title":"#currency"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#invoice_payload","text":"View source","title":"#invoice_payload"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#order_info","text":"View source","title":"#order_info"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#provider_payment_charge_id","text":"View source","title":"#provider_payment_charge_id"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#shipping_option_id","text":"View source","title":"#shipping_option_id"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#telegram_payment_charge_id","text":"View source","title":"#telegram_payment_charge_id"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#total_amount","text":"View source","title":"#total_amount"},{"location":"api_reference/Tourmaline/TFile/","text":"class Tourmaline::TFile inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_id : String # View source #file_path : String? # View source #file_size : Int64? # View source #file_unique_id : String # View source #link # View source","title":"TFile"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile","text":"","title":"TFile"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile#file_path","text":"View source","title":"#file_path"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile#link","text":"View source","title":"#link"},{"location":"api_reference/Tourmaline/Update/","text":"class Tourmaline::Update inherits Reference # This object represents a Telegram user or bot. # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #callback_query : CallbackQuery? # Optional. New incoming callback query View source #channel_post : Message? # Optional. New incoming channel post of any kind \u2014 text, photo, sticker, etc. View source #chat_member : ChatMemberUpdated? # Optional. A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify \u201cchat_member\u201d in the list of allowed_updates to receive these updates. View source #chats ( & block : Chat -> ) # Yields each unique chat in this update to the block. View source #chats # Returns all unique chats included in this update View source #chosen_inline_result : ChosenInlineResult? # Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot. View source #context : Middleware::Context # View source #edited_channel_post : Message? # Optional. New version of a channel post that is known to the bot and was edited View source #edited_message : Message? # Optional. New version of a message that is known to the bot and was edited View source #inline_query : InlineQuery? # Optional. New incoming inline query View source #message : Message? # Optional. New incoming message of any kind \u2014 text, photo, sticker, etc. View source #my_chat_member : ChatMemberUpdated? # Optional. The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user. View source #poll : Poll? # Optional. New poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot View source #poll_answer : PollAnswer? # Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself. View source #pre_checkout_query : PreCheckoutQuery? # Optional. New incoming pre-checkout query. Contains full information about checkout View source #shipping_query : ShippingQuery? # Optional. New incoming shipping query. Only for invoices with flexible price View source #update_id : Int64 # The update\u2018s unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you\u2019re using Webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially. View source #users # Returns all users included in this update as a Set View source #users ( & block : User -> ) # Yields each unique user in this update to the block. View source","title":"Update"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update","text":"","title":"Update"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update--this-object-represents-a-telegram-user-or-bot","text":"","title":"This object represents a Telegram user or bot."},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#callback_query","text":"Optional. New incoming callback query View source","title":"#callback_query"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#channel_post","text":"Optional. New incoming channel post of any kind \u2014 text, photo, sticker, etc. View source","title":"#channel_post"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chat_member","text":"Optional. A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify \u201cchat_member\u201d in the list of allowed_updates to receive these updates. View source","title":"#chat_member"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chats(&)","text":"Yields each unique chat in this update to the block. View source","title":"#chats"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chosen_inline_result","text":"Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot. View source","title":"#chosen_inline_result"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#context","text":"View source","title":"#context"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#edited_channel_post","text":"Optional. New version of a channel post that is known to the bot and was edited View source","title":"#edited_channel_post"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#edited_message","text":"Optional. New version of a message that is known to the bot and was edited View source","title":"#edited_message"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#inline_query","text":"Optional. New incoming inline query View source","title":"#inline_query"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#message","text":"Optional. New incoming message of any kind \u2014 text, photo, sticker, etc. View source","title":"#message"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#my_chat_member","text":"Optional. The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user. View source","title":"#my_chat_member"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#poll","text":"Optional. New poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot View source","title":"#poll"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#poll_answer","text":"Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself. View source","title":"#poll_answer"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#pre_checkout_query","text":"Optional. New incoming pre-checkout query. Contains full information about checkout View source","title":"#pre_checkout_query"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#shipping_query","text":"Optional. New incoming shipping query. Only for invoices with flexible price View source","title":"#shipping_query"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#update_id","text":"The update\u2018s unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you\u2019re using Webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially. View source","title":"#update_id"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#users","text":"Returns all users included in this update as a Set View source","title":"#users"},{"location":"api_reference/Tourmaline/UpdateAction/","text":"enum Tourmaline::UpdateAction # The available event types for EventHandler . Members # Update = 0 # Message = 1 # ReplyMessage = 2 # EditedMessage = 3 # CallbackQuery = 4 # InlineQuery = 5 # ShippingQuery = 6 # PreCheckoutQuery = 7 # ChosenInlineResult = 8 # ChannelPost = 9 # EditedChannelPost = 10 # MyChatMember = 11 # ChatMember = 12 # ViaBot = 13 # Text = 14 # Caption = 15 # Audio = 16 # Document = 17 # Photo = 18 # Sticker = 19 # Video = 20 # Voice = 21 # Contact = 22 # Location = 23 # Venue = 24 # NewChatMembers = 25 # LeftChatMember = 26 # NewChatTitle = 27 # NewChatPhoto = 28 # DeleteChatPhoto = 29 # GroupChatCreated = 30 # MessageAutoDeleteTimerChanged = 31 # MigrateToChatId = 32 # SupergroupChatCreated = 33 # ChannelChatCreated = 34 # MigrateFromChatId = 35 # PinnedMessage = 36 # Game = 37 # Poll = 38 # VideoNote = 39 # Invoice = 40 # SuccessfulPayment = 41 # ConnectedWebsite = 42 # PassportData = 43 # PollAnswer = 44 # ProximityAlertTriggered = 45 # VoiceChatScheduled = 46 # VoiceChatStarted = 47 # VoiceChatEnded = 48 # VoiceChatParticipantsInvited = 49 # Dice = 50 # Dart = 51 # \ud83c\udfb2 Basketball = 52 # \ud83c\udfaf Football = 53 # \ud83c\udfc0 Soccerball = 54 # \u26bd\ufe0f SlotMachine = 55 # \u26bd\ufe0f but American Bowling = 56 # \ud83c\udfb0 BotMessage = 57 # UserMessage = 58 # ChannelMessage = 59 # ChannelForwardMessage = 60 # AnonymousAdminMessage = 61 # MentionEntity = 62 # TextMentionEntity = 63 # HashtagEntity = 64 # CashtagEntity = 65 # BotCommandEntity = 66 # UrlEntity = 67 # EmailEntity = 68 # PhoneNumberEntity = 69 # BoldEntity = 70 # ItalicEntity = 71 # CodeEntity = 72 # PreEntity = 73 # TextLinkEntity = 74 # UnderlineEntity = 75 # StrikethroughEntity = 76 # Class methods # .from_update ( update : Tourmaline::Update ) # Takes an Update and returns an array of update actions. View source .to_a # View source Methods # #anonymous_admin_message? # View source #audio? # View source #basketball? # View source #bold_entity? # View source #bot_command_entity? # View source #bot_message? # View source #bowling? # View source #callback_query? # View source #caption? # View source #cashtag_entity? # View source #channel_chat_created? # View source #channel_forward_message? # View source #channel_message? # View source #channel_post? # View source #chat_member? # View source #chosen_inline_result? # View source #code_entity? # View source #connected_website? # View source #contact? # View source #dart? # View source #delete_chat_photo? # View source #dice? # View source #document? # View source #edited_channel_post? # View source #edited_message? # View source #email_entity? # View source #football? # View source #game? # View source #group_chat_created? # View source #hashtag_entity? # View source #inline_query? # View source #invoice? # View source #italic_entity? # View source #left_chat_member? # View source #location? # View source #mention_entity? # View source #message? # View source #message_auto_delete_timer_changed? # View source #migrate_from_chat_id? # View source #migrate_to_chat_id? # View source #my_chat_member? # View source #new_chat_members? # View source #new_chat_photo? # View source #new_chat_title? # View source #passport_data? # View source #phone_number_entity? # View source #photo? # View source #pinned_message? # View source #poll? # View source #poll_answer? # View source #pre_checkout_query? # View source #pre_entity? # View source #proximity_alert_triggered? # View source #reply_message? # View source #shipping_query? # View source #slot_machine? # View source #soccerball? # View source #sticker? # View source #strikethrough_entity? # View source #successful_payment? # View source #supergroup_chat_created? # View source #text? # View source #text_link_entity? # View source #text_mention_entity? # View source #to_s # Returns a String representation of this enum member. In the case of regular enums, this is just the name of the member. In the case of flag enums, it's the names joined by vertical bars, or \"None\", if the value is zero. If an enum's value doesn't match a member's value, the raw value is returned as a string. Color :: Red . to_s # => \"Red\" IOMode :: None . to_s # => \"None\" ( IOMode :: Read | IOMode :: Write ) . to_s # => \"Read | Write\" Color . new ( 10 ) . to_s # => \"10\" View source #underline_entity? # View source #update? # View source #url_entity? # View source #user_message? # View source #venue? # View source #via_bot? # View source #video? # View source #video_note? # View source #voice? # View source #voice_chat_ended? # View source #voice_chat_participants_invited? # View source #voice_chat_scheduled? # View source #voice_chat_started? # View source","title":"UpdateAction"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction","text":"The available event types for EventHandler .","title":"UpdateAction"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Update","text":"","title":"Update"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Message","text":"","title":"Message"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ReplyMessage","text":"","title":"ReplyMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::EditedMessage","text":"","title":"EditedMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::CallbackQuery","text":"","title":"CallbackQuery"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::InlineQuery","text":"","title":"InlineQuery"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ShippingQuery","text":"","title":"ShippingQuery"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PreCheckoutQuery","text":"","title":"PreCheckoutQuery"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChosenInlineResult","text":"","title":"ChosenInlineResult"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChannelPost","text":"","title":"ChannelPost"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::EditedChannelPost","text":"","title":"EditedChannelPost"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::MyChatMember","text":"","title":"MyChatMember"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChatMember","text":"","title":"ChatMember"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ViaBot","text":"","title":"ViaBot"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Text","text":"","title":"Text"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Caption","text":"","title":"Caption"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Audio","text":"","title":"Audio"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Document","text":"","title":"Document"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Photo","text":"","title":"Photo"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Sticker","text":"","title":"Sticker"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Video","text":"","title":"Video"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Voice","text":"","title":"Voice"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Contact","text":"","title":"Contact"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Location","text":"","title":"Location"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Venue","text":"","title":"Venue"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::NewChatMembers","text":"","title":"NewChatMembers"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::LeftChatMember","text":"","title":"LeftChatMember"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::NewChatTitle","text":"","title":"NewChatTitle"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::NewChatPhoto","text":"","title":"NewChatPhoto"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::DeleteChatPhoto","text":"","title":"DeleteChatPhoto"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::GroupChatCreated","text":"","title":"GroupChatCreated"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::MessageAutoDeleteTimerChanged","text":"","title":"MessageAutoDeleteTimerChanged"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::MigrateToChatId","text":"","title":"MigrateToChatId"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::SupergroupChatCreated","text":"","title":"SupergroupChatCreated"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChannelChatCreated","text":"","title":"ChannelChatCreated"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::MigrateFromChatId","text":"","title":"MigrateFromChatId"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PinnedMessage","text":"","title":"PinnedMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Game","text":"","title":"Game"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Poll","text":"","title":"Poll"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::VideoNote","text":"","title":"VideoNote"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Invoice","text":"","title":"Invoice"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::SuccessfulPayment","text":"","title":"SuccessfulPayment"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ConnectedWebsite","text":"","title":"ConnectedWebsite"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PassportData","text":"","title":"PassportData"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PollAnswer","text":"","title":"PollAnswer"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ProximityAlertTriggered","text":"","title":"ProximityAlertTriggered"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::VoiceChatScheduled","text":"","title":"VoiceChatScheduled"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::VoiceChatStarted","text":"","title":"VoiceChatStarted"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::VoiceChatEnded","text":"","title":"VoiceChatEnded"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::VoiceChatParticipantsInvited","text":"","title":"VoiceChatParticipantsInvited"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Dice","text":"","title":"Dice"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Dart","text":"\ud83c\udfb2","title":"Dart"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Basketball","text":"\ud83c\udfaf","title":"Basketball"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Football","text":"\ud83c\udfc0","title":"Football"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Soccerball","text":"\u26bd\ufe0f","title":"Soccerball"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::SlotMachine","text":"\u26bd\ufe0f but American","title":"SlotMachine"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Bowling","text":"\ud83c\udfb0","title":"Bowling"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::BotMessage","text":"","title":"BotMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::UserMessage","text":"","title":"UserMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChannelMessage","text":"","title":"ChannelMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChannelForwardMessage","text":"","title":"ChannelForwardMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::AnonymousAdminMessage","text":"","title":"AnonymousAdminMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::MentionEntity","text":"","title":"MentionEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::TextMentionEntity","text":"","title":"TextMentionEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::HashtagEntity","text":"","title":"HashtagEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::CashtagEntity","text":"","title":"CashtagEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::BotCommandEntity","text":"","title":"BotCommandEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::UrlEntity","text":"","title":"UrlEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::EmailEntity","text":"","title":"EmailEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PhoneNumberEntity","text":"","title":"PhoneNumberEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::BoldEntity","text":"","title":"BoldEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ItalicEntity","text":"","title":"ItalicEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::CodeEntity","text":"","title":"CodeEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PreEntity","text":"","title":"PreEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::TextLinkEntity","text":"","title":"TextLinkEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::UnderlineEntity","text":"","title":"UnderlineEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::StrikethroughEntity","text":"","title":"StrikethroughEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction.from_update(update)","text":"Takes an Update and returns an array of update actions. View source","title":".from_update"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction.to_a","text":"View source","title":".to_a"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#anonymous_admin_message?","text":"View source","title":"#anonymous_admin_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#audio?","text":"View source","title":"#audio?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#basketball?","text":"View source","title":"#basketball?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#bold_entity?","text":"View source","title":"#bold_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#bot_command_entity?","text":"View source","title":"#bot_command_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#bot_message?","text":"View source","title":"#bot_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#bowling?","text":"View source","title":"#bowling?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#callback_query?","text":"View source","title":"#callback_query?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#caption?","text":"View source","title":"#caption?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#cashtag_entity?","text":"View source","title":"#cashtag_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#channel_chat_created?","text":"View source","title":"#channel_chat_created?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#channel_forward_message?","text":"View source","title":"#channel_forward_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#channel_message?","text":"View source","title":"#channel_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#channel_post?","text":"View source","title":"#channel_post?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#chat_member?","text":"View source","title":"#chat_member?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#chosen_inline_result?","text":"View source","title":"#chosen_inline_result?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#code_entity?","text":"View source","title":"#code_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#connected_website?","text":"View source","title":"#connected_website?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#contact?","text":"View source","title":"#contact?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#dart?","text":"View source","title":"#dart?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#delete_chat_photo?","text":"View source","title":"#delete_chat_photo?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#dice?","text":"View source","title":"#dice?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#document?","text":"View source","title":"#document?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#edited_channel_post?","text":"View source","title":"#edited_channel_post?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#edited_message?","text":"View source","title":"#edited_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#email_entity?","text":"View source","title":"#email_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#football?","text":"View source","title":"#football?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#game?","text":"View source","title":"#game?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#group_chat_created?","text":"View source","title":"#group_chat_created?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#hashtag_entity?","text":"View source","title":"#hashtag_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#inline_query?","text":"View source","title":"#inline_query?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#invoice?","text":"View source","title":"#invoice?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#italic_entity?","text":"View source","title":"#italic_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#left_chat_member?","text":"View source","title":"#left_chat_member?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#location?","text":"View source","title":"#location?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#mention_entity?","text":"View source","title":"#mention_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#message?","text":"View source","title":"#message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#message_auto_delete_timer_changed?","text":"View source","title":"#message_auto_delete_timer_changed?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#migrate_from_chat_id?","text":"View source","title":"#migrate_from_chat_id?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#migrate_to_chat_id?","text":"View source","title":"#migrate_to_chat_id?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#my_chat_member?","text":"View source","title":"#my_chat_member?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#new_chat_members?","text":"View source","title":"#new_chat_members?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#new_chat_photo?","text":"View source","title":"#new_chat_photo?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#new_chat_title?","text":"View source","title":"#new_chat_title?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#passport_data?","text":"View source","title":"#passport_data?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#phone_number_entity?","text":"View source","title":"#phone_number_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#photo?","text":"View source","title":"#photo?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#pinned_message?","text":"View source","title":"#pinned_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#poll?","text":"View source","title":"#poll?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#poll_answer?","text":"View source","title":"#poll_answer?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#pre_checkout_query?","text":"View source","title":"#pre_checkout_query?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#pre_entity?","text":"View source","title":"#pre_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#proximity_alert_triggered?","text":"View source","title":"#proximity_alert_triggered?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#reply_message?","text":"View source","title":"#reply_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#shipping_query?","text":"View source","title":"#shipping_query?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#slot_machine?","text":"View source","title":"#slot_machine?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#soccerball?","text":"View source","title":"#soccerball?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#sticker?","text":"View source","title":"#sticker?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#strikethrough_entity?","text":"View source","title":"#strikethrough_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#successful_payment?","text":"View source","title":"#successful_payment?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#supergroup_chat_created?","text":"View source","title":"#supergroup_chat_created?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#text?","text":"View source","title":"#text?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#text_link_entity?","text":"View source","title":"#text_link_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#text_mention_entity?","text":"View source","title":"#text_mention_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#to_s","text":"Returns a String representation of this enum member. In the case of regular enums, this is just the name of the member. In the case of flag enums, it's the names joined by vertical bars, or \"None\", if the value is zero. If an enum's value doesn't match a member's value, the raw value is returned as a string. Color :: Red . to_s # => \"Red\" IOMode :: None . to_s # => \"None\" ( IOMode :: Read | IOMode :: Write ) . to_s # => \"Read | Write\" Color . new ( 10 ) . to_s # => \"10\" View source","title":"#to_s"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#underline_entity?","text":"View source","title":"#underline_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#update?","text":"View source","title":"#update?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#url_entity?","text":"View source","title":"#url_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#user_message?","text":"View source","title":"#user_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#venue?","text":"View source","title":"#venue?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#via_bot?","text":"View source","title":"#via_bot?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#video?","text":"View source","title":"#video?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#video_note?","text":"View source","title":"#video_note?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#voice?","text":"View source","title":"#voice?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#voice_chat_ended?","text":"View source","title":"#voice_chat_ended?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#voice_chat_participants_invited?","text":"View source","title":"#voice_chat_participants_invited?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#voice_chat_scheduled?","text":"View source","title":"#voice_chat_scheduled?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#voice_chat_started?","text":"View source","title":"#voice_chat_started?"},{"location":"api_reference/Tourmaline/User/","text":"class Tourmaline::User inherits Reference # This object represents a Telegram user or bot. # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #add_sticker_to_set ( name , png_sticker , emojis , mask_position = nil ) # View source #can_join_groups : Bool? # View source #can_read_all_group_messages : Bool? # View source #create_new_sticker_set ( name , title , png_sticker , emojis , ** kwargs ) # View source #first_name : String # View source #full_name # View source #get_game_high_scores ( ** kwargs ) # View source #id : Int64 # View source #inline_mention # View source #is_bot : Bool # View source #is_scam? : Bool? # USER API ONLY View source #is_verified? : Bool? # USER API ONLY View source #language_code : String? # View source #last_name : String? # View source #profile_photos ( offset = nil , limit = nil ) # View source #set_game_score ( score , ** kwargs ) # View source #supports_inline_queries : Bool? # View source #upload_sticker_file ( png_sticker ) # View source #username : String? # View source","title":"User"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User","text":"","title":"User"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User--this-object-represents-a-telegram-user-or-bot","text":"","title":"This object represents a Telegram user or bot."},{"location":"api_reference/Tourmaline/User/#Tourmaline::User-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#add_sticker_to_set(name,png_sticker,emojis,mask_position)","text":"View source","title":"#add_sticker_to_set"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#can_join_groups","text":"View source","title":"#can_join_groups"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#can_read_all_group_messages","text":"View source","title":"#can_read_all_group_messages"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#create_new_sticker_set(name,title,png_sticker,emojis,**)","text":"View source","title":"#create_new_sticker_set"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#first_name","text":"View source","title":"#first_name"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#full_name","text":"View source","title":"#full_name"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#get_game_high_scores(**)","text":"View source","title":"#get_game_high_scores"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#inline_mention","text":"View source","title":"#inline_mention"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#is_bot","text":"View source","title":"#is_bot"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#is_scam?","text":"USER API ONLY View source","title":"#is_scam?"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#is_verified?","text":"USER API ONLY View source","title":"#is_verified?"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#language_code","text":"View source","title":"#language_code"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#last_name","text":"View source","title":"#last_name"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#profile_photos(offset,limit)","text":"View source","title":"#profile_photos"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#set_game_score(score,**)","text":"View source","title":"#set_game_score"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#supports_inline_queries","text":"View source","title":"#supports_inline_queries"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#upload_sticker_file(png_sticker)","text":"View source","title":"#upload_sticker_file"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#username","text":"View source","title":"#username"},{"location":"api_reference/Tourmaline/UserProfilePhotos/","text":"class Tourmaline::UserProfilePhotos inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #photos : Array ( Array ( PhotoSize )) # View source #total_count : Int32 # View source","title":"UserProfilePhotos"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos","text":"","title":"UserProfilePhotos"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos#photos","text":"View source","title":"#photos"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos#total_count","text":"View source","title":"#total_count"},{"location":"api_reference/Tourmaline/Venue/","text":"class Tourmaline::Venue inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #address : String # View source #foursquare_id : String? # View source #foursquare_type : String? # View source #google_place_id : String? # View source #google_place_type : String? # View source #location : Location # View source #title : String # View source","title":"Venue"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue","text":"","title":"Venue"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#address","text":"View source","title":"#address"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#foursquare_id","text":"View source","title":"#foursquare_id"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#foursquare_type","text":"View source","title":"#foursquare_type"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#google_place_id","text":"View source","title":"#google_place_id"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#google_place_type","text":"View source","title":"#google_place_type"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#location","text":"View source","title":"#location"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/Video/","text":"class Tourmaline::Video inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #duration : Int32 # View source #file_id : String # View source #file_name : String? # View source #file_size : Int32? # View source #file_unique_id : String # View source #height : Int32 # View source #mime_type : String? # View source #thumb : PhotoSize? # View source #width : Int32 # View source","title":"Video"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video","text":"","title":"Video"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#duration","text":"View source","title":"#duration"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#file_name","text":"View source","title":"#file_name"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#height","text":"View source","title":"#height"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#mime_type","text":"View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#thumb","text":"View source","title":"#thumb"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#width","text":"View source","title":"#width"},{"location":"api_reference/Tourmaline/VideoNote/","text":"class Tourmaline::VideoNote inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #duration : Int32 # View source #file_id : String # View source #file_size : Int32? # View source #file_unique_id : String # View source #length : Int32 # View source #thumb : PhotoSize? # View source","title":"VideoNote"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote","text":"","title":"VideoNote"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#duration","text":"View source","title":"#duration"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#length","text":"View source","title":"#length"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#thumb","text":"View source","title":"#thumb"},{"location":"api_reference/Tourmaline/Voice/","text":"class Tourmaline::Voice inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #duration : Int32 # View source #file_id : String # View source #file_size : Int32? # View source #file_unique_id : String # View source #mime_type : String? # View source","title":"Voice"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice","text":"","title":"Voice"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#duration","text":"View source","title":"#duration"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#mime_type","text":"View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/VoiceChatEnded/","text":"class Tourmaline::VoiceChatEnded inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #duration : Int32 # View source","title":"VoiceChatEnded"},{"location":"api_reference/Tourmaline/VoiceChatEnded/#Tourmaline::VoiceChatEnded","text":"","title":"VoiceChatEnded"},{"location":"api_reference/Tourmaline/VoiceChatEnded/#Tourmaline::VoiceChatEnded-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/VoiceChatEnded/#Tourmaline::VoiceChatEnded.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/VoiceChatEnded/#Tourmaline::VoiceChatEnded-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/VoiceChatEnded/#Tourmaline::VoiceChatEnded#duration","text":"View source","title":"#duration"},{"location":"api_reference/Tourmaline/VoiceChatParticipantsInvited/","text":"class Tourmaline::VoiceChatParticipantsInvited inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #users : Array ( User ) # View source","title":"VoiceChatParticipantsInvited"},{"location":"api_reference/Tourmaline/VoiceChatParticipantsInvited/#Tourmaline::VoiceChatParticipantsInvited","text":"","title":"VoiceChatParticipantsInvited"},{"location":"api_reference/Tourmaline/VoiceChatParticipantsInvited/#Tourmaline::VoiceChatParticipantsInvited-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/VoiceChatParticipantsInvited/#Tourmaline::VoiceChatParticipantsInvited.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/VoiceChatParticipantsInvited/#Tourmaline::VoiceChatParticipantsInvited-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/VoiceChatParticipantsInvited/#Tourmaline::VoiceChatParticipantsInvited#users","text":"View source","title":"#users"},{"location":"api_reference/Tourmaline/VoiceChatScheduled/","text":"class Tourmaline::VoiceChatScheduled inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #start_date : Time # View source","title":"VoiceChatScheduled"},{"location":"api_reference/Tourmaline/VoiceChatScheduled/#Tourmaline::VoiceChatScheduled","text":"","title":"VoiceChatScheduled"},{"location":"api_reference/Tourmaline/VoiceChatScheduled/#Tourmaline::VoiceChatScheduled-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/VoiceChatScheduled/#Tourmaline::VoiceChatScheduled.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/VoiceChatScheduled/#Tourmaline::VoiceChatScheduled-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/VoiceChatScheduled/#Tourmaline::VoiceChatScheduled#start_date","text":"View source","title":"#start_date"},{"location":"api_reference/Tourmaline/VoiceChatStarted/","text":"class Tourmaline::VoiceChatStarted inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source","title":"VoiceChatStarted"},{"location":"api_reference/Tourmaline/VoiceChatStarted/#Tourmaline::VoiceChatStarted","text":"","title":"VoiceChatStarted"},{"location":"api_reference/Tourmaline/VoiceChatStarted/#Tourmaline::VoiceChatStarted-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/VoiceChatStarted/#Tourmaline::VoiceChatStarted.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/WebhookInfo/","text":"class Tourmaline::WebhookInfo inherits Reference # Included modules JSON::Serializable Tourmaline::Model Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #allowed_updates : Array ( String )? # View source #has_custom_certificate : Bool # View source #ip_address : String? # View source #last_error_date : Time? # View source #last_error_message : String? # View source #max_connections : Int32? # View source #pending_update_count : Int32 # View source #url : String # View source","title":"WebhookInfo"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo","text":"","title":"WebhookInfo"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#allowed_updates","text":"View source","title":"#allowed_updates"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#has_custom_certificate","text":"View source","title":"#has_custom_certificate"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#ip_address","text":"View source","title":"#ip_address"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#last_error_date","text":"View source","title":"#last_error_date"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#last_error_message","text":"View source","title":"#last_error_message"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#max_connections","text":"View source","title":"#max_connections"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#pending_update_count","text":"View source","title":"#pending_update_count"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#url","text":"View source","title":"#url"},{"location":"features/async/","text":"Async Handlers # Things aren't async by default in Tourmaline, but that doesn't mean it's not easy to implement. On a base level the body of any method could easily be wrapped in a spawn and suddenly that method is async, but it's not a perfect solution. This is part of the reason I developed the Async library. Using it you can make any function asynchronous just by using the async macro. For example: require \"async\" # ... @[ Command ( \"echo\" ) ] async def echo_command ( ctx ) ctx . message . reply ( ctx . text ) end Nothing else needs to be done, but in the case that you want to call an async method just be sure to await the result. You can also call .wait on the returned future.","title":"Async"},{"location":"features/async/#async-handlers","text":"Things aren't async by default in Tourmaline, but that doesn't mean it's not easy to implement. On a base level the body of any method could easily be wrapped in a spawn and suddenly that method is async, but it's not a perfect solution. This is part of the reason I developed the Async library. Using it you can make any function asynchronous just by using the async macro. For example: require \"async\" # ... @[ Command ( \"echo\" ) ] async def echo_command ( ctx ) ctx . message . reply ( ctx . text ) end Nothing else needs to be done, but in the case that you want to call an async method just be sure to await the result. You can also call .wait on the returned future.","title":"Async Handlers"},{"location":"features/background_jobs/","text":"Background Jobs # Sometimes you want to do something at a specific time, or interval. These \"tasks\" are usually called background jobs. Luckily there are a couple of libraries that make background job handling super easy! Tasker # Tasker is a great CRON type scheduler for Crystal. It uses fibers to create in-memory background jobs that either run at a specific time, or at a specific interval. Let's look at a simple example bot which posts to a channel at a specific interval: require \"tasker\" require \"tourmaline\" CHANNEL_ID = 0000000000 0 class PostBot < Tourmaline :: Client def post_to_channel # Fetch something from a database send_message ( CHANNEL_ID , content ) end end bot = PostBot . new ( bot_token : ENV [ \"API_KEY\" ] ) # Grab the default Tasker instance schedule = Tasker . instance schedule . every ( 5 . minutes ) do bot . post_to_channel end bot . poll Mosquito # Mosquito is a bit more advanced than Tasker and uses a Redis backend to keep track of jobs. It comes with two different job types: QueuedJob a job that gets inserted into a queue and processed sequentially. Queued jobs can be rate limited so that only N number of jobs are performed every X amount of time. This can be really useful if you want to use a request that is heavily rate limited by Telegram, such as send_contact . PeriodicJob a job that runs accoding to a predefined schedule. They can be used just like the above Tasker example to perform a task at specific intervals. Let's see the above example, but with Mosquito: require \"mosquito\" require \"tourmaline\" CHANNEL_ID = - 10000000000 class PostBot < Tourmaline :: Client def post_to_channel # Fetch something from a database send_message ( CHANNEL_ID , content ) end end # Bot needs to be a constant so we can access it. Obviously # there are better ways to do this with a proper project setup BOT = PostBot . new ( bot_token : ENV [ \"API_KEY\" ] ) # The job will be automatically queued as it's made class MyJob < Mosquito :: PeriodicJob run_every 5 . minutes def perform BOT . post_to_channel end end # We need to spawn the Mosquito runner spawn do Mosquito :: Runner . start end bot . poll","title":"Background Jobs"},{"location":"features/background_jobs/#background-jobs","text":"Sometimes you want to do something at a specific time, or interval. These \"tasks\" are usually called background jobs. Luckily there are a couple of libraries that make background job handling super easy!","title":"Background Jobs"},{"location":"features/background_jobs/#tasker","text":"Tasker is a great CRON type scheduler for Crystal. It uses fibers to create in-memory background jobs that either run at a specific time, or at a specific interval. Let's look at a simple example bot which posts to a channel at a specific interval: require \"tasker\" require \"tourmaline\" CHANNEL_ID = 0000000000 0 class PostBot < Tourmaline :: Client def post_to_channel # Fetch something from a database send_message ( CHANNEL_ID , content ) end end bot = PostBot . new ( bot_token : ENV [ \"API_KEY\" ] ) # Grab the default Tasker instance schedule = Tasker . instance schedule . every ( 5 . minutes ) do bot . post_to_channel end bot . poll","title":"Tasker"},{"location":"features/background_jobs/#mosquito","text":"Mosquito is a bit more advanced than Tasker and uses a Redis backend to keep track of jobs. It comes with two different job types: QueuedJob a job that gets inserted into a queue and processed sequentially. Queued jobs can be rate limited so that only N number of jobs are performed every X amount of time. This can be really useful if you want to use a request that is heavily rate limited by Telegram, such as send_contact . PeriodicJob a job that runs accoding to a predefined schedule. They can be used just like the above Tasker example to perform a task at specific intervals. Let's see the above example, but with Mosquito: require \"mosquito\" require \"tourmaline\" CHANNEL_ID = - 10000000000 class PostBot < Tourmaline :: Client def post_to_channel # Fetch something from a database send_message ( CHANNEL_ID , content ) end end # Bot needs to be a constant so we can access it. Obviously # there are better ways to do this with a proper project setup BOT = PostBot . new ( bot_token : ENV [ \"API_KEY\" ] ) # The job will be automatically queued as it's made class MyJob < Mosquito :: PeriodicJob run_every 5 . minutes def perform BOT . post_to_channel end end # We need to spawn the Mosquito runner spawn do Mosquito :: Runner . start end bot . poll","title":"Mosquito"},{"location":"features/emoji_support/","text":"Emoji Support # Using emoji in your bot tends to make things a bit less robotic. Here is how you can accomplish that with Tourmaline. Emoji Keyboard # Of course one of the best ways to include emojis in your messages is to just use an emoji keyboard and paste the raw emoji into your messages. Crystal is UTF8 compatible and won't freak out. send_message ( message . chat . id , \"Hello world \ud83c\udf0e\" ) emoji.cr # Luckily there is also a great port of Emoji for Python called emoji.cr . With it you can easily use the same emoji shortcodes Github uses to include emoji in your messages. require \"emoji\" # bot definition... send_message ( message . chat . id , Emoji . emojize ( \"Hello world :earth_americas:\" )) Since emoji.cr uses regex to find and replace shortcodes with emoji, it would be a good idea to put any emoji messages into a constant so that it's not finding and replacing that shortcode every time.","title":"Emoji Support"},{"location":"features/emoji_support/#emoji-support","text":"Using emoji in your bot tends to make things a bit less robotic. Here is how you can accomplish that with Tourmaline.","title":"Emoji Support"},{"location":"features/emoji_support/#emoji-keyboard","text":"Of course one of the best ways to include emojis in your messages is to just use an emoji keyboard and paste the raw emoji into your messages. Crystal is UTF8 compatible and won't freak out. send_message ( message . chat . id , \"Hello world \ud83c\udf0e\" )","title":"Emoji Keyboard"},{"location":"features/emoji_support/#emojicr","text":"Luckily there is also a great port of Emoji for Python called emoji.cr . With it you can easily use the same emoji shortcodes Github uses to include emoji in your messages. require \"emoji\" # bot definition... send_message ( message . chat . id , Emoji . emojize ( \"Hello world :earth_americas:\" )) Since emoji.cr uses regex to find and replace shortcodes with emoji, it would be a good idea to put any emoji messages into a constant so that it's not finding and replacing that shortcode every time.","title":"emoji.cr"},{"location":"features/format/","text":"Formatting Made Easy # Typing out markdown isn't that hard, and HTML not that much more difficult, but it can be annoying dealing with the interesting quirks around Telegram's parse modes. Most specifically nested entities (which aren't possible with MarkdownV1) and escaping non-entities (especially in MarkdownV2). For this reason the Format module was created. Usage # Every member of the Format module inherits from Format::Token , which means each of them include the methods #to_md(version) and #to_html . This means you can easily use them by themselves if you wish, but the most power comes from using the Section class. A Section is a collection of other tokens. The first token is considered the \"header\", and the rest will be indented according to the indent parameter and then followed by spacing newlines. For example: include Tourmaline :: Format message = Section . new ( Bold . new ( \"This is a heading\" ), \"This will be on its own line\" , CodeBlock . new ( \"Here is some code\" ), Group . new ( \"Tourmaline is the \" , Bold . new ( \"freaking\" ), \" best!\" ) ) Calling section.to_md will then return: *This is a heading* This will be on its own line ``` Here is some code ``` Tourmaline is the *freaking* best! The previous example can also be recreated using enumerable like methods: include Tourmaline :: Format message = Section . new message << Bold . new ( \"This is a heading\" ), message << \"This will be on its own line\" , message << CodeBlock . new ( \"Here is some code\" ), message << Group . new ( \"Tourmaline is the \" , Bold . new ( \"freaking\" ), \" best!\" ) Or using a \"builder\" style block: include Tourmaline :: Format message = Section . build do | s | s << Bold . new ( \"This is a heading\" ), s << \"This will be on its own line\" , s << CodeBlock . new ( \"Here is some code\" ), s << Group . new ( \"Tourmaline is the \" , Bold . new ( \"freaking\" ), \" best!\" ) end For more information on each of the different format types and how to use them, see their individual documentation pages: Bold Code CodeBlock Group Italic KeyValueItem LineItem Link Section Strikethrough SubSection SubSubSection Token Underline UserMention","title":"Formatting"},{"location":"features/format/#formatting-made-easy","text":"Typing out markdown isn't that hard, and HTML not that much more difficult, but it can be annoying dealing with the interesting quirks around Telegram's parse modes. Most specifically nested entities (which aren't possible with MarkdownV1) and escaping non-entities (especially in MarkdownV2). For this reason the Format module was created.","title":"Formatting Made Easy"},{"location":"features/format/#usage","text":"Every member of the Format module inherits from Format::Token , which means each of them include the methods #to_md(version) and #to_html . This means you can easily use them by themselves if you wish, but the most power comes from using the Section class. A Section is a collection of other tokens. The first token is considered the \"header\", and the rest will be indented according to the indent parameter and then followed by spacing newlines. For example: include Tourmaline :: Format message = Section . new ( Bold . new ( \"This is a heading\" ), \"This will be on its own line\" , CodeBlock . new ( \"Here is some code\" ), Group . new ( \"Tourmaline is the \" , Bold . new ( \"freaking\" ), \" best!\" ) ) Calling section.to_md will then return: *This is a heading* This will be on its own line ``` Here is some code ``` Tourmaline is the *freaking* best! The previous example can also be recreated using enumerable like methods: include Tourmaline :: Format message = Section . new message << Bold . new ( \"This is a heading\" ), message << \"This will be on its own line\" , message << CodeBlock . new ( \"Here is some code\" ), message << Group . new ( \"Tourmaline is the \" , Bold . new ( \"freaking\" ), \" best!\" ) Or using a \"builder\" style block: include Tourmaline :: Format message = Section . build do | s | s << Bold . new ( \"This is a heading\" ), s << \"This will be on its own line\" , s << CodeBlock . new ( \"Here is some code\" ), s << Group . new ( \"Tourmaline is the \" , Bold . new ( \"freaking\" ), \" best!\" ) end For more information on each of the different format types and how to use them, see their individual documentation pages: Bold Code CodeBlock Group Italic KeyValueItem LineItem Link Section Strikethrough SubSection SubSubSection Token Underline UserMention","title":"Usage"},{"location":"features/handlers/","text":"Handlers # Tourmaline is built around the concept of Handlers , each of which is modeled to handle a specific kind of input. For instance, the CommandHandler is specifically designed to handle bot commands. Each handler also has a corresponding annotation. For instance, Command . There are currently 7 types of handler built in: CallbackQueryHandler ChosenInlineResultHandler CommandHandler EditedHandler HearsHandler InlineQueryHandler UpdateHandler For the purposes of this document we'll be focusing on the CommandHandler, since it's the one you're most likely to use most often, but you can find specific documentation for each handler type on their API reference page. The Command Handler # Most, though not all, bots respond to commands. Commands are a form of message which start (unless otherwise specified) with a forward slash ( / ). A simple example of a command is probably one of the most common. /start . /start is the universal bot initialization command in Telegram, because whenever someone goes to your bot for the first time this is the command that's going to be sent. In most cases you'll see this command being used to welcome a user to your bot, explain what the bot does, and maybe do some analytics in the backend. A very basic start command might look like this: @[ Command ( \"start\" ) ] def start_command ( ctx ) ctx . message . reply ( \"Welcome to my bot\" ) end Commands have the ability to get very complex though. For instance, you could have the /start command and the /help command be the same thing. This is somewhat common for smaller bots with less commands. @[ Command ( [ \"start\" , \"help\" ] ) ] def start_command ( ctx ) # ... end You can also set custom prefixes for your commands. For instance, it's also common to use ! as an additional prefix. @[ Command ( [ \"start\" , \"help\" ] , prefix : [ \"/\" , \"!\" ] ) ] def start_command ( ctx ) # ... end You can even stack handlers if you so wish, just be sure to do some type checking. @[ Hears ( /^how do i/ ) ] @[ Command ( [ \"start\" , \"help\" ] , prefix : [ \"/\" , \"!\" ] ) ] def start_command ( ctx ) # Both handlers have a `#message` property, so this is safe message = ctx . message # ... end Handlers Without Annotations # While annotations are the preferred way to invoke handlers, they aren't the only way. Sometimes you may wish to dynamically generate handlers, or you may be use to a library like Python-Telegram-Bot and prefer to add handlers to your bot instance using a more functional approach. Here's an example of a /start command added using this method: # This makes things less verbose include Tourmaline bot = Client . new ( \"YOUR_API_TOKEN\" ) bot . add_handler CommandHandlers . new ( \"start\" ) do | ctx | ctx . message . reply ( \"Welcome to my bot) end And that's all there is to it! Which you prefer is, of course, your choice. In truth, as we'll see below, handlers are just syntactic sugar around this exact methodology. Handler Groups # All handlers have a property called group which is normally set to :default . Groups allow us to make sure that only one handler responds to any given update, unless otherwise specified. In most cases you'll want to just leave this property alone, but in the case that you do want multiple handlers to respond to incoming updates all you have to do is set group to something unique. For example: @[ On ( :update , group : :persist_users ) ] def persist_users ( update ) # ... end @[ Command ( \"help\" ) ] def help_command ( ctx ) # ... end In the above example if we didn't have the group set in the first handler the second handler would never get called. Custom Handlers # You can also create custom handlers if you want. Let's create a simple PhotoHandler as an example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 annotation OnPhoto ; end class PhotoHandler < Tourmaline :: EventHandler # This is needed for the macro which registers the handler # to know which annotation belongs to it. ANNOTATION = OnPhoto # All handlers need at least these 3 things in their initialize method def initialize ( group = :default priority = 0 , & block : Context -> ) super ( group , priority ) @proc = block end # All handlers also need a `call` method. This gets called on every Update, # unless another handler with the same group gets called first. def call ( client : Client , update : Update ) if message = update . message return unless message . photo . size > 0 ctx = Context . new ( update , message , message . photo ) @proc . call ( ctx ) # returning true lets other handlers in the same group know not to respond true end end # Handlers with an annotation also need a Context object. This can be a class, struct, # or an alias to another type. All that matters is that it exists. record Context , update : Update , message : Message , photos : Array ( PhotoSize ) end For more advanced handler logic, be sure to check the source for each of the existing handlers.","title":"Handlers"},{"location":"features/handlers/#handlers","text":"Tourmaline is built around the concept of Handlers , each of which is modeled to handle a specific kind of input. For instance, the CommandHandler is specifically designed to handle bot commands. Each handler also has a corresponding annotation. For instance, Command . There are currently 7 types of handler built in: CallbackQueryHandler ChosenInlineResultHandler CommandHandler EditedHandler HearsHandler InlineQueryHandler UpdateHandler For the purposes of this document we'll be focusing on the CommandHandler, since it's the one you're most likely to use most often, but you can find specific documentation for each handler type on their API reference page.","title":"Handlers"},{"location":"features/handlers/#the-command-handler","text":"Most, though not all, bots respond to commands. Commands are a form of message which start (unless otherwise specified) with a forward slash ( / ). A simple example of a command is probably one of the most common. /start . /start is the universal bot initialization command in Telegram, because whenever someone goes to your bot for the first time this is the command that's going to be sent. In most cases you'll see this command being used to welcome a user to your bot, explain what the bot does, and maybe do some analytics in the backend. A very basic start command might look like this: @[ Command ( \"start\" ) ] def start_command ( ctx ) ctx . message . reply ( \"Welcome to my bot\" ) end Commands have the ability to get very complex though. For instance, you could have the /start command and the /help command be the same thing. This is somewhat common for smaller bots with less commands. @[ Command ( [ \"start\" , \"help\" ] ) ] def start_command ( ctx ) # ... end You can also set custom prefixes for your commands. For instance, it's also common to use ! as an additional prefix. @[ Command ( [ \"start\" , \"help\" ] , prefix : [ \"/\" , \"!\" ] ) ] def start_command ( ctx ) # ... end You can even stack handlers if you so wish, just be sure to do some type checking. @[ Hears ( /^how do i/ ) ] @[ Command ( [ \"start\" , \"help\" ] , prefix : [ \"/\" , \"!\" ] ) ] def start_command ( ctx ) # Both handlers have a `#message` property, so this is safe message = ctx . message # ... end","title":"The Command Handler"},{"location":"features/handlers/#handlers-without-annotations","text":"While annotations are the preferred way to invoke handlers, they aren't the only way. Sometimes you may wish to dynamically generate handlers, or you may be use to a library like Python-Telegram-Bot and prefer to add handlers to your bot instance using a more functional approach. Here's an example of a /start command added using this method: # This makes things less verbose include Tourmaline bot = Client . new ( \"YOUR_API_TOKEN\" ) bot . add_handler CommandHandlers . new ( \"start\" ) do | ctx | ctx . message . reply ( \"Welcome to my bot) end And that's all there is to it! Which you prefer is, of course, your choice. In truth, as we'll see below, handlers are just syntactic sugar around this exact methodology.","title":"Handlers Without Annotations"},{"location":"features/handlers/#handler-groups","text":"All handlers have a property called group which is normally set to :default . Groups allow us to make sure that only one handler responds to any given update, unless otherwise specified. In most cases you'll want to just leave this property alone, but in the case that you do want multiple handlers to respond to incoming updates all you have to do is set group to something unique. For example: @[ On ( :update , group : :persist_users ) ] def persist_users ( update ) # ... end @[ Command ( \"help\" ) ] def help_command ( ctx ) # ... end In the above example if we didn't have the group set in the first handler the second handler would never get called.","title":"Handler Groups"},{"location":"features/handlers/#custom-handlers","text":"You can also create custom handlers if you want. Let's create a simple PhotoHandler as an example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 annotation OnPhoto ; end class PhotoHandler < Tourmaline :: EventHandler # This is needed for the macro which registers the handler # to know which annotation belongs to it. ANNOTATION = OnPhoto # All handlers need at least these 3 things in their initialize method def initialize ( group = :default priority = 0 , & block : Context -> ) super ( group , priority ) @proc = block end # All handlers also need a `call` method. This gets called on every Update, # unless another handler with the same group gets called first. def call ( client : Client , update : Update ) if message = update . message return unless message . photo . size > 0 ctx = Context . new ( update , message , message . photo ) @proc . call ( ctx ) # returning true lets other handlers in the same group know not to respond true end end # Handlers with an annotation also need a Context object. This can be a class, struct, # or an alias to another type. All that matters is that it exists. record Context , update : Update , message : Message , photos : Array ( PhotoSize ) end For more advanced handler logic, be sure to check the source for each of the existing handlers.","title":"Custom Handlers"},{"location":"features/kemal_middleware/","text":"Kemal Middleware # If you're not aware, kemal is a lightweight web application framework for Crystal similar to Ruby's Sinatra. It is extremely fast, and prefect for hosting a Telegram bot, especially if you wish to also integrate a web front end, API, etc. The Kemal Adapter # Using Tourmaline in your Kemal project is pretty simple: require \"kemal\" require \"tourmaline/adapters/kemal\" require \"./yourbot\" # change this to your bot # Add handler is a Kemal method for adding middleware add_handler Tourmaline :: KemalAdapter . new ( # pass in a new instance of your bot bot : YourBot . new , # set the url url : \"https://something.com\" , # set the path to serve the webhook on path : \"/bot-webhook/ #{ ENV [ \"TGBOT_API_KEY\" ] } \" ) Kemal . run","title":"Kemal Middleware"},{"location":"features/kemal_middleware/#kemal-middleware","text":"If you're not aware, kemal is a lightweight web application framework for Crystal similar to Ruby's Sinatra. It is extremely fast, and prefect for hosting a Telegram bot, especially if you wish to also integrate a web front end, API, etc.","title":"Kemal Middleware"},{"location":"features/kemal_middleware/#the-kemal-adapter","text":"Using Tourmaline in your Kemal project is pretty simple: require \"kemal\" require \"tourmaline/adapters/kemal\" require \"./yourbot\" # change this to your bot # Add handler is a Kemal method for adding middleware add_handler Tourmaline :: KemalAdapter . new ( # pass in a new instance of your bot bot : YourBot . new , # set the url url : \"https://something.com\" , # set the path to serve the webhook on path : \"/bot-webhook/ #{ ENV [ \"TGBOT_API_KEY\" ] } \" ) Kemal . run","title":"The Kemal Adapter"},{"location":"features/multilevel_menus/","text":"Multilevel Menus # One of the most frustrating, mind numbing, and common tasks with bot development is creating menus using inline keyboards. A typical menu might have multiple options with results spanning multiple levels, and juggling the logic for such menus can easily become a massive pain. Luckily, Tourmaline has you covered with the RoutedMenu helper class. RoutedMenu # The RoutedMenu class provides an easy to use DSL for generating multilevel menus, using standard HTTP routing as inspiration. Let's take a look at a simple menu example: require \"tourmaline/extra/routed_menu\" MENU = RoutedMenu . build do route \"/\" do content \"Some content to go in the home route\" buttons do route_button \"Next page\" , \"/page_2\" end end route \"/page_2\" do content \"...\" buttons do back_button \"Back\" end end end Hopefully it's pretty apparent what's happening here. Each \"route\" is a page which has its own content and buttons. The first page has a single button linking to the /page_2 route, and the second page has a back button. The RoutedMenu maintains a history of visited routes which is used to make the back button work. One of the nice things about this DSL, besides the obvious syntax improvement, is that it gets rid of the need to keep callback queries under the 65 character limit imposed by Telegram. This is because routes are hashed using MD5 and then truncated so that route: + the route name fits within 65 characters.","title":"Multilevel Menus"},{"location":"features/multilevel_menus/#multilevel-menus","text":"One of the most frustrating, mind numbing, and common tasks with bot development is creating menus using inline keyboards. A typical menu might have multiple options with results spanning multiple levels, and juggling the logic for such menus can easily become a massive pain. Luckily, Tourmaline has you covered with the RoutedMenu helper class.","title":"Multilevel Menus"},{"location":"features/multilevel_menus/#routedmenu","text":"The RoutedMenu class provides an easy to use DSL for generating multilevel menus, using standard HTTP routing as inspiration. Let's take a look at a simple menu example: require \"tourmaline/extra/routed_menu\" MENU = RoutedMenu . build do route \"/\" do content \"Some content to go in the home route\" buttons do route_button \"Next page\" , \"/page_2\" end end route \"/page_2\" do content \"...\" buttons do back_button \"Back\" end end end Hopefully it's pretty apparent what's happening here. Each \"route\" is a page which has its own content and buttons. The first page has a single button linking to the /page_2 route, and the second page has a back button. The RoutedMenu maintains a history of visited routes which is used to make the back button work. One of the nice things about this DSL, besides the obvious syntax improvement, is that it gets rid of the need to keep callback queries under the 65 character limit imposed by Telegram. This is because routes are hashed using MD5 and then truncated so that route: + the route name fits within 65 characters.","title":"RoutedMenu"},{"location":"features/paginated_keyboards/","text":"Paginated Keyboards # One common task bot developers face is creating paginated results with back/previous and forward/next buttons. For such situations, PaginatedKeyboard is here to save the day! PaginatedKeyboard # Creating a paginated keyboard is super easy. Give it the items you want, some formatting options, and inject it into a message. Let's look at an example: @[ Command ( \"results\" ) ] def start_command ( ctx ) results = ( 'a' .. 'z' ) . to_a . map ( &. to_s ) keyboard = PaginatedKeyboard . new ( # The results results , # The number of results to show on each page (default: 10) per_page : 5 , # A string to put before each item (default: nil) prefix : \"{index}. \" , # Some text to show above the results (default: nil) header : \"*Results*\" , # Some text to show below the results (default: nil) footer : \" \\n Page: {page} of {page count}\" , # Text to use for the back button (default: \"Back\") back_text : \"Back\" , # Text to use for the next button (default: \"Next\") next_text : \"Forward\" , # Used as both the group name and the prefix to the callback query (default: random string) id : \"results\" ) # Send the message by using the keyboard's starting page and the keyboard itself as reply_markup ctx . message . respond ( keyboard . current_page , parse_mode : :markdown , reply_markup : keyboard ) end Some options have special formatting as well. The prefix option can include a {index} which will be replaced with the (1 indexed) index of the current item. The header and footer options can include a {page} which returns the current page number, and {page count} which returns the total number of pages.","title":"Paginated Keyboards"},{"location":"features/paginated_keyboards/#paginated-keyboards","text":"One common task bot developers face is creating paginated results with back/previous and forward/next buttons. For such situations, PaginatedKeyboard is here to save the day!","title":"Paginated Keyboards"},{"location":"features/paginated_keyboards/#paginatedkeyboard","text":"Creating a paginated keyboard is super easy. Give it the items you want, some formatting options, and inject it into a message. Let's look at an example: @[ Command ( \"results\" ) ] def start_command ( ctx ) results = ( 'a' .. 'z' ) . to_a . map ( &. to_s ) keyboard = PaginatedKeyboard . new ( # The results results , # The number of results to show on each page (default: 10) per_page : 5 , # A string to put before each item (default: nil) prefix : \"{index}. \" , # Some text to show above the results (default: nil) header : \"*Results*\" , # Some text to show below the results (default: nil) footer : \" \\n Page: {page} of {page count}\" , # Text to use for the back button (default: \"Back\") back_text : \"Back\" , # Text to use for the next button (default: \"Next\") next_text : \"Forward\" , # Used as both the group name and the prefix to the callback query (default: random string) id : \"results\" ) # Send the message by using the keyboard's starting page and the keyboard itself as reply_markup ctx . message . respond ( keyboard . current_page , parse_mode : :markdown , reply_markup : keyboard ) end Some options have special formatting as well. The prefix option can include a {index} which will be replaced with the (1 indexed) index of the current item. The header and footer options can include a {page} which returns the current page number, and {page count} which returns the total number of pages.","title":"PaginatedKeyboard"},{"location":"features/stage/","text":"Stage # Stages, sometimes also called wizards or conversations, are a simple way to add a bit of life to your bot. They allow you to send input and wait for feedback before proceeding. For example, say your bot was being used to register a user for a service. You could ask questions like \"What is your full name?\" or \"Would you have expected the Spanish Inquisition?\" and receive responses. In Tourmaline the Stage class tries to mock Tourmaline::Client as closely as possible, while providing an additional annotation called Step . Let's take a look at how a simple Stage might look: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class NameAsker ( String ) < Stage ( T ) @[ Step ( :name , initial : true ) ] def ask_name ( client ) send_message ( self . chat_id , \"What is your name?\" ) # in will be passed to this block. self . await_response do | ctx | self . context = ctx . text self . exit end end end class MyBot < Tourmaline :: Client @[ Command ( \"start\" ) ] def start_command ( ctx ) stage = NameAsker . enter ( self , chat_id : ctx . message . chat_id , context : \"\" ) stage . on_exit do | name | ctx . message . respond ( \"You entered #{ name } \" ) end end end Steps # Stages are composed of steps which are created either with Stage#on or with the Step annotation. If a step is tagged with initial: true it will be the first step in the series. If no step is tagged with initial: true you will have to manually transition to the step you want to start with by using Stage#transition . Note The main caviat, and it's a small one, is that you must either transition or exit from a step. If you don't your program will be stuck in a sort of limbo. Here is an example of a simple transition: @[ Step ( :name , initial : true ) ] def ask_name ( client ) send_message ( self . chat_id , \"What is your name?\" ) self . await_response do | ctx | self . context . name = ctx . text self . transition :age end end @[ Step ( :age ) ] def ask_age ( client ) send_message ( self . chat_id , \"How about your age?\" ) self . await_response do | ctx | self . context . age = ctx . age self . exit end end For a more example of Stage use, see examples/stage_bot.cr .","title":"Stage"},{"location":"features/stage/#stage","text":"Stages, sometimes also called wizards or conversations, are a simple way to add a bit of life to your bot. They allow you to send input and wait for feedback before proceeding. For example, say your bot was being used to register a user for a service. You could ask questions like \"What is your full name?\" or \"Would you have expected the Spanish Inquisition?\" and receive responses. In Tourmaline the Stage class tries to mock Tourmaline::Client as closely as possible, while providing an additional annotation called Step . Let's take a look at how a simple Stage might look: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class NameAsker ( String ) < Stage ( T ) @[ Step ( :name , initial : true ) ] def ask_name ( client ) send_message ( self . chat_id , \"What is your name?\" ) # in will be passed to this block. self . await_response do | ctx | self . context = ctx . text self . exit end end end class MyBot < Tourmaline :: Client @[ Command ( \"start\" ) ] def start_command ( ctx ) stage = NameAsker . enter ( self , chat_id : ctx . message . chat_id , context : \"\" ) stage . on_exit do | name | ctx . message . respond ( \"You entered #{ name } \" ) end end end","title":"Stage"},{"location":"features/stage/#steps","text":"Stages are composed of steps which are created either with Stage#on or with the Step annotation. If a step is tagged with initial: true it will be the first step in the series. If no step is tagged with initial: true you will have to manually transition to the step you want to start with by using Stage#transition . Note The main caviat, and it's a small one, is that you must either transition or exit from a step. If you don't your program will be stuck in a sort of limbo. Here is an example of a simple transition: @[ Step ( :name , initial : true ) ] def ask_name ( client ) send_message ( self . chat_id , \"What is your name?\" ) self . await_response do | ctx | self . context . name = ctx . text self . transition :age end end @[ Step ( :age ) ] def ask_age ( client ) send_message ( self . chat_id , \"How about your age?\" ) self . await_response do | ctx | self . context . age = ctx . age self . exit end end For a more example of Stage use, see examples/stage_bot.cr .","title":"Steps"},{"location":"features/tdlight/","text":"TDLight # TDLight is a fork of the Telegram Bot API with more methods and optional user support. Tourmaline has out of the box support for TDLight, including support for its User API methods. All supported TDLight specific methods can be found here . If you want to use TDLight without running your own API server you can use one of the official TDLight managed servers such as telegram.rest . User API # Unlike the normal Bot API, TDLight supports user mode. While pretty limited at the moment, this gives you the ability to log in with a user account and treat it as you would a normal bot (with some restrictions of course). Logging in with a user account is a 2 step process: First: Call login with the phone number that's attached to your account. This will return a user_token which can be saved and provided directly to the Client.new method later. Second: Telegram should've sent a code to a logged in client or your phone. Call send_code with that code to complete the authorization process. If all went well you should now be logged in and able to do most of the same things that bots can do. Some methods are (obviously) not available as a user. This includes: answer_callback_query set_my_commands edit_message_reply_markup upload_sticker_file create_new_sticker_set add_sticker_to_set set_sticker_position_in_set delete_sticker_from_set set_sticker_set_thumb send_invoice answer_shipping_query answer_pre_checkout_query set_passport_data_errors send_game set_game_score get_game_highscores It is also not possible to attach reply_markup to your messages. Outgoing Messages # The main downside to using TDLight for your userbot is the lack of support (currently) for outgoing messages. There is an issue for this, and hopefully it will be resolved soon.","title":"TDLight"},{"location":"features/tdlight/#tdlight","text":"TDLight is a fork of the Telegram Bot API with more methods and optional user support. Tourmaline has out of the box support for TDLight, including support for its User API methods. All supported TDLight specific methods can be found here . If you want to use TDLight without running your own API server you can use one of the official TDLight managed servers such as telegram.rest .","title":"TDLight"},{"location":"features/tdlight/#user-api","text":"Unlike the normal Bot API, TDLight supports user mode. While pretty limited at the moment, this gives you the ability to log in with a user account and treat it as you would a normal bot (with some restrictions of course). Logging in with a user account is a 2 step process: First: Call login with the phone number that's attached to your account. This will return a user_token which can be saved and provided directly to the Client.new method later. Second: Telegram should've sent a code to a logged in client or your phone. Call send_code with that code to complete the authorization process. If all went well you should now be logged in and able to do most of the same things that bots can do. Some methods are (obviously) not available as a user. This includes: answer_callback_query set_my_commands edit_message_reply_markup upload_sticker_file create_new_sticker_set add_sticker_to_set set_sticker_position_in_set delete_sticker_from_set set_sticker_set_thumb send_invoice answer_shipping_query answer_pre_checkout_query set_passport_data_errors send_game set_game_score get_game_highscores It is also not possible to attach reply_markup to your messages.","title":"User API"},{"location":"features/tdlight/#outgoing-messages","text":"The main downside to using TDLight for your userbot is the lack of support (currently) for outgoing messages. There is an issue for this, and hopefully it will be resolved soon.","title":"Outgoing Messages"},{"location":"resources/faq/","text":"Frequently Asked Questions # This is an FAQ for Tourmaline, but the answers should be generalized enough to use as a general FAQ for Telegram bots. Why isn't my bot responding? # Well first of all, have you programmed it? I know it might sound crazy, but 99% of the people that ask this question didn't actually program their bot. Rather they just created a bot with BotFather and expected things to magically work. If the answer to that question is \"yes\", as I hope it is, then there are a few things to try. First of all, make sure you are using the correct API token for the bot you're trying to access. If you have multiple bots it can become pretty easy to accidentally grab the wrong token. Assuming you have the right token, be sure to check that your bot is actually running and that you have a working internet connection. Try running your bot with the LOG_LEVEL environement variable set to DEBUG and check the logs. When running in polling mode you should see a whole bunch of calls to getUpdates . If that didn't work, you may need to check if group privacy mode is turned on. Go to BotFather, send the command /mybots , select your bot, go to Bot Settings > Group Privacy > Turn off . This should only be necessary if your bot is running in groups and you're using non-standard command prefixes, or other handlers like the HearsHandler . Lastly be sure to check the commands you're trying to send. The standard CommandHandler will only respond to commands with the / prefix. Also be sure to remember that command names should be unprefixed. For example: - @[Command(\"/echo\")] + @[Command(\"echo\")] What messages can my bot see? # Depends partially on whether group privacy mode is turned on or not. As a general rule your bot will not see messages sent by other bots. There is no way around this. If your bot is an admin in the group it will see all messages, except those sent by other bots. With group privacy mode turned on (the default) you bot will receive: Commands explicitly meant for them (e.g., /command@this_bot ). General commands from users (e.g. /start ) if the bot was the last bot to send a message to the group. Messages sent via this bot. Replies to any messages implicitly or explicitly meant for this bot. Additionally all bots, regardless of the group privacy mode will receive: All service messages. All messages from private chats with users. All messages from channels where they are a member. Note Eeach particular message can only be available to one privacy-enabled bot at a time, i.e., a reply to bot A containing an explicit command for bot B or sent via bot C will only be available to bot A. Replies have the highest priority. Can bots delete messages? # Yes, under 2 conditions: The bot must have the Delete Messages permission The message must be less than 48 hours old How can I add my bot to a group? # Same way you add any other user. On the desktop client this can be done by clicking the ellipses in the top right corner while viewing your group, clicking Info , and then clicking the Add button. If your bot is meant to be added to groups you can make this a bit easier by giving users a link to do so. The URL for the link should be http://telegram.me/BOT_NAME?startgroup=botstart where BOTNAME is the username of your bot. How can I get a user's information? # Bots are not capable of accessing a user's information soley based off of their user id or username, however there are some ways around this. The simplest is to keep a record of each user your bot comes in contact with by watching incoming messages for the user that sent them. An example of this could be as follows: @[ On ( :message ) ] def persist_users ( update ) if message = update . message # Convenience method to get all users from a message users = message . users # ... add them to a database end end The one exception to this rule is chat members . If you know the user's id or username and a group that they belong to which your bot also belongs to, you can use #get_chat_member to get their ChatMember record. I have a question not listed here, where can I ask? # Feel free to join the official Tourmaline/Proton Chat on Telegram and ask away.","title":"FAQ"},{"location":"resources/faq/#frequently-asked-questions","text":"This is an FAQ for Tourmaline, but the answers should be generalized enough to use as a general FAQ for Telegram bots.","title":"Frequently Asked Questions"},{"location":"resources/faq/#why-isnt-my-bot-responding","text":"Well first of all, have you programmed it? I know it might sound crazy, but 99% of the people that ask this question didn't actually program their bot. Rather they just created a bot with BotFather and expected things to magically work. If the answer to that question is \"yes\", as I hope it is, then there are a few things to try. First of all, make sure you are using the correct API token for the bot you're trying to access. If you have multiple bots it can become pretty easy to accidentally grab the wrong token. Assuming you have the right token, be sure to check that your bot is actually running and that you have a working internet connection. Try running your bot with the LOG_LEVEL environement variable set to DEBUG and check the logs. When running in polling mode you should see a whole bunch of calls to getUpdates . If that didn't work, you may need to check if group privacy mode is turned on. Go to BotFather, send the command /mybots , select your bot, go to Bot Settings > Group Privacy > Turn off . This should only be necessary if your bot is running in groups and you're using non-standard command prefixes, or other handlers like the HearsHandler . Lastly be sure to check the commands you're trying to send. The standard CommandHandler will only respond to commands with the / prefix. Also be sure to remember that command names should be unprefixed. For example: - @[Command(\"/echo\")] + @[Command(\"echo\")]","title":"Why isn't my bot responding?"},{"location":"resources/faq/#what-messages-can-my-bot-see","text":"Depends partially on whether group privacy mode is turned on or not. As a general rule your bot will not see messages sent by other bots. There is no way around this. If your bot is an admin in the group it will see all messages, except those sent by other bots. With group privacy mode turned on (the default) you bot will receive: Commands explicitly meant for them (e.g., /command@this_bot ). General commands from users (e.g. /start ) if the bot was the last bot to send a message to the group. Messages sent via this bot. Replies to any messages implicitly or explicitly meant for this bot. Additionally all bots, regardless of the group privacy mode will receive: All service messages. All messages from private chats with users. All messages from channels where they are a member. Note Eeach particular message can only be available to one privacy-enabled bot at a time, i.e., a reply to bot A containing an explicit command for bot B or sent via bot C will only be available to bot A. Replies have the highest priority.","title":"What messages can my bot see?"},{"location":"resources/faq/#can-bots-delete-messages","text":"Yes, under 2 conditions: The bot must have the Delete Messages permission The message must be less than 48 hours old","title":"Can bots delete messages?"},{"location":"resources/faq/#how-can-i-add-my-bot-to-a-group","text":"Same way you add any other user. On the desktop client this can be done by clicking the ellipses in the top right corner while viewing your group, clicking Info , and then clicking the Add button. If your bot is meant to be added to groups you can make this a bit easier by giving users a link to do so. The URL for the link should be http://telegram.me/BOT_NAME?startgroup=botstart where BOTNAME is the username of your bot.","title":"How can I add my bot to a group?"},{"location":"resources/faq/#how-can-i-get-a-users-information","text":"Bots are not capable of accessing a user's information soley based off of their user id or username, however there are some ways around this. The simplest is to keep a record of each user your bot comes in contact with by watching incoming messages for the user that sent them. An example of this could be as follows: @[ On ( :message ) ] def persist_users ( update ) if message = update . message # Convenience method to get all users from a message users = message . users # ... add them to a database end end The one exception to this rule is chat members . If you know the user's id or username and a group that they belong to which your bot also belongs to, you can use #get_chat_member to get their ChatMember record.","title":"How can I get a user's information?"},{"location":"resources/faq/#i-have-a-question-not-listed-here-where-can-i-ask","text":"Feel free to join the official Tourmaline/Proton Chat on Telegram and ask away.","title":"I have a question not listed here, where can I ask?"},{"location":"usage/","text":"Introduction # Bots are the figurative workhorses of Telegram's platform, allowing for everything from group management to file conversion and more; but how does one make a bot? Well that is the question I aim to answer in this brief introduction. If you already know how to make a bot, and would like to focus more on how to make a bot with Tourmaline, feel free to skip to the Getting Started . The BotFather # Every journey has to start somewhere, and for the would-be Telegram bot developer that is BotFather . BotFather itself is a Telegram bot which allows you to create and manage your own bots. As is convention, you can start BotFather by starting a conversation and pressing the \"Start\" button or sending the /start command. To create a new bot, just send the /newbot command. BotFather will then ask a couple questions which sometimes confuse people. Alright, a new bot. How are we going to call it? Please choose a name for your bot.\" The first question is asking for the screen name of your bot. This is the name that will appear when it sends messages and not its username. Good. Now let's choose a username for your bot. It must end in bot . Like this, for example: TetrisBot or tetris_bot. Now this is your bot's username. As it states, your bot's username must end with the word \"bot\". Capitalization doesn't matter, but ending with the word \"bot\" is pertinant. I won't go into more detail as to how to setup a bot here as you can just run /help to see all of the available commands, but once you finish the bot creation you will be presented with an API Token. KEEP THIS SAFE . Your token is for your eyes and your eyes only, as anyone with half a brain can take your token and use it to control your bot maliciously. We will also need this token later, so keep it handy. Running Your Bot # A bot is nothing more than code running on a computer somewhere. In most cases during development and testing that computer will probably be your own, but what happens when you're ready to share your bot with the world? At that point, running your bot on your own local machine isn't the best idea. Personal computers need to sleep, be restarted every now and then, and have more important jobs than hosting a bot 24/7. Enter the VPS. If you already have a server on which to run your bot, or are at least familiar with how to deploy your bot elsewhere you can probably skip this section. For anyone left remaining, you need a server. Far and away the most affordable method of getting your own server is by using a VPS, or virtual private server. Providers like AWS, DigitalOcean, Vultr, and Hetzner (my personal favorite) provide these for as little as $2-5/mo. To use a VPS you will need some knowledge of Linux, including how to use ssh to remotely access a server. If Linux is foreign to you I highly recommend getting aquainted, as it's going to be very important going forward. We will go into more detail about how to actually run your bot on your VPS later in this guide. Avoiding Limits # Telegram bots are heavily limited in what they can, and cannot do. The good news is that these limits are mostly documented when it comes to bots, so avoiding them is completely in your control. For more information on the current limits I recommend reading \"My bot is hitting limits, how do I avoid this?\" from the Telegram FAQ.","title":"Usage"},{"location":"usage/#introduction","text":"Bots are the figurative workhorses of Telegram's platform, allowing for everything from group management to file conversion and more; but how does one make a bot? Well that is the question I aim to answer in this brief introduction. If you already know how to make a bot, and would like to focus more on how to make a bot with Tourmaline, feel free to skip to the Getting Started .","title":"Introduction"},{"location":"usage/#the-botfather","text":"Every journey has to start somewhere, and for the would-be Telegram bot developer that is BotFather . BotFather itself is a Telegram bot which allows you to create and manage your own bots. As is convention, you can start BotFather by starting a conversation and pressing the \"Start\" button or sending the /start command. To create a new bot, just send the /newbot command. BotFather will then ask a couple questions which sometimes confuse people. Alright, a new bot. How are we going to call it? Please choose a name for your bot.\" The first question is asking for the screen name of your bot. This is the name that will appear when it sends messages and not its username. Good. Now let's choose a username for your bot. It must end in bot . Like this, for example: TetrisBot or tetris_bot. Now this is your bot's username. As it states, your bot's username must end with the word \"bot\". Capitalization doesn't matter, but ending with the word \"bot\" is pertinant. I won't go into more detail as to how to setup a bot here as you can just run /help to see all of the available commands, but once you finish the bot creation you will be presented with an API Token. KEEP THIS SAFE . Your token is for your eyes and your eyes only, as anyone with half a brain can take your token and use it to control your bot maliciously. We will also need this token later, so keep it handy.","title":"The BotFather"},{"location":"usage/#running-your-bot","text":"A bot is nothing more than code running on a computer somewhere. In most cases during development and testing that computer will probably be your own, but what happens when you're ready to share your bot with the world? At that point, running your bot on your own local machine isn't the best idea. Personal computers need to sleep, be restarted every now and then, and have more important jobs than hosting a bot 24/7. Enter the VPS. If you already have a server on which to run your bot, or are at least familiar with how to deploy your bot elsewhere you can probably skip this section. For anyone left remaining, you need a server. Far and away the most affordable method of getting your own server is by using a VPS, or virtual private server. Providers like AWS, DigitalOcean, Vultr, and Hetzner (my personal favorite) provide these for as little as $2-5/mo. To use a VPS you will need some knowledge of Linux, including how to use ssh to remotely access a server. If Linux is foreign to you I highly recommend getting aquainted, as it's going to be very important going forward. We will go into more detail about how to actually run your bot on your VPS later in this guide.","title":"Running Your Bot"},{"location":"usage/#avoiding-limits","text":"Telegram bots are heavily limited in what they can, and cannot do. The good news is that these limits are mostly documented when it comes to bots, so avoiding them is completely in your control. For more information on the current limits I recommend reading \"My bot is hitting limits, how do I avoid this?\" from the Telegram FAQ.","title":"Avoiding Limits"},{"location":"usage/getting_started/","text":"Getting Started with Tourmaline # Time to create your first bot with Tourmaline! Installing Tourmaline # This guide assumes that you have Crystal installed and are at least semi-familiar with the syntax. The first thing we are going to need is a fresh Crystal project, so go ahead and run crystal init app your_bot_name , making sure to replace \"your_bot_name\" with whatever you want to call your bot. I'm going to use the famous echo_bot example. Once it's finished, cd into the project directory. Now, open shard.yml and add the following lines anywhere in the file (probably at the end): 1 2 3 dependencies : tourmaline : github : protoncr/tourmaline Save the file, and run shards install . That's it! Tourmaline is now installed. Creating Your Bot # Now it's time to write some code. Open src/echo_bot.cr or whatever file was generated for you, and paste in the following code. The code is annotated so you can understand what's going on every step of the way. 1 2 3 4 5 6 7 8 9 10 11 require \"tourmaline\" # (1) class EchoBot < Tourmaline :: Client # (2) @[ Command ( \"echo\" ) ] # (3) def echo_command ( ctx ) ctx . message . reply ( ctx . text ) # (4) end end bot = EchoBot . new ( bot_token : ENV [ \"API_KEY\" ] ) # (5) bot . poll # (6) First we have to import Tourmaline into our code. In Crystal this is done with the require statement. Next we extend Tourmaline::Client and use it to create our own class. In this example we're going to go with the annotation approach to creating bots. Annotations use the @[Annotation(params)] syntax and can decorate classes and methods. In this case, we're annotating the echo_command method with the Command annotation, which turns the method into a command handler. Within the echo_command method we're just going to echo whatever the user said back to them, so we use the reply method which exists on the Message object and send ctx.text (the user's message text minus the command) back to them. Almost done. Now we need to create a new instance of our EchoBot . Since we extended Tourmaline::Client and didn't provide a custom initializer our bot takes the same arguments, so we can provide it with our API Key as an environment variable. The last step is to start our bot. We can do that by \"long polling\" using the poll method. And that's really all their is to it. Now we can run our code! export API_KEY = YOUR_BOT_API_TOKEN crystal run ./src/echo_bot.cr You should be greeted with a log message in your console telling you that your bot is running, and if you visit your bot on Telegram and run the /echo command with some text (eg /echo hello world ), you should receive a message in reply.","title":"Getting Started"},{"location":"usage/getting_started/#getting-started-with-tourmaline","text":"Time to create your first bot with Tourmaline!","title":"Getting Started with Tourmaline"},{"location":"usage/getting_started/#installing-tourmaline","text":"This guide assumes that you have Crystal installed and are at least semi-familiar with the syntax. The first thing we are going to need is a fresh Crystal project, so go ahead and run crystal init app your_bot_name , making sure to replace \"your_bot_name\" with whatever you want to call your bot. I'm going to use the famous echo_bot example. Once it's finished, cd into the project directory. Now, open shard.yml and add the following lines anywhere in the file (probably at the end): 1 2 3 dependencies : tourmaline : github : protoncr/tourmaline Save the file, and run shards install . That's it! Tourmaline is now installed.","title":"Installing Tourmaline"},{"location":"usage/getting_started/#creating-your-bot","text":"Now it's time to write some code. Open src/echo_bot.cr or whatever file was generated for you, and paste in the following code. The code is annotated so you can understand what's going on every step of the way. 1 2 3 4 5 6 7 8 9 10 11 require \"tourmaline\" # (1) class EchoBot < Tourmaline :: Client # (2) @[ Command ( \"echo\" ) ] # (3) def echo_command ( ctx ) ctx . message . reply ( ctx . text ) # (4) end end bot = EchoBot . new ( bot_token : ENV [ \"API_KEY\" ] ) # (5) bot . poll # (6) First we have to import Tourmaline into our code. In Crystal this is done with the require statement. Next we extend Tourmaline::Client and use it to create our own class. In this example we're going to go with the annotation approach to creating bots. Annotations use the @[Annotation(params)] syntax and can decorate classes and methods. In this case, we're annotating the echo_command method with the Command annotation, which turns the method into a command handler. Within the echo_command method we're just going to echo whatever the user said back to them, so we use the reply method which exists on the Message object and send ctx.text (the user's message text minus the command) back to them. Almost done. Now we need to create a new instance of our EchoBot . Since we extended Tourmaline::Client and didn't provide a custom initializer our bot takes the same arguments, so we can provide it with our API Key as an environment variable. The last step is to start our bot. We can do that by \"long polling\" using the poll method. And that's really all their is to it. Now we can run our code! export API_KEY = YOUR_BOT_API_TOKEN crystal run ./src/echo_bot.cr You should be greeted with a log message in your console telling you that your bot is running, and if you visit your bot on Telegram and run the /echo command with some text (eg /echo hello world ), you should receive a message in reply.","title":"Creating Your Bot"}]}