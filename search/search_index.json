{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":".md-content__button { display: none; } .md-content .logo { width: 150px; display: block; margin: 0px auto 20px auto; } .md-content .md-typeset h1, .md-content .md-typeset h2 { text-align: center; margin: 0; } .md-content .md-typeset h1 { text-align: center; margin-bottom: 0.12em; } .md-content .md-typeset .headerlink { display: none; } .md-content .md-typeset .quickstart { display: flex; flex-direction: row; justify-content: center; } Tourmaline Crystal Telegram Bot Framework Quickstart Tourmaline uses Crystal to communicate with the Telegram Bot API. Therefore to use Tourmaline you should be familiar with how Crystal works. Once inside of a Crystal project, add Tourmaline to your shard.yml file and run shards install to install it. For more information, see the getting started page. require \"tourmaline\" include Tourmaline # To shorten things bot = Client . new ( bot_token : \"YOUR_API_TOKEN\" ) echo_handler = Handlers :: CommandHandler . new ( \"echo\" ) do | ctx | ctx . message . reply ( ctx . text ) end bot . add_event_handler ( echo_handler ) bot . poll","title":"Home"},{"location":"SUMMARY/","text":"Home Usage Getting Started Resources FAQ Asking Questions API Reference Changelog Tourmaline","title":"SUMMARY"},{"location":"changelog/","text":"Tourmaline Changelog # I will do my best to keep this updated with changes as they happen. 0.27.0 # Added full support for Bot API 6.3 (breaking change) All is_ prefixed properties in models have been replaced with ? getters. For instance, is_anonymous is now anonymous? . (breaking change) Client#default_parse_mode and Client#default_command_prefixes have been made class properties instead of instance properties. Fixed issues with missing priority and group properties on event handlers. (breaking change) extra/paginated_keyboard no longer extends InlineKeyboardMarkup . Added methods Client#send_paginated_keyboard , Chat#send_paginated_keyboard , Message#reply_with_paginated_keyboard , and Message#respond_with_paginated_keyboard . Requires import of extra/paginated_keyboard . Fixed broken parts of extra/routed_menu . Fixed broken parts of extra/stage . Handlers no longer require an instance of Tourmaline::Client . Added several new UpdateAction s including ThreadMessage , ForumTopicCreated , ForumTopicClosed , ForumTopicReopened , VideoChatScheduled , VideoChatStarted , VideoChatEnded , VideoChatParticipantsInvited , and WebAppData . Bot examples have all been fixed More, see the official Bot API changelog for a complete list of changes. 0.25.1 # Added sender_type method and SenderType enum to Message , allowing the user to easily figure out what type of user or channel sent the given message. Updated docs 0.25.0 # Removed Container class which was being used to maintain a global instance of Client . Added finish_init method to all models, allowing them to contain an instance of the Client that created them. 0.24.0 # Added full support for Bot API 5.4 and 5.5 More, see the official Bot API changelog for a complete list of changes. 0.23.0 # Added full support for Bot API 5.1 - 5.3 Fixed some dependencies. Added additional classes ChatInviteLink , VoiceChatStarted , VoiceChatEnded , VoiceChatParticipantInvited , VoiceChatScheduled , MessageAutoDeleteTimerChanged , InputInvoiceMessageContent , and BotCommandScope . Added scope and language_code options to set_my_commands and get_my_commands . Added method delete_my_commands . More, see the official Bot API changelog for a complete list of changes. 0.22.0 # Added support for TDLight. Added user_token argument to Client.new to support the TDLight user API. (breaking change) All arguments to Client.new are now keyword arguments. (breaking change) Removed async argument from event handlers. All events are now async by default. Async events can be disabled with the -Dno_async flag. UpdateHandler now accepts an array of UpdateAction , or a single one. Fixed an issue where poll always deletes a set webhook. Now it will only delete the webhook if delete_webhook is true. 0.20.0 # (breaking change) Removed the filters, replaced with new handlers (breaking change) Removed Granite specific DB includes from models (also commented out db_persistence.cr ; next update should make persistence better) (breaking change) Renamed PagedInlineKeyboard to PagedKeyboard Added RoutedMenu class for easy menu building 0.19.1 # Replace broken Int in unions with Int::Primitive Make Helpers.random_string actually return a random string, not just a number Change the first run logic in Stage 0.19.0 # Added support for Passport Added animated? to Sticker Added several new filters including InlineQueryFilter and CallbackQueryFilter Added connection pooling to fix concurrency errors Events are now async by default Added a new helper class PagedInlineKeyboard (breaking change) Moved KemalAdapter to tourmaline/extra Added proxy support based on mamantoha/http_proxy Added support for multiple prefixes with commands Allow changing the log level using the LOG environment variable Added an InstaBot example (breaking change) Disabled (commented out) DBPersistence for now Updated for bot API 4.9 Added support for the \ud83c\udfc0 emoji, including methods Client#send_basket , Message#reply_with_basket , and Message#respond_with_basket Added via_bot field to Message Added Stage (importable from tourmaline/extra ) for conversation handling 0.18.1 # Added ameba checks Replaced Halite with HTTP::Client , resulting in a major speed boost Rename persistent_init and persistent_cleanup to init and cleanup respectively Remove handle_error in favor of Error.from_code 0.18.0 # Updated polls for Quiz 2.0 Added new send_dart method 0.17.0 # KeyboardMarkup (breaking change) Replace Markup class with KeyboardBuilder abstract class and extend it with ReplyKeyboardMarkup::Builder and InlineKeyboardMarkup::Builder . Add .build methods to ReplyKeyboardMarkup and InlineKeyboardMarkup . (breaking change) Replace QueryResultBuilder with InlineQueryResult::Builder . Update examples with new Builder classes being used. InlineQueryResult (breaking change) Replace QueryResultBuilder with InlineQueryResult::Builder . Add .build method to InlineQueryResult . Update examples with new Builder classes being used. Persistence (breaking change) Made Persistence a class rather than a module and updated HashPersistence and JsonPersistence to use it. Add persistence instance variable to Client Add NilPersistence and make it the default persistence for new Client s Add DBPersistence 0.16.0 # Add CHANGELOG Add support for Filters. Add users methods to Update and Message to return all users included in the same. Replaced usage of the strange logger with the new Crystal Log class. Log all updates with Debug severity if VERBOSE environment variable is set to true . (breaking change) Renamed File to TFile to avoid conflicting with the builtin File class. (breaking change) removed the Handler class and all subclasses. Update handling is now done exclusively with the EventHandler class and Filter s. 0.15.1 # Fix bug with event handler that was causing On handlers to run on every update. Add CNAME file for tourmaline.dev Update the logo. Add DiceBot example. 0.15.0 # Updated to bot API 4.7 Add send_dice method to client. Add BotCommand model along with get_my_commands and set_my_commands methods. Add new sticker/sticker set methods. Add Dice update action.","title":"Changelog"},{"location":"changelog/#tourmaline-changelog","text":"I will do my best to keep this updated with changes as they happen.","title":"Tourmaline Changelog"},{"location":"changelog/#0270","text":"Added full support for Bot API 6.3 (breaking change) All is_ prefixed properties in models have been replaced with ? getters. For instance, is_anonymous is now anonymous? . (breaking change) Client#default_parse_mode and Client#default_command_prefixes have been made class properties instead of instance properties. Fixed issues with missing priority and group properties on event handlers. (breaking change) extra/paginated_keyboard no longer extends InlineKeyboardMarkup . Added methods Client#send_paginated_keyboard , Chat#send_paginated_keyboard , Message#reply_with_paginated_keyboard , and Message#respond_with_paginated_keyboard . Requires import of extra/paginated_keyboard . Fixed broken parts of extra/routed_menu . Fixed broken parts of extra/stage . Handlers no longer require an instance of Tourmaline::Client . Added several new UpdateAction s including ThreadMessage , ForumTopicCreated , ForumTopicClosed , ForumTopicReopened , VideoChatScheduled , VideoChatStarted , VideoChatEnded , VideoChatParticipantsInvited , and WebAppData . Bot examples have all been fixed More, see the official Bot API changelog for a complete list of changes.","title":"0.27.0"},{"location":"changelog/#0251","text":"Added sender_type method and SenderType enum to Message , allowing the user to easily figure out what type of user or channel sent the given message. Updated docs","title":"0.25.1"},{"location":"changelog/#0250","text":"Removed Container class which was being used to maintain a global instance of Client . Added finish_init method to all models, allowing them to contain an instance of the Client that created them.","title":"0.25.0"},{"location":"changelog/#0240","text":"Added full support for Bot API 5.4 and 5.5 More, see the official Bot API changelog for a complete list of changes.","title":"0.24.0"},{"location":"changelog/#0230","text":"Added full support for Bot API 5.1 - 5.3 Fixed some dependencies. Added additional classes ChatInviteLink , VoiceChatStarted , VoiceChatEnded , VoiceChatParticipantInvited , VoiceChatScheduled , MessageAutoDeleteTimerChanged , InputInvoiceMessageContent , and BotCommandScope . Added scope and language_code options to set_my_commands and get_my_commands . Added method delete_my_commands . More, see the official Bot API changelog for a complete list of changes.","title":"0.23.0"},{"location":"changelog/#0220","text":"Added support for TDLight. Added user_token argument to Client.new to support the TDLight user API. (breaking change) All arguments to Client.new are now keyword arguments. (breaking change) Removed async argument from event handlers. All events are now async by default. Async events can be disabled with the -Dno_async flag. UpdateHandler now accepts an array of UpdateAction , or a single one. Fixed an issue where poll always deletes a set webhook. Now it will only delete the webhook if delete_webhook is true.","title":"0.22.0"},{"location":"changelog/#0200","text":"(breaking change) Removed the filters, replaced with new handlers (breaking change) Removed Granite specific DB includes from models (also commented out db_persistence.cr ; next update should make persistence better) (breaking change) Renamed PagedInlineKeyboard to PagedKeyboard Added RoutedMenu class for easy menu building","title":"0.20.0"},{"location":"changelog/#0191","text":"Replace broken Int in unions with Int::Primitive Make Helpers.random_string actually return a random string, not just a number Change the first run logic in Stage","title":"0.19.1"},{"location":"changelog/#0190","text":"Added support for Passport Added animated? to Sticker Added several new filters including InlineQueryFilter and CallbackQueryFilter Added connection pooling to fix concurrency errors Events are now async by default Added a new helper class PagedInlineKeyboard (breaking change) Moved KemalAdapter to tourmaline/extra Added proxy support based on mamantoha/http_proxy Added support for multiple prefixes with commands Allow changing the log level using the LOG environment variable Added an InstaBot example (breaking change) Disabled (commented out) DBPersistence for now Updated for bot API 4.9 Added support for the \ud83c\udfc0 emoji, including methods Client#send_basket , Message#reply_with_basket , and Message#respond_with_basket Added via_bot field to Message Added Stage (importable from tourmaline/extra ) for conversation handling","title":"0.19.0"},{"location":"changelog/#0181","text":"Added ameba checks Replaced Halite with HTTP::Client , resulting in a major speed boost Rename persistent_init and persistent_cleanup to init and cleanup respectively Remove handle_error in favor of Error.from_code","title":"0.18.1"},{"location":"changelog/#0180","text":"Updated polls for Quiz 2.0 Added new send_dart method","title":"0.18.0"},{"location":"changelog/#0170","text":"KeyboardMarkup (breaking change) Replace Markup class with KeyboardBuilder abstract class and extend it with ReplyKeyboardMarkup::Builder and InlineKeyboardMarkup::Builder . Add .build methods to ReplyKeyboardMarkup and InlineKeyboardMarkup . (breaking change) Replace QueryResultBuilder with InlineQueryResult::Builder . Update examples with new Builder classes being used. InlineQueryResult (breaking change) Replace QueryResultBuilder with InlineQueryResult::Builder . Add .build method to InlineQueryResult . Update examples with new Builder classes being used. Persistence (breaking change) Made Persistence a class rather than a module and updated HashPersistence and JsonPersistence to use it. Add persistence instance variable to Client Add NilPersistence and make it the default persistence for new Client s Add DBPersistence","title":"0.17.0"},{"location":"changelog/#0160","text":"Add CHANGELOG Add support for Filters. Add users methods to Update and Message to return all users included in the same. Replaced usage of the strange logger with the new Crystal Log class. Log all updates with Debug severity if VERBOSE environment variable is set to true . (breaking change) Renamed File to TFile to avoid conflicting with the builtin File class. (breaking change) removed the Handler class and all subclasses. Update handling is now done exclusively with the EventHandler class and Filter s.","title":"0.16.0"},{"location":"changelog/#0151","text":"Fix bug with event handler that was causing On handlers to run on every update. Add CNAME file for tourmaline.dev Update the logo. Add DiceBot example.","title":"0.15.1"},{"location":"changelog/#0150","text":"Updated to bot API 4.7 Add send_dice method to client. Add BotCommand model along with get_my_commands and set_my_commands methods. Add new sticker/sticker set methods. Add Dice update action.","title":"0.15.0"},{"location":"api_reference/Slice/","text":"struct Slice(T) inherits Struct # A Slice is a Pointer with an associated size. While a pointer is unsafe because no bound checks are performed when reading from and writing to it, reading from and writing to a slice involve bound checks. In this way, a slice is a safe alternative to Pointer . A Slice can be created as read-only: trying to write to it will raise. For example the slice of bytes returned by String#to_slice is read-only. Included modules Comparable Indexable","title":"::: Slice"},{"location":"api_reference/Slice/#Slice","text":"A Slice is a Pointer with an associated size. While a pointer is unsafe because no bound checks are performed when reading from and writing to it, reading from and writing to a slice involve bound checks. In this way, a slice is a safe alternative to Pointer . A Slice can be created as read-only: trying to write to it will raise. For example the slice of bytes returned by String#to_slice is read-only.","title":"Slice"},{"location":"api_reference/Tourmaline/","text":"module Tourmaline # Tourmaline is a Telegram Bot API library for Telegram . It provides an easy to use interface for creating telegram bots, and using the various bot APIs that Telegram provides. For usage examples, see the examples directory. For guides on using Tourmaline, see the official Tourmaline cookbook . Constants # VERSION = \"0.28.0\" #","title":"Tourmaline"},{"location":"api_reference/Tourmaline/#Tourmaline","text":"Tourmaline is a Telegram Bot API library for Telegram . It provides an easy to use interface for creating telegram bots, and using the various bot APIs that Telegram provides. For usage examples, see the examples directory. For guides on using Tourmaline, see the official Tourmaline cookbook .","title":"Tourmaline"},{"location":"api_reference/Tourmaline/#Tourmaline-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/#Tourmaline::VERSION","text":"","title":"VERSION"},{"location":"api_reference/Tourmaline/Animation/","text":"class Tourmaline::Animation inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_id : String # View source #file_name : String? # View source #file_size : Int64? # View source #file_unique_id : String # View source #mime_type : String? # View source #thumbnail : PhotoSize? # View source","title":"Animation"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation","text":"","title":"Animation"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#file_name","text":"View source","title":"#file_name"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#mime_type","text":"View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#thumbnail","text":"View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/Audio/","text":"class Tourmaline::Audio inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #duration : Int32 # View source #file_id : String # View source #file_name : String? # View source #file_size : Int64? # View source #file_unique_id : String # View source #mime_type : String? # View source #performer : String? # View source #thumbnail : PhotoSize? # View source #title : String? # View source","title":"Audio"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio","text":"","title":"Audio"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#duration","text":"View source","title":"#duration"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#file_name","text":"View source","title":"#file_name"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#mime_type","text":"View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#performer","text":"View source","title":"#performer"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#thumbnail","text":"View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/BotCommand/","text":"class Tourmaline::BotCommand inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #command : String # View source #description : String # View source #to_h # View source","title":"BotCommand"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand","text":"","title":"BotCommand"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand#command","text":"View source","title":"#command"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand#to_h","text":"View source","title":"#to_h"},{"location":"api_reference/Tourmaline/BotCommandScope/","text":"alias Tourmaline::BotCommandScope # Alias definition Tourmaline::BotCommandScopeAllChatAdministrators | Tourmaline::BotCommandScopeAllGroupChats | Tourmaline::BotCommandScopeAllPrivateChats | Tourmaline::BotCommandScopeChat | Tourmaline::BotCommandScopeChatAdministrators | Tourmaline::BotCommandScopeChatMember | Tourmaline::BotCommandScopeDefault","title":"BotCommandScope"},{"location":"api_reference/Tourmaline/BotCommandScope/#Tourmaline::BotCommandScope","text":"","title":"BotCommandScope"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/","text":"class Tourmaline::BotCommandScopeAllChatAdministrators inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #type : String # View source","title":"BotCommandScopeAllChatAdministrators"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/#Tourmaline::BotCommandScopeAllChatAdministrators","text":"","title":"BotCommandScopeAllChatAdministrators"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/#Tourmaline::BotCommandScopeAllChatAdministrators-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/#Tourmaline::BotCommandScopeAllChatAdministrators.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/#Tourmaline::BotCommandScopeAllChatAdministrators-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/#Tourmaline::BotCommandScopeAllChatAdministrators#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/","text":"class Tourmaline::BotCommandScopeAllGroupChats inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #type : String # View source","title":"BotCommandScopeAllGroupChats"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/#Tourmaline::BotCommandScopeAllGroupChats","text":"","title":"BotCommandScopeAllGroupChats"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/#Tourmaline::BotCommandScopeAllGroupChats-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/#Tourmaline::BotCommandScopeAllGroupChats.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/#Tourmaline::BotCommandScopeAllGroupChats-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/#Tourmaline::BotCommandScopeAllGroupChats#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/","text":"class Tourmaline::BotCommandScopeAllPrivateChats inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #type : String # View source","title":"BotCommandScopeAllPrivateChats"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/#Tourmaline::BotCommandScopeAllPrivateChats","text":"","title":"BotCommandScopeAllPrivateChats"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/#Tourmaline::BotCommandScopeAllPrivateChats-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/#Tourmaline::BotCommandScopeAllPrivateChats.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/#Tourmaline::BotCommandScopeAllPrivateChats-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/#Tourmaline::BotCommandScopeAllPrivateChats#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/","text":"class Tourmaline::BotCommandScopeChat inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( chat : Chat | Int64 | String ) # View source Methods # #chat_id : Int64 | String # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source #chat_id= ( chat_id : Int64 | String ) # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source #type : String # View source","title":"BotCommandScopeChat"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat","text":"","title":"BotCommandScopeChat"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat#chat_id","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source","title":"#chat_id"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat#chat_id=(chat_id)","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source","title":"#chat_id="},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/","text":"class Tourmaline::BotCommandScopeChatAdministrators inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( chat : Chat | Int64 | String ) # View source Methods # #chat_id : Int64 | String # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source #chat_id= ( chat_id : Int64 | String ) # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source #type : String # View source","title":"BotCommandScopeChatAdministrators"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators","text":"","title":"BotCommandScopeChatAdministrators"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators#chat_id","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source","title":"#chat_id"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators#chat_id=(chat_id)","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source","title":"#chat_id="},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/","text":"class Tourmaline::BotCommandScopeChatMember inherits Reference # Included modules JSON::Serializable Constructors # .new ( chat : Chat | Int64 | String , user : User | Int64 ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #chat_id : Int64 | String # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source #chat_id= ( chat_id : Int64 | String ) # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source #type : String # View source #user_id : Int64 # Unique identifier of the target user View source #user_id= ( user_id : Int64 ) # Unique identifier of the target user View source","title":"BotCommandScopeChatMember"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember","text":"","title":"BotCommandScopeChatMember"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember.new(chat,user)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember#chat_id","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source","title":"#chat_id"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember#chat_id=(chat_id)","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername ) View source","title":"#chat_id="},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember#user_id","text":"Unique identifier of the target user View source","title":"#user_id"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember#user_id=(user_id)","text":"Unique identifier of the target user View source","title":"#user_id="},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/","text":"class Tourmaline::BotCommandScopeDefault inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #type : String # View source","title":"BotCommandScopeDefault"},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/#Tourmaline::BotCommandScopeDefault","text":"","title":"BotCommandScopeDefault"},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/#Tourmaline::BotCommandScopeDefault-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/#Tourmaline::BotCommandScopeDefault.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/#Tourmaline::BotCommandScopeDefault-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/#Tourmaline::BotCommandScopeDefault#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/BotDescription/","text":"class Tourmaline::BotDescription inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #description : String # View source","title":"BotDescription"},{"location":"api_reference/Tourmaline/BotDescription/#Tourmaline::BotDescription","text":"","title":"BotDescription"},{"location":"api_reference/Tourmaline/BotDescription/#Tourmaline::BotDescription-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotDescription/#Tourmaline::BotDescription.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotDescription/#Tourmaline::BotDescription-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotDescription/#Tourmaline::BotDescription#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/BotShortDescription/","text":"class Tourmaline::BotShortDescription inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #short_description : String # View source","title":"BotShortDescription"},{"location":"api_reference/Tourmaline/BotShortDescription/#Tourmaline::BotShortDescription","text":"","title":"BotShortDescription"},{"location":"api_reference/Tourmaline/BotShortDescription/#Tourmaline::BotShortDescription-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotShortDescription/#Tourmaline::BotShortDescription.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotShortDescription/#Tourmaline::BotShortDescription-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotShortDescription/#Tourmaline::BotShortDescription#short_description","text":"View source","title":"#short_description"},{"location":"api_reference/Tourmaline/Button/","text":"alias Tourmaline::Button # Alias definition Tourmaline::InlineKeyboardButton | Tourmaline::KeyboardButton","title":"Button"},{"location":"api_reference/Tourmaline/Button/#Tourmaline::Button","text":"","title":"Button"},{"location":"api_reference/Tourmaline/CallbackGame/","text":"class Tourmaline::CallbackGame inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source","title":"CallbackGame"},{"location":"api_reference/Tourmaline/CallbackGame/#Tourmaline::CallbackGame","text":"","title":"CallbackGame"},{"location":"api_reference/Tourmaline/CallbackGame/#Tourmaline::CallbackGame-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/CallbackGame/#Tourmaline::CallbackGame.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/CallbackQuery/","text":"class Tourmaline::CallbackQuery inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #chat_instance : String? # View source #data : String? # View source #from : User # View source #game_short_name : String? # View source #id : String # View source #inline_message_id : String? # View source #message : Message? # View source","title":"CallbackQuery"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery","text":"","title":"CallbackQuery"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#chat_instance","text":"View source","title":"#chat_instance"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#data","text":"View source","title":"#data"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#from","text":"View source","title":"#from"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#game_short_name","text":"View source","title":"#game_short_name"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#inline_message_id","text":"View source","title":"#inline_message_id"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#message","text":"View source","title":"#message"},{"location":"api_reference/Tourmaline/CallbackQueryHandler/","text":"class Tourmaline::CallbackQueryHandler inherits Tourmaline::EventHandler # Constructors # .new ( pattern : String | Regex , proc : EventHandlerProc ) # View source .new ( pattern : String | Regex , & block : EventHandlerProc ) # View source Methods # #actions : Array ( UpdateAction ) # View source #call ( ctx : Context ) # View source #pattern : Regex # View source","title":"CallbackQueryHandler"},{"location":"api_reference/Tourmaline/CallbackQueryHandler/#Tourmaline::CallbackQueryHandler","text":"","title":"CallbackQueryHandler"},{"location":"api_reference/Tourmaline/CallbackQueryHandler/#Tourmaline::CallbackQueryHandler-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/CallbackQueryHandler/#Tourmaline::CallbackQueryHandler.new(pattern,proc)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/CallbackQueryHandler/#Tourmaline::CallbackQueryHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/CallbackQueryHandler/#Tourmaline::CallbackQueryHandler#actions","text":"View source","title":"#actions"},{"location":"api_reference/Tourmaline/CallbackQueryHandler/#Tourmaline::CallbackQueryHandler#call(ctx)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/CallbackQueryHandler/#Tourmaline::CallbackQueryHandler#pattern","text":"View source","title":"#pattern"},{"location":"api_reference/Tourmaline/Chat/","text":"class Tourmaline::Chat inherits Reference # This object represents a Telegram user or bot. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #active_usernames : Array ( String ) # View source #bio : String? # View source #can_set_sticker_set : Bool? # View source #channel? # View source #description : String? # View source #emoji_status_custom_emoji_id : String? # View source #first_name : String? # View source #forum? : Bool? # View source #group? # View source #has_private_forwards : Bool? # View source #has_protected_content : Bool? # View source #has_restricted_voice_and_video_messages : Bool? # View source #id : Int64 # View source #invite_link : String? # View source #join_by_request : Bool? # View source #join_to_send_messages : Bool? # View source #last_name : String? # View source #linked_chat_id : Int64? # View source #location : ChatLocation? # View source #message_auto_delete_time : Int32? # View source #name # View source #permissions : ChatPermissions? # View source #photo : ChatPhoto? # View source #pinned_message : Message? # View source #private? # View source #scam? : Bool? # View source #slow_mode_delay : Int32? # View source #sticker_set_name : String? # View source #supergroup? # View source #title : String? # View source #type : Type # View source #username : String? # View source #verified? : Bool? # View source","title":"Chat"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat","text":"This object represents a Telegram user or bot.","title":"Chat"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#active_usernames","text":"View source","title":"#active_usernames"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#bio","text":"View source","title":"#bio"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#can_set_sticker_set","text":"View source","title":"#can_set_sticker_set"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#channel?","text":"View source","title":"#channel?"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#emoji_status_custom_emoji_id","text":"View source","title":"#emoji_status_custom_emoji_id"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#first_name","text":"View source","title":"#first_name"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#forum?","text":"View source","title":"#forum?"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#group?","text":"View source","title":"#group?"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#has_private_forwards","text":"View source","title":"#has_private_forwards"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#has_protected_content","text":"View source","title":"#has_protected_content"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#has_restricted_voice_and_video_messages","text":"View source","title":"#has_restricted_voice_and_video_messages"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#invite_link","text":"View source","title":"#invite_link"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#join_by_request","text":"View source","title":"#join_by_request"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#join_to_send_messages","text":"View source","title":"#join_to_send_messages"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#last_name","text":"View source","title":"#last_name"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#linked_chat_id","text":"View source","title":"#linked_chat_id"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#location","text":"View source","title":"#location"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#message_auto_delete_time","text":"View source","title":"#message_auto_delete_time"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#name","text":"View source","title":"#name"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#permissions","text":"View source","title":"#permissions"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#photo","text":"View source","title":"#photo"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#pinned_message","text":"View source","title":"#pinned_message"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#private?","text":"View source","title":"#private?"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#scam?","text":"View source","title":"#scam?"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#slow_mode_delay","text":"View source","title":"#slow_mode_delay"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#sticker_set_name","text":"View source","title":"#sticker_set_name"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#supergroup?","text":"View source","title":"#supergroup?"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#username","text":"View source","title":"#username"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#verified?","text":"View source","title":"#verified?"},{"location":"api_reference/Tourmaline/Chat/Type/","text":"enum Tourmaline::Chat::Type # Members # Private = 0 # Group = 1 # Supergroup = 2 # Channel = 3 # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #channel? # View source #group? # View source #private? # View source #supergroup? # View source #to_json ( json : JSON :: Builder ) # Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source","title":"Type"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type","text":"","title":"Type"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type::Private","text":"","title":"Private"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type::Group","text":"","title":"Group"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type::Supergroup","text":"","title":"Supergroup"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type::Channel","text":"","title":"Channel"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type#channel?","text":"View source","title":"#channel?"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type#group?","text":"View source","title":"#group?"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type#private?","text":"View source","title":"#private?"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type#supergroup?","text":"View source","title":"#supergroup?"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type#to_json(json)","text":"Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source","title":"#to_json"},{"location":"api_reference/Tourmaline/ChatAction/","text":"enum Tourmaline::ChatAction # Chat actions are what appear at the top of the screen when users are typing, sending files, etc. You can mimic these actions by using the Client#send_chat_action method. Members # Typing = 0 # UploadPhoto = 1 # RecordVideo = 2 # UploadVideo = 3 # RecordAudio = 4 # RecordVoice = 5 # UploadAudio = 6 # UploadVoice = 7 # UploadDocument = 8 # Findlocation = 9 # RecordVideoNote = 10 # UploadVideoNote = 11 # Methods # #findlocation? # View source #record_audio? # View source #record_video? # View source #record_video_note? # View source #record_voice? # View source #to_s # Returns a String representation of this enum member. In the case of regular enums, this is just the name of the member. In the case of flag enums, it's the names joined by vertical bars, or \"None\", if the value is zero. If an enum's value doesn't match a member's value, the raw value is returned as a string. Color :: Red . to_s # => \"Red\" IOMode :: None . to_s # => \"None\" ( IOMode :: Read | IOMode :: Write ) . to_s # => \"Read | Write\" Color . new ( 10 ) . to_s # => \"10\" View source #typing? # View source #upload_audio? # View source #upload_document? # View source #upload_photo? # View source #upload_video? # View source #upload_video_note? # View source #upload_voice? # View source","title":"ChatAction"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction","text":"Chat actions are what appear at the top of the screen when users are typing, sending files, etc. You can mimic these actions by using the Client#send_chat_action method.","title":"ChatAction"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::Typing","text":"","title":"Typing"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadPhoto","text":"","title":"UploadPhoto"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::RecordVideo","text":"","title":"RecordVideo"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadVideo","text":"","title":"UploadVideo"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::RecordAudio","text":"","title":"RecordAudio"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::RecordVoice","text":"","title":"RecordVoice"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadAudio","text":"","title":"UploadAudio"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadVoice","text":"","title":"UploadVoice"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadDocument","text":"","title":"UploadDocument"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::Findlocation","text":"","title":"Findlocation"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::RecordVideoNote","text":"","title":"RecordVideoNote"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadVideoNote","text":"","title":"UploadVideoNote"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#findlocation?","text":"View source","title":"#findlocation?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#record_audio?","text":"View source","title":"#record_audio?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#record_video?","text":"View source","title":"#record_video?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#record_video_note?","text":"View source","title":"#record_video_note?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#record_voice?","text":"View source","title":"#record_voice?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#to_s","text":"Returns a String representation of this enum member. In the case of regular enums, this is just the name of the member. In the case of flag enums, it's the names joined by vertical bars, or \"None\", if the value is zero. If an enum's value doesn't match a member's value, the raw value is returned as a string. Color :: Red . to_s # => \"Red\" IOMode :: None . to_s # => \"None\" ( IOMode :: Read | IOMode :: Write ) . to_s # => \"Read | Write\" Color . new ( 10 ) . to_s # => \"10\" View source","title":"#to_s"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#typing?","text":"View source","title":"#typing?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_audio?","text":"View source","title":"#upload_audio?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_document?","text":"View source","title":"#upload_document?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_photo?","text":"View source","title":"#upload_photo?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_video?","text":"View source","title":"#upload_video?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_video_note?","text":"View source","title":"#upload_video_note?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_voice?","text":"View source","title":"#upload_voice?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/","text":"class Tourmaline::ChatAdministratorRights inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( anonymous : Bool = false , can_manage_chat : Bool = false , can_delete_messages : Bool = false , can_manage_video_chats : Bool = false , can_restrict_members : Bool = false , can_promote_members : Bool = false , can_change_info : Bool = false , can_invite_users : Bool = false , can_post_messages : Bool = false , can_edit_messages : Bool = false , can_pin_messages : Bool = false , can_manage_topics : Bool = false ) # View source Methods # #anonymous? : Bool # View source #can_change_info? : Bool # View source #can_delete_messages? : Bool # View source #can_edit_messages? : Bool # View source #can_invite_users? : Bool # View source #can_manage_chat? : Bool # View source #can_manage_topics? : Bool # View source #can_manage_video_chats? : Bool # View source #can_pin_messages? : Bool # View source #can_post_messages? : Bool # View source #can_promote_members? : Bool # View source #can_restrict_members? : Bool # View source","title":"ChatAdministratorRights"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights","text":"","title":"ChatAdministratorRights"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#anonymous?","text":"View source","title":"#anonymous?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_change_info?","text":"View source","title":"#can_change_info?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_delete_messages?","text":"View source","title":"#can_delete_messages?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_edit_messages?","text":"View source","title":"#can_edit_messages?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_invite_users?","text":"View source","title":"#can_invite_users?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_manage_chat?","text":"View source","title":"#can_manage_chat?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_manage_topics?","text":"View source","title":"#can_manage_topics?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_manage_video_chats?","text":"View source","title":"#can_manage_video_chats?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_pin_messages?","text":"View source","title":"#can_pin_messages?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_post_messages?","text":"View source","title":"#can_post_messages?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_promote_members?","text":"View source","title":"#can_promote_members?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_restrict_members?","text":"View source","title":"#can_restrict_members?"},{"location":"api_reference/Tourmaline/ChatInviteLink/","text":"class Tourmaline::ChatInviteLink inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #creator : User # View source #expire_date : Time? # View source #invite_link : String # View source #member_limit : Int32? # View source #primary? : Bool # View source #revoked? : Bool # View source","title":"ChatInviteLink"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink","text":"","title":"ChatInviteLink"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#creator","text":"View source","title":"#creator"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#expire_date","text":"View source","title":"#expire_date"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#invite_link","text":"View source","title":"#invite_link"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#member_limit","text":"View source","title":"#member_limit"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#primary?","text":"View source","title":"#primary?"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#revoked?","text":"View source","title":"#revoked?"},{"location":"api_reference/Tourmaline/ChatJoinRequest/","text":"class Tourmaline::ChatJoinRequest inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #bio : String? # View source #chat : Chat # View source #date : Int64 # View source #from : User # View source #invite_link : ChatInviteLink? # View source","title":"ChatJoinRequest"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest","text":"","title":"ChatJoinRequest"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest#bio","text":"View source","title":"#bio"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest#chat","text":"View source","title":"#chat"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest#date","text":"View source","title":"#date"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest#from","text":"View source","title":"#from"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest#invite_link","text":"View source","title":"#invite_link"},{"location":"api_reference/Tourmaline/ChatLocation/","text":"class Tourmaline::ChatLocation inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #address : String # View source #location : Location # View source","title":"ChatLocation"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation","text":"","title":"ChatLocation"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation#address","text":"View source","title":"#address"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation#location","text":"View source","title":"#location"},{"location":"api_reference/Tourmaline/ChatMember/","text":"alias Tourmaline::ChatMember # Alias definition Tourmaline::ChatMemberAdministrator | Tourmaline::ChatMemberMember | Tourmaline::ChatMemberOwner","title":"ChatMember"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember","text":"","title":"ChatMember"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/","text":"class Tourmaline::ChatMemberAdministrator inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #anonymous? : Bool? # View source #can_be_edited : Bool # View source #can_change_info? : Bool # View source #can_delete_messages? : Bool # View source #can_edit_messages? : Bool? # View source #can_invite_users? : Bool # View source #can_manage_chat? : Bool # View source #can_manage_topics? : Bool? # View source #can_manage_video_chats? : Bool # View source #can_pin_messages? : Bool? # View source #can_post_messages? : Bool? # View source #can_promote_members? : Bool # View source #can_restrict_members? : Bool # View source #custom_title : String? # View source #status : String # View source #user : User # View source","title":"ChatMemberAdministrator"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator","text":"","title":"ChatMemberAdministrator"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#anonymous?","text":"View source","title":"#anonymous?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_be_edited","text":"View source","title":"#can_be_edited"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_change_info?","text":"View source","title":"#can_change_info?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_delete_messages?","text":"View source","title":"#can_delete_messages?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_edit_messages?","text":"View source","title":"#can_edit_messages?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_invite_users?","text":"View source","title":"#can_invite_users?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_manage_chat?","text":"View source","title":"#can_manage_chat?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_manage_topics?","text":"View source","title":"#can_manage_topics?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_manage_video_chats?","text":"View source","title":"#can_manage_video_chats?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_pin_messages?","text":"View source","title":"#can_pin_messages?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_post_messages?","text":"View source","title":"#can_post_messages?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_promote_members?","text":"View source","title":"#can_promote_members?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_restrict_members?","text":"View source","title":"#can_restrict_members?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#custom_title","text":"View source","title":"#custom_title"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#status","text":"View source","title":"#status"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#user","text":"View source","title":"#user"},{"location":"api_reference/Tourmaline/ChatMemberBanned/","text":"class Tourmaline::ChatMemberBanned inherits Tourmaline::ChatMemberMember # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #until_date : Time # View source","title":"ChatMemberBanned"},{"location":"api_reference/Tourmaline/ChatMemberBanned/#Tourmaline::ChatMemberBanned","text":"","title":"ChatMemberBanned"},{"location":"api_reference/Tourmaline/ChatMemberBanned/#Tourmaline::ChatMemberBanned-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatMemberBanned/#Tourmaline::ChatMemberBanned.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatMemberBanned/#Tourmaline::ChatMemberBanned-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatMemberBanned/#Tourmaline::ChatMemberBanned#until_date","text":"View source","title":"#until_date"},{"location":"api_reference/Tourmaline/ChatMemberLeft/","text":"class Tourmaline::ChatMemberLeft inherits Tourmaline::ChatMemberMember # Constructors # .new ( pull : JSON :: PullParser ) # View source","title":"ChatMemberLeft"},{"location":"api_reference/Tourmaline/ChatMemberLeft/#Tourmaline::ChatMemberLeft","text":"","title":"ChatMemberLeft"},{"location":"api_reference/Tourmaline/ChatMemberLeft/#Tourmaline::ChatMemberLeft-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatMemberLeft/#Tourmaline::ChatMemberLeft.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatMemberMember/","text":"class Tourmaline::ChatMemberMember inherits Reference # Included modules JSON::Serializable Direct known subclasses Tourmaline::ChatMemberBanned Tourmaline::ChatMemberLeft Tourmaline::ChatMemberRestricted Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #status : String # View source #user : User # View source","title":"ChatMemberMember"},{"location":"api_reference/Tourmaline/ChatMemberMember/#Tourmaline::ChatMemberMember","text":"","title":"ChatMemberMember"},{"location":"api_reference/Tourmaline/ChatMemberMember/#Tourmaline::ChatMemberMember-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatMemberMember/#Tourmaline::ChatMemberMember.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatMemberMember/#Tourmaline::ChatMemberMember-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatMemberMember/#Tourmaline::ChatMemberMember#status","text":"View source","title":"#status"},{"location":"api_reference/Tourmaline/ChatMemberMember/#Tourmaline::ChatMemberMember#user","text":"View source","title":"#user"},{"location":"api_reference/Tourmaline/ChatMemberOwner/","text":"class Tourmaline::ChatMemberOwner inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #anonymous? : Bool # View source #custom_title : String? # View source #status : String # View source #user : User # View source","title":"ChatMemberOwner"},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner","text":"","title":"ChatMemberOwner"},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner#anonymous?","text":"View source","title":"#anonymous?"},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner#custom_title","text":"View source","title":"#custom_title"},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner#status","text":"View source","title":"#status"},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner#user","text":"View source","title":"#user"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/","text":"class Tourmaline::ChatMemberRestricted inherits Tourmaline::ChatMemberMember # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #can_add_web_page_previews? : Bool # View source #can_change_info? : Bool # View source #can_invite_users? : Bool # View source #can_manage_topics? : Bool # View source #can_pin_messages? : Bool # View source #can_send_media_messages? : Bool # View source #can_send_messages? : Bool # View source #can_send_other_messages? : Bool # View source #can_send_polls? : Bool # View source #custom_title : String? # View source #member? : Bool # View source","title":"ChatMemberRestricted"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted","text":"","title":"ChatMemberRestricted"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_add_web_page_previews?","text":"View source","title":"#can_add_web_page_previews?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_change_info?","text":"View source","title":"#can_change_info?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_invite_users?","text":"View source","title":"#can_invite_users?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_manage_topics?","text":"View source","title":"#can_manage_topics?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_pin_messages?","text":"View source","title":"#can_pin_messages?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_media_messages?","text":"View source","title":"#can_send_media_messages?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_messages?","text":"View source","title":"#can_send_messages?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_other_messages?","text":"View source","title":"#can_send_other_messages?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_polls?","text":"View source","title":"#can_send_polls?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#custom_title","text":"View source","title":"#custom_title"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#member?","text":"View source","title":"#member?"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/","text":"class Tourmaline::ChatMemberUpdated inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #chat : Chat # View source #date : Time # View source #from : User # View source #invite_link : ChatInviteLink? # View source #new_chat_member : ChatMember # View source #old_chat_member : ChatMember # View source","title":"ChatMemberUpdated"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated","text":"","title":"ChatMemberUpdated"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#chat","text":"View source","title":"#chat"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#date","text":"View source","title":"#date"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#from","text":"View source","title":"#from"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#invite_link","text":"View source","title":"#invite_link"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#new_chat_member","text":"View source","title":"#new_chat_member"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#old_chat_member","text":"View source","title":"#old_chat_member"},{"location":"api_reference/Tourmaline/ChatPermissions/","text":"class Tourmaline::ChatPermissions inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( can_send_messages = true , can_send_media_messages = true , can_send_polls = true , can_send_other_messages = true , can_add_web_page_previews = true , can_change_info = true , can_invite_users = true , can_pin_messages = true , can_manage_topics = true ) # View source Methods # #can_add_web_page_previews : Bool # View source #can_add_web_page_previews= ( can_add_web_page_previews : Bool ) # View source #can_change_info : Bool # View source #can_change_info= ( can_change_info : Bool ) # View source #can_invite_users : Bool # View source #can_invite_users= ( can_invite_users : Bool ) # View source #can_manage_topics : Bool # View source #can_manage_topics= ( can_manage_topics : Bool ) # View source #can_pin_messages : Bool # View source #can_pin_messages= ( can_pin_messages : Bool ) # View source #can_send_media_messages : Bool # View source #can_send_media_messages= ( can_send_media_messages : Bool ) # View source #can_send_messages : Bool # View source #can_send_messages= ( can_send_messages : Bool ) # View source #can_send_other_messages : Bool # View source #can_send_other_messages= ( can_send_other_messages : Bool ) # View source #can_send_polls : Bool # View source #can_send_polls= ( can_send_polls : Bool ) # View source","title":"ChatPermissions"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions","text":"","title":"ChatPermissions"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_add_web_page_previews","text":"View source","title":"#can_add_web_page_previews"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_add_web_page_previews=(can_add_web_page_previews)","text":"View source","title":"#can_add_web_page_previews="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_change_info","text":"View source","title":"#can_change_info"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_change_info=(can_change_info)","text":"View source","title":"#can_change_info="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_invite_users","text":"View source","title":"#can_invite_users"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_invite_users=(can_invite_users)","text":"View source","title":"#can_invite_users="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_manage_topics","text":"View source","title":"#can_manage_topics"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_manage_topics=(can_manage_topics)","text":"View source","title":"#can_manage_topics="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_pin_messages","text":"View source","title":"#can_pin_messages"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_pin_messages=(can_pin_messages)","text":"View source","title":"#can_pin_messages="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_media_messages","text":"View source","title":"#can_send_media_messages"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_media_messages=(can_send_media_messages)","text":"View source","title":"#can_send_media_messages="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_messages","text":"View source","title":"#can_send_messages"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_messages=(can_send_messages)","text":"View source","title":"#can_send_messages="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_other_messages","text":"View source","title":"#can_send_other_messages"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_other_messages=(can_send_other_messages)","text":"View source","title":"#can_send_other_messages="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_polls","text":"View source","title":"#can_send_polls"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_polls=(can_send_polls)","text":"View source","title":"#can_send_polls="},{"location":"api_reference/Tourmaline/ChatPhoto/","text":"class Tourmaline::ChatPhoto inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #big_file_id : String # View source #big_file_unique_id : String # View source #small_file_id : String # View source #small_file_unique_id : String # View source","title":"ChatPhoto"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto","text":"","title":"ChatPhoto"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto#big_file_id","text":"View source","title":"#big_file_id"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto#big_file_unique_id","text":"View source","title":"#big_file_unique_id"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto#small_file_id","text":"View source","title":"#small_file_id"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto#small_file_unique_id","text":"View source","title":"#small_file_unique_id"},{"location":"api_reference/Tourmaline/ChosenInlineResult/","text":"class Tourmaline::ChosenInlineResult inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #from : User # View source #inline_message_id : String? # View source #location : Location? # View source #query : String # View source #result_id : String # View source","title":"ChosenInlineResult"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult","text":"","title":"ChosenInlineResult"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#from","text":"View source","title":"#from"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#inline_message_id","text":"View source","title":"#inline_message_id"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#location","text":"View source","title":"#location"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#query","text":"View source","title":"#query"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#result_id","text":"View source","title":"#result_id"},{"location":"api_reference/Tourmaline/Client/","text":"class Tourmaline::Client inherits Reference # The Client class is the base class for all Tourmaline based bots. Extend this class to create your own bots, or create an instance of Client and add event handlers to it. Included modules Tourmaline::Logger Constants # DEFAULT_API_URL = \"https://api.telegram.org/\" # Constructors # .new ( bot_token : String , endpoint = DEFAULT_API_URL , default_parse_mode : ParseMode = ParseMode :: Markdown , pool_capacity = 200 , initial_pool_size = 20 , pool_timeout = 0.1 , proxy = nil , proxy_uri = nil , proxy_host = nil , proxy_port = nil , proxy_user = nil , proxy_pass = nil ) # Create a new instance of Tourmaline::Client . Named Arguments # bot_token the bot token you should've received from @BotFather endpoint the API endpoint to use for requests; default is https://api.telegram.org , but for TDLight methods to work you may consider hosting your own instance or using one of the official ones such as https://telegram.rest default_parse_mode the default parse mode to use for messages; default is ParseMode::None (no formatting) pool_capacity the maximum number of concurrent HTTP connections to use initial_pool_size the number of HTTP::Client instances to create on init pool_timeout How long to wait for a new client to be available if the pool is full before throwing a TimeoutError proxy an instance of HTTP::Proxy::Client to use; if set, overrides the following proxy_ args proxy_uri a URI to use when connecting to the proxy; can be a URI instance or a String proxy_host if no proxy_uri is provided, this will be the host for the URI proxy_port if no proxy_uri is provided, this will be the port for the URI proxy_user a username to use for a proxy that requires authentication proxy_pass a password to use for a proxy that requires authentication View source Methods # #add_sticker_to_set ( user_id , name , sticker ) # Use this method to add a new sticker to a set created by the bot. Returns true on success. View source #answer_callback_query ( callback_query_id , text = nil , show_alert = nil , url = nil , cache_time = nil ) # Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, true is returned. Note Alternatively, the user can be redirected to the specified Game URL ( url ). For this option to work, you must first create a game for your bot via @Botfather and accept the terms. Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter. View source #answer_inline_query ( inline_query_id , results , cache_time = nil , is_personal = nil , next_offset = nil , switch_pm_text = nil , switch_pm_parameter = nil ) # Use this method to send answers to an inline query. On success, True is returned. No more than 50 results per query are allowed. View source #answer_pre_checkout_query ( pre_checkout_query_id , ok , error_message = nil ) # Once the user has confirmed their payment and shipping details, the Client API sends the final confirmation in the form of a Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, true is returned. Note: The Client API must receive an answer within 10 seconds after the pre-checkout query was sent. View source #answer_shipping_query ( shipping_query_id , ok , shipping_options = nil , error_message = nil ) # If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Client API will send a Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, true is returned. View source #answer_web_app_query ( query_id : String , result : InlineQueryResult ) # Use this method to set the result of an interaction with a Web App and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a SentWebAppMessage object is returned. View source #approve_chat_join_request ( chat , user ) # Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success. View source #ban_chat_member ( chat , user , until_date = nil , revoke_messages = nil ) # Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. Note: In regular groups (non-supergroups), this method will only work if the All Members Are Admins setting is off in the target group. Otherwise members may only be removed by the group's creator or by the member that added them. View source #ban_chat_sender_chat ( chat , sender_chat ) # Use this method to ban a channel chat in a supergroup or a channel. The owner of the chat will not be able to send messages and join live streams on behalf of the chat, unless it is unbanned first. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns True on success. View source #bot : User # Gets the name of the Client at the time the Client was started. Refreshing can be done by setting @bot to get_me . View source #bot? : User? # Gets the name of the Client at the time the Client was started. Refreshing can be done by setting @bot to get_me . View source #bot_token : String # View source #close # Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns true on success. Requires no parameters. View source #close_forum_topic ( chat , message_thread_id ) # Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success. View source #copy_message ( chat , from_chat , message , message_thread_id = nil , caption = nil , parse_mode : ParseMode = default_parse_mode , caption_entities = [] of MessageEntity , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # View source #create_chat_invite_link ( chat , name = nil , expire_date = nil , member_limit = nil , creates_join_request = false ) # Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object. View source #create_forum_topic ( chat , name , icon_color = nil , icon_custom_emoji_id = nil ) # Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns information about the created topic as a ForumTopic object. View source #create_invoice_link ( title , description , payload , provider_token , currency , prices , max_tip_amount = nil , suggested_tip_amounts = nil , provider_data = nil , photo_url = nil , photo_size = nil , photo_width = nil , photo_height = nil , need_name = nil , need_phone_number = nil , need_email = nil , need_shipping_address = nil , send_phone_number_to_provider = nil , send_email_to_provider = nil , is_flexible = nil ) # Use this method to create a link for an invoice. Returns the created invoice link as String on success. View source #create_new_sticker_set ( user_id , name , title , stickers : Array ( InputSticker ), sticker_format : Sticker::Format , sticker_type : Sticker::Type? = nil , needs_repainting = false ) # Use this method to create new sticker set owned by a user. The bot will be able to edit the created sticker set. You must use exactly one of the fields png_sticker or tgs_sticker . Returns true on success. View source #decline_chat_join_request ( chat , user ) # Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success. View source #default_parse_mode : ParseMode # View source #default_parse_mode= ( default_parse_mode : ParseMode ) # View source #delete_chat_photo ( chat ) # Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. Note: In regular groups (non-supergroups), this method will only work if the All Members Are Admins setting is off in the target group. View source #delete_chat_sticker_set ( chat_id ) # Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in #get_chat requests to check if the bot can use this method. Returns true on success. View source #delete_forum_topic ( chat , message_thread_id ) # Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights. Returns True on success. View source #delete_message ( chat , message ) # Use this method to delete a Message , including service messages, with the following limitations: - A message can only be deleted if it was sent less than 48 hours ago. - Bots can delete outgoing messages in private chats, groups, and supergroups. - Bots can delete incoming messages in private chats. - Bots granted can_post_messages permissions can delete outgoing messages in channels. - If the bot is an administrator of a group, it can delete any message there. - If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there. Returns true on success. View source #delete_my_commands ( scope : BotCommandScope? = nil , language_code : String? = nil ) # Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Returns True on success. View source #delete_sticker_from_set ( sticker ) # Use this method to delete a sticker from a set created by the bot. Returns true on success. View source #delete_sticker_set ( name ) # Use this method to delete a sticker set that was created by the bot. Returns True on success. View source #delete_webhook ( drop_pending_updates = false ) # Use this method to remove webhook integration if you decide to switch back to getUpdates. View source #dispatcher # View source #download_file ( file_id , path = nil ) # Given a file_id, download the file and return its path on the file system. View source #edit_chat_invite_link ( chat , invite_link , name = nil , expire_date = nil , member_limit = nil , creates_join_request = false ) # Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a ChatInviteLink object. View source #edit_forum_topic ( chat , message_thread_id , name , icon_custom_emoji_id ) # Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success. View source #edit_message_caption ( chat , caption , message = nil , inline_message = nil , parse_mode : ParseMode = default_parse_mode , caption_entities = [] of MessageEntity , reply_markup = nil ) # Use this method to edit captions of messages. On success, if edited message is sent by the bot, the edited Message is returned, otherwise true is returned. View source #edit_message_live_location ( chat , latitude , longitude , horizontal_accuracy = nil , live_period = nil , proximity_alert_radius = nil , heading = nil , message = nil , inline_message = nil , reply_markup = nil ) # Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to #stopMessageLiveLocation . On success, if the edited message wasn't by the bot, the edited Message is returned, otherwise true is returned. View source #edit_message_media ( chat , media , message = nil , inline_message = nil , reply_markup = nil ) # View source #edit_message_reply_markup ( chat , message = nil , inline_message = nil , reply_markup = nil ) # Use this method to edit only the reply markup of messages. On success, if edited message is sent by the bot, the edited Message is returned, otherwise true is returned. View source #edit_message_text ( text , chat = nil , message = nil , inline_message = nil , parse_mode : ParseMode = default_parse_mode , entities = [] of MessageEntity , disable_link_preview = false , reply_markup = nil ) # Use this method to edit text and game messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise true is returned. View source #export_chat_invite_link ( chat ) # Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as String on success. View source #forward_message ( chat , from_chat , message , message_thread_id = nil , disable_notification = false , protect_content = false ) # Use this method to forward messages of any kind. On success, the sent Message is returned. View source #get_chat ( chat ) # Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success. Tip When using TDLight this method isn't restructed to chats/users your bot is familiar with. Warning When using TDLight this method will first check for a locally cached chat, then use MTProto if that fails. When using MTProto this method is heavily rate limited, so be careful. View source #get_chat_administrators ( chat ) # Use this method to get a list of administrators in a chat. On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned. View source #get_chat_member ( chat , user ) # Use this method to get information about a member of a chat. Returns a ChatMember object on success. View source #get_chat_members_count ( chat ) # Use this method to get the number of members in a chat. Returns Int32 on success. View source #get_custom_emoji_stickers ( custom_emoji_ids : Array ( String )) # Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of Sticker objects. View source #get_file ( file_id ) # Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a TFile object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path> , where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling #get_file again. To simplify retrieving a link for a file, use the #get_file_link method. View source #get_file_link ( file_id ) # Takes a file id and returns a link to download the file. The link will be valid for at least one hour. View source #get_forum_topic_icon_stickers # Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns an Array of Sticker objects. View source #get_game_high_scores ( user_id , chat_id = nil , message_id = nil , inline_message_id = nil ) # Use this method to get data for high score tables. Will return the score of the specified user and several of his neighbors in a game. On success, returns an Array of GameHighScore objects. This method will currently return scores for the target user, plus two of his closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change. View source #get_me # A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a User object. View source #get_my_commands ( scope : BotCommandScope? = nil , language_code : String? = nil ) # Use this method to get the current list of the bot's commands. Requires no parameters. Returns Array of BotCommand on success. View source #get_my_default_adminstrator_rights ( for_channels : Bool = false ) # Use this method to get the current default administrator rights of the bot. Returns ChatAdministratorRights on success. View source #get_my_description ( language_code : String? = nil ) # Use this method to get the current bot description for the given user language. Returns BotDescription on success. View source #get_my_short_description ( language_code : String? = nil ) # Use this method to get the current bot short description for the given user language. Returns BotShortDescription on success. View source #get_sticker_set ( name : String ) # Use this method to get a sticker set. On success, a StickerSet object is returned. View source #get_updates ( offset = 0 , limit = 100 , timeout = 0 , allowed_updates = [] of String ) # Use this method to receive incoming updates using long polling ( wiki ). An Array of Update objects is returned. View source #get_user_profile_photos ( user , offset = nil , limit = nil ) # Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object. View source #get_webhook_info # Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using #getUpdates , will return an object with the url field empty. View source #kick_chat_member ( * args , ** kwargs ) # View source #leave_chat ( chat ) # Use this method for your bot to leave a group, supergroup, or channel. Returns true on success. View source #log_out # Use this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns true on success. Requires no parameters. View source #mute_chat_member ( chat , user , until_date = nil ) # Use this method to easily mute a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin right. Works by calling restrict_chat_member with all permissions set to false . Returns true on success. View source #on ( * actions : Symbol | UpdateAction , & block : Context -> ) # View source #on ( action : UpdateAction , & block : Context -> ) # View source #pin_chat_message ( chat , message , disable_notification = false ) # Use this method to pin a message in a group, a supergroup, or a channel. The bot must be an administrator in the chat for this to work and must have the can_pin_messages admin right in the supergroup or can_edit_messages admin right in the channel. Returns true on success. View source #poll # View source #promote_chat_member ( chat , user , is_anonymous = false , until_date = nil , can_manage_chat = nil , can_change_info = nil , can_post_messages = nil , can_edit_messages = nil , can_delete_messages = nil , can_invite_users = nil , can_manage_video_chats = nil , can_restrict_members = nil , can_pin_messages = nil , can_promote_members = nil , can_manage_topics = nil ) # Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user. Returns true on success. View source #register ( * handlers : EventHandler ) # View source #reopen_forum_topic ( chat , message_thread_id ) # Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success. View source #request ( type : U . class , method , params = {} of String => String ) forall U # Sends a request to the Telegram Client API. Returns the response, parsed as a U . View source #request_raw ( method : String , params = {} of String => String ) # Sends a request to the Telegram Client API. Returns the raw response. View source #restrict_chat_member ( chat , user , permissions , until_date = nil ) # Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass True for all permissions to lift restrictions from a user. Returns true on success. View source #revoke_chat_invite_link ( chat , invite_link ) # Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as ChatInviteLink object. View source #send_animation ( chat , animation , message_thread_id = nil , duration = nil , width = nil , height = nil , thumbnail = nil , caption = nil , caption_entities = [] of MessageEntity , parse_mode : ParseMode = default_parse_mode , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # View source #send_audio ( chat , audio , message_thread_id = nil , caption = nil , caption_entities = [] of MessageEntity , duration = nil , preformer = nil , title = nil , parse_mode : ParseMode = default_parse_mode , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .mp3 format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future. For sending voice messages, use the #sendVoice method instead. TODO: Add filesize checking and validation. View source #send_basketball ( chat , message_thread_id = nil , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send a basketball (\ud83c\udfc0 emoji), which will have a random value from 1 to 6. On success, the sent Message is returned. View source #send_bowling ( chat , message_thread_id = nil , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send a bowling (\ud83c\udfb3 emoji), which will have a random value from 1 to 6. On success, the sent Message is returned. View source #send_chat_action ( chat , action : ChatAction ) # Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns true on success. Example: The ImageBot needs some time to process a request and upload the image. Instead of sending a text message along the lines of \u201cRetrieving image, please wait\u2026\u201d, the bot may use #sendChatAction with action = upload_photo. The user will see a \u201csending photo\u201d status for the bot. We only recommend using this method when a response from the bot will take a noticeable amount of time to arrive. View source #send_contact ( chat , phone_number , first_name , message_thread_id = nil , last_name = nil , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send phone contacts. On success, the sent Message is returned. View source #send_dart ( chat , message_thread_id = nil , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send a dart (\ud83c\udfaf emoji), which will have a random value from 1 to 6. On success, the sent Message is returned. View source #send_dice ( chat , message_thread_id = nil , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send a dice (\ud83c\udfb2 emoji), which will have a random value from 1 to 6. On success, the sent Message is returned. View source #send_document ( chat , document , message_thread_id = nil , caption = nil , caption_entities = [] of MessageEntity , parse_mode : ParseMode = default_parse_mode , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future. TODO: Add filesize checking and validation. View source #send_football ( chat , message_thread_id = nil , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send a football (\u26bd\ufe0f emoji), which will have a random value from 1 to 5. On success, the sent Message is returned. View source #send_game ( chat , game_short_name , message_thread_id = nil , disable_notification = false , reply_to_message_id = nil , reply_markup = nil ) # Use this method to send a game. On success, the sent Message is returned. View source #send_invoice ( chat , title , description , payload , provider_token , currency , prices , message_thread_id = nil , max_tip_amount = nil , suggested_tip_amounts = nil , start_parameter = nil , provider_data = nil , photo_url = nil , photo_size = nil , photo_width = nil , photo_height = nil , need_name = nil , need_phone_number = nil , need_email = nil , need_shipping_address = nil , send_phone_number_to_provider = nil , send_email_to_provider = nil , is_flexible = nil , disable_notification = false , reply_to_message = nil , reply_markup = nil ) # Use this method to send invoices. On success, the sent Message is returned. View source #send_location ( chat , latitude , longitude , message_thread_id = nil , horizontal_accuracy = nil , live_period = nil , proximity_alert_radius = nil , heading = nil , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send point on the map. On success, the sent Message is returned. View source #send_media_group ( chat , media : Array ( InputMediaPhoto | InputMediaVideo | InputMediaAudio | InputMediaDocument ), message_thread_id = nil , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false ) # Use this method to send a group of photos or videos as an album. On success, an array of the sent Messages is returned. View source #send_message ( chat , text , message_thread_id = nil , parse_mode : ParseMode = default_parse_mode , entities = [] of MessageEntity , link_preview = false , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send text messages. On success, the sent Message is returned. View source #send_photo ( chat , photo , message_thread_id = nil , caption = nil , parse_mode : ParseMode = default_parse_mode , caption_entities = [] of MessageEntity , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send photos. On success, the sent Message is returned. View source #send_poll ( chat , question : String , options : Array ( String ), anonymous : Bool = true , type : Poll::Type = Poll :: Type :: Regular , allows_multiple_answers : Bool = false , correct_option_id : Int32? = nil , close_date : Time? = nil , open_period : Int32? = nil , closed : Bool = false , disable_notification : Bool = false , reply_to_message = nil , reply_markup = nil ) # Use this method to send a native poll. On success, the sent Message is returned. View source #send_slot_machine ( chat , message_thread_id = nil , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send a slot_machine (\ud83c\udfb0 emoji), which will have a random value from 1 to 64. On success, the sent Message is returned. View source #send_soccerball ( chat , message_thread_id = nil , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send a soccerball (\u26bd\ufe0f emoji), which will have a random value from 1 to 5. On success, the sent Message is returned. View source #send_sticker ( chat , sticker , message_thread_id = nil , emoji = nil , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send .webp stickers. On success, the sent Message is returned. See: https://core.telegram.org/bots/api#stickers for more info. View source #send_venue ( chat , latitude , longitude , title , address , message_thread_id = nil , foursquare_id = nil , foursquare_type = nil , google_place_id = nil , google_place_type = nil , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send information about a venue. On success, the sent Message is returned. View source #send_video ( chat , video , message_thread_id = nil , duration = nil , width = nil , height = nil , caption = nil , caption_entities = [] of MessageEntity , parse_mode : ParseMode = default_parse_mode , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future. TODO: Add filesize checking and validation. View source #send_video_note ( chat , video_note , message_thread_id = nil , duration = nil , width = nil , height = nil , caption = nil , caption_entities = [] of MessageEntity , parse_mode : ParseMode = default_parse_mode , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # As of v.4.0 , Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned. View source #send_voice ( chat , voice , message_thread_id = nil , caption = nil , caption_entities = [] of MessageEntity , duration = nil , preformer = nil , title = nil , disable_notification = false , protect_content = false , reply_to_message = nil , allow_sending_without_reply = false , reply_markup = nil ) # Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Audio or Document ). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future. TODO: Add filesize checking and validation. View source #serve ( path = \"/\" , host = \"127.0.0.1\" , port = 8081 , ssl_certificate_path = nil , ssl_key_path = nil , no_middleware_check = false ) # View source #set_chat_admininstrator_custom_title ( chat , user , custom_title ) # Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success. View source #set_chat_description ( chat , description ) # Use this method to change the description of a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. View source #set_chat_menu_button ( chat , menu_button : MenuButton? = nil ) # Use this method to change the bot's menu button in a private chat, or the default menu button. Returns True on success. View source #set_chat_permissions ( chat , permissions ) # Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members admin rights. Returns True on success. View source #set_chat_photo ( chat , photo ) # Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. Note: In regular groups (non-supergroups), this method will only work if the All Members Are Admins setting is off in the target group. View source #set_chat_sticker_set ( chat , sticker_set_name ) # Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in #get_chat requests to check if the bot can use this method. Returns true on success. View source #set_chat_title ( chat , title ) # Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. Note: In regular groups (non-supergroups), this method will only work if the All Members Are Admins setting is off in the target group. View source #set_custom_emoji_sticker_set_thumbnail ( name , custom_emoji_id = nil ) # Use this method to set the thumbnail of a custom emoji sticker set. Returns True on success. View source #set_game_score ( user_id , score , force = false , disable_edit_message = nil , chat_id = nil , message_id = nil , inline_message_id = nil ) # Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited Message, otherwise returns true . Raises an error, if the new score is not greater than the user's current score in the chat and force is false (default). View source #set_my_commands ( commands : Array ( BotCommand | NamedTuple ()), scope : BotCommandScope? = nil , language_code : String? = nil ) # Use this method to change the list of the bot's commands. Returns true on success. View source #set_my_default_adminstrator_rights ( rights : ChatAdministratorRights , for_channels : Bool = false ) # Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are are free to modify the list before adding the bot. Returns True on success. View source #set_my_description ( description : String , language_code : String? = nil ) # Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty. Returns True on success. View source #set_my_short_description ( description : String , language_code : String? = nil ) # Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot. Returns True on success. View source #set_passport_data_errors ( user_id : Int32 , errors : Array ( PassportElementError )) # Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success. Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues. View source #set_sticker_emoji_list ( sticker , emoji_list ) # Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success. View source #set_sticker_keywords ( sticker , keywords ) # Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success. View source #set_sticker_mask_position ( sticker , position ) # Use this method to change the mask position of a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns True on success. View source #set_sticker_position_in_set ( sticker , position ) # Use this method to move a sticker in a set created by the bot to a specific position. Returns true on success. View source #set_sticker_set_thumbnail ( name , user , thumbnail = nil ) # Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns true on success. View source #set_sticker_set_title ( name , title ) # Use this method to set the title of a created sticker set. Returns True on success. View source #set_webhook ( url , ip_address = nil , certificate = nil , max_connections = nil , allowed_updates = nil , drop_pending_updates = false , secret_token = nil ) # Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized Update . In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns true on success. If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. https://www.example.com/<token> . Since nobody else knows your bot\u2018s token, you can be pretty sure it\u2019s us. View source #stop_message_live_location ( chat , message = nil , inline_message = nil , reply_markup = nil ) # Use this method to stop updating a live location message before live_period expires. On success, if the message was sent by the bot, the sent Message is returned, otherwise true is returned. View source #stop_poll ( chat , message , reply_markup = nil ) # Use this method to stop a poll which was sent by the bot. On success, the stopped Poll with the final results is returned. View source #unban_chat_member ( chat , user , only_if_banned = false ) # Use this method to unban a previously kicked user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. Returns true on success. View source #unban_chat_sender_chat ( chat , sender_chat ) # Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns True on success. View source #unpin_all_chat_messages ( chat ) # View source #unpin_all_forum_topic_messages ( chat , message_thread_id ) # Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success. View source #unpin_chat_message ( chat , message = nil ) # Use this method to unpin a message in a group, a supergroup, or a channel. The bot must be an administrator in the chat for this to work and must have the \u2018can_pin_messages\u2019 admin right in the supergroup or \u2018can_edit_messages\u2019 admin right in the channel. Returns true on success. View source #unset_webhook # Use this to unset the webhook and stop receiving updates to your bot. View source #upload_sticker_file ( user_id , png_sticker ) # Use this method to upload a .png file with a sticker for later use in #create_new_sticker_set and #add_sticker_to_set methods (can be used multiple times). Returns the uploaded TFile on success. View source #use ( middleware : Middleware ) # View source","title":"Client"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client","text":"The Client class is the base class for all Tourmaline based bots. Extend this class to create your own bots, or create an instance of Client and add event handlers to it.","title":"Client"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client::DEFAULT_API_URL","text":"","title":"DEFAULT_API_URL"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client.new(bot_token,endpoint,default_parse_mode,pool_capacity,initial_pool_size,pool_timeout,proxy,proxy_uri,proxy_host,proxy_port,proxy_user,proxy_pass)","text":"Create a new instance of Tourmaline::Client .","title":".new"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client.new(bot_token,endpoint,default_parse_mode,pool_capacity,initial_pool_size,pool_timeout,proxy,proxy_uri,proxy_host,proxy_port,proxy_user,proxy_pass)--named-arguments","text":"bot_token the bot token you should've received from @BotFather endpoint the API endpoint to use for requests; default is https://api.telegram.org , but for TDLight methods to work you may consider hosting your own instance or using one of the official ones such as https://telegram.rest default_parse_mode the default parse mode to use for messages; default is ParseMode::None (no formatting) pool_capacity the maximum number of concurrent HTTP connections to use initial_pool_size the number of HTTP::Client instances to create on init pool_timeout How long to wait for a new client to be available if the pool is full before throwing a TimeoutError proxy an instance of HTTP::Proxy::Client to use; if set, overrides the following proxy_ args proxy_uri a URI to use when connecting to the proxy; can be a URI instance or a String proxy_host if no proxy_uri is provided, this will be the host for the URI proxy_port if no proxy_uri is provided, this will be the port for the URI proxy_user a username to use for a proxy that requires authentication proxy_pass a password to use for a proxy that requires authentication View source","title":"Named Arguments"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#add_sticker_to_set(user_id,name,sticker)","text":"Use this method to add a new sticker to a set created by the bot. Returns true on success. View source","title":"#add_sticker_to_set"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#answer_callback_query(callback_query_id,text,show_alert,url,cache_time)","text":"Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, true is returned. Note Alternatively, the user can be redirected to the specified Game URL ( url ). For this option to work, you must first create a game for your bot via @Botfather and accept the terms. Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter. View source","title":"#answer_callback_query"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#answer_inline_query(inline_query_id,results,cache_time,is_personal,next_offset,switch_pm_text,switch_pm_parameter)","text":"Use this method to send answers to an inline query. On success, True is returned. No more than 50 results per query are allowed. View source","title":"#answer_inline_query"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#answer_pre_checkout_query(pre_checkout_query_id,ok,error_message)","text":"Once the user has confirmed their payment and shipping details, the Client API sends the final confirmation in the form of a Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, true is returned. Note: The Client API must receive an answer within 10 seconds after the pre-checkout query was sent. View source","title":"#answer_pre_checkout_query"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#answer_shipping_query(shipping_query_id,ok,shipping_options,error_message)","text":"If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Client API will send a Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, true is returned. View source","title":"#answer_shipping_query"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#answer_web_app_query(query_id,result)","text":"Use this method to set the result of an interaction with a Web App and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a SentWebAppMessage object is returned. View source","title":"#answer_web_app_query"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#approve_chat_join_request(chat,user)","text":"Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success. View source","title":"#approve_chat_join_request"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#ban_chat_member(chat,user,until_date,revoke_messages)","text":"Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. Note: In regular groups (non-supergroups), this method will only work if the All Members Are Admins setting is off in the target group. Otherwise members may only be removed by the group's creator or by the member that added them. View source","title":"#ban_chat_member"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#ban_chat_sender_chat(chat,sender_chat)","text":"Use this method to ban a channel chat in a supergroup or a channel. The owner of the chat will not be able to send messages and join live streams on behalf of the chat, unless it is unbanned first. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns True on success. View source","title":"#ban_chat_sender_chat"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#bot","text":"Gets the name of the Client at the time the Client was started. Refreshing can be done by setting @bot to get_me . View source","title":"#bot"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#bot?","text":"Gets the name of the Client at the time the Client was started. Refreshing can be done by setting @bot to get_me . View source","title":"#bot?"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#bot_token","text":"View source","title":"#bot_token"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#close","text":"Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns true on success. Requires no parameters. View source","title":"#close"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#close_forum_topic(chat,message_thread_id)","text":"Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success. View source","title":"#close_forum_topic"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#copy_message(chat,from_chat,message,message_thread_id,caption,parse_mode,caption_entities,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"View source","title":"#copy_message"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#create_chat_invite_link(chat,name,expire_date,member_limit,creates_join_request)","text":"Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object. View source","title":"#create_chat_invite_link"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#create_forum_topic(chat,name,icon_color,icon_custom_emoji_id)","text":"Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns information about the created topic as a ForumTopic object. View source","title":"#create_forum_topic"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#create_invoice_link(title,description,payload,provider_token,currency,prices,max_tip_amount,suggested_tip_amounts,provider_data,photo_url,photo_size,photo_width,photo_height,need_name,need_phone_number,need_email,need_shipping_address,send_phone_number_to_provider,send_email_to_provider,is_flexible)","text":"Use this method to create a link for an invoice. Returns the created invoice link as String on success. View source","title":"#create_invoice_link"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#create_new_sticker_set(user_id,name,title,stickers,sticker_format,sticker_type,needs_repainting)","text":"Use this method to create new sticker set owned by a user. The bot will be able to edit the created sticker set. You must use exactly one of the fields png_sticker or tgs_sticker . Returns true on success. View source","title":"#create_new_sticker_set"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#decline_chat_join_request(chat,user)","text":"Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success. View source","title":"#decline_chat_join_request"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#default_parse_mode","text":"View source","title":"#default_parse_mode"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#default_parse_mode=(default_parse_mode)","text":"View source","title":"#default_parse_mode="},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#delete_chat_photo(chat)","text":"Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. Note: In regular groups (non-supergroups), this method will only work if the All Members Are Admins setting is off in the target group. View source","title":"#delete_chat_photo"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#delete_chat_sticker_set(chat_id)","text":"Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in #get_chat requests to check if the bot can use this method. Returns true on success. View source","title":"#delete_chat_sticker_set"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#delete_forum_topic(chat,message_thread_id)","text":"Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights. Returns True on success. View source","title":"#delete_forum_topic"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#delete_message(chat,message)","text":"Use this method to delete a Message , including service messages, with the following limitations: - A message can only be deleted if it was sent less than 48 hours ago. - Bots can delete outgoing messages in private chats, groups, and supergroups. - Bots can delete incoming messages in private chats. - Bots granted can_post_messages permissions can delete outgoing messages in channels. - If the bot is an administrator of a group, it can delete any message there. - If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there. Returns true on success. View source","title":"#delete_message"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#delete_my_commands(scope,language_code)","text":"Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Returns True on success. View source","title":"#delete_my_commands"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#delete_sticker_from_set(sticker)","text":"Use this method to delete a sticker from a set created by the bot. Returns true on success. View source","title":"#delete_sticker_from_set"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#delete_sticker_set(name)","text":"Use this method to delete a sticker set that was created by the bot. Returns True on success. View source","title":"#delete_sticker_set"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#delete_webhook(drop_pending_updates)","text":"Use this method to remove webhook integration if you decide to switch back to getUpdates. View source","title":"#delete_webhook"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#dispatcher","text":"View source","title":"#dispatcher"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#download_file(file_id,path)","text":"Given a file_id, download the file and return its path on the file system. View source","title":"#download_file"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#edit_chat_invite_link(chat,invite_link,name,expire_date,member_limit,creates_join_request)","text":"Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a ChatInviteLink object. View source","title":"#edit_chat_invite_link"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#edit_forum_topic(chat,message_thread_id,name,icon_custom_emoji_id)","text":"Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success. View source","title":"#edit_forum_topic"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#edit_message_caption(chat,caption,message,inline_message,parse_mode,caption_entities,reply_markup)","text":"Use this method to edit captions of messages. On success, if edited message is sent by the bot, the edited Message is returned, otherwise true is returned. View source","title":"#edit_message_caption"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#edit_message_live_location(chat,latitude,longitude,horizontal_accuracy,live_period,proximity_alert_radius,heading,message,inline_message,reply_markup)","text":"Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to #stopMessageLiveLocation . On success, if the edited message wasn't by the bot, the edited Message is returned, otherwise true is returned. View source","title":"#edit_message_live_location"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#edit_message_media(chat,media,message,inline_message,reply_markup)","text":"View source","title":"#edit_message_media"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#edit_message_reply_markup(chat,message,inline_message,reply_markup)","text":"Use this method to edit only the reply markup of messages. On success, if edited message is sent by the bot, the edited Message is returned, otherwise true is returned. View source","title":"#edit_message_reply_markup"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#edit_message_text(text,chat,message,inline_message,parse_mode,entities,disable_link_preview,reply_markup)","text":"Use this method to edit text and game messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise true is returned. View source","title":"#edit_message_text"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#export_chat_invite_link(chat)","text":"Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as String on success. View source","title":"#export_chat_invite_link"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#forward_message(chat,from_chat,message,message_thread_id,disable_notification,protect_content)","text":"Use this method to forward messages of any kind. On success, the sent Message is returned. View source","title":"#forward_message"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_chat(chat)","text":"Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success. Tip When using TDLight this method isn't restructed to chats/users your bot is familiar with. Warning When using TDLight this method will first check for a locally cached chat, then use MTProto if that fails. When using MTProto this method is heavily rate limited, so be careful. View source","title":"#get_chat"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_chat_administrators(chat)","text":"Use this method to get a list of administrators in a chat. On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned. View source","title":"#get_chat_administrators"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_chat_member(chat,user)","text":"Use this method to get information about a member of a chat. Returns a ChatMember object on success. View source","title":"#get_chat_member"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_chat_members_count(chat)","text":"Use this method to get the number of members in a chat. Returns Int32 on success. View source","title":"#get_chat_members_count"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_custom_emoji_stickers(custom_emoji_ids)","text":"Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of Sticker objects. View source","title":"#get_custom_emoji_stickers"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_file(file_id)","text":"Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a TFile object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path> , where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling #get_file again. To simplify retrieving a link for a file, use the #get_file_link method. View source","title":"#get_file"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_file_link(file_id)","text":"Takes a file id and returns a link to download the file. The link will be valid for at least one hour. View source","title":"#get_file_link"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_forum_topic_icon_stickers","text":"Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns an Array of Sticker objects. View source","title":"#get_forum_topic_icon_stickers"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_game_high_scores(user_id,chat_id,message_id,inline_message_id)","text":"Use this method to get data for high score tables. Will return the score of the specified user and several of his neighbors in a game. On success, returns an Array of GameHighScore objects. This method will currently return scores for the target user, plus two of his closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change. View source","title":"#get_game_high_scores"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_me","text":"A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a User object. View source","title":"#get_me"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_my_commands(scope,language_code)","text":"Use this method to get the current list of the bot's commands. Requires no parameters. Returns Array of BotCommand on success. View source","title":"#get_my_commands"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_my_default_adminstrator_rights(for_channels)","text":"Use this method to get the current default administrator rights of the bot. Returns ChatAdministratorRights on success. View source","title":"#get_my_default_adminstrator_rights"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_my_description(language_code)","text":"Use this method to get the current bot description for the given user language. Returns BotDescription on success. View source","title":"#get_my_description"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_my_short_description(language_code)","text":"Use this method to get the current bot short description for the given user language. Returns BotShortDescription on success. View source","title":"#get_my_short_description"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_sticker_set(name)","text":"Use this method to get a sticker set. On success, a StickerSet object is returned. View source","title":"#get_sticker_set"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_updates(offset,limit,timeout,allowed_updates)","text":"Use this method to receive incoming updates using long polling ( wiki ). An Array of Update objects is returned. View source","title":"#get_updates"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_user_profile_photos(user,offset,limit)","text":"Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object. View source","title":"#get_user_profile_photos"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#get_webhook_info","text":"Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using #getUpdates , will return an object with the url field empty. View source","title":"#get_webhook_info"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#kick_chat_member(*,**)","text":"View source","title":"#kick_chat_member"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#leave_chat(chat)","text":"Use this method for your bot to leave a group, supergroup, or channel. Returns true on success. View source","title":"#leave_chat"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#log_out","text":"Use this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns true on success. Requires no parameters. View source","title":"#log_out"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#mute_chat_member(chat,user,until_date)","text":"Use this method to easily mute a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin right. Works by calling restrict_chat_member with all permissions set to false . Returns true on success. View source","title":"#mute_chat_member"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#on(*,&)","text":"View source","title":"#on"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#pin_chat_message(chat,message,disable_notification)","text":"Use this method to pin a message in a group, a supergroup, or a channel. The bot must be an administrator in the chat for this to work and must have the can_pin_messages admin right in the supergroup or can_edit_messages admin right in the channel. Returns true on success. View source","title":"#pin_chat_message"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#poll","text":"View source","title":"#poll"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#promote_chat_member(chat,user,is_anonymous,until_date,can_manage_chat,can_change_info,can_post_messages,can_edit_messages,can_delete_messages,can_invite_users,can_manage_video_chats,can_restrict_members,can_pin_messages,can_promote_members,can_manage_topics)","text":"Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user. Returns true on success. View source","title":"#promote_chat_member"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#register(*)","text":"View source","title":"#register"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#reopen_forum_topic(chat,message_thread_id)","text":"Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success. View source","title":"#reopen_forum_topic"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#request(type,method,params)","text":"Sends a request to the Telegram Client API. Returns the response, parsed as a U . View source","title":"#request"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#request_raw(method,params)","text":"Sends a request to the Telegram Client API. Returns the raw response. View source","title":"#request_raw"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#restrict_chat_member(chat,user,permissions,until_date)","text":"Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass True for all permissions to lift restrictions from a user. Returns true on success. View source","title":"#restrict_chat_member"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#revoke_chat_invite_link(chat,invite_link)","text":"Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as ChatInviteLink object. View source","title":"#revoke_chat_invite_link"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_animation(chat,animation,message_thread_id,duration,width,height,thumbnail,caption,caption_entities,parse_mode,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"View source","title":"#send_animation"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_audio(chat,audio,message_thread_id,caption,caption_entities,duration,preformer,title,parse_mode,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .mp3 format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future. For sending voice messages, use the #sendVoice method instead. TODO: Add filesize checking and validation. View source","title":"#send_audio"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_basketball(chat,message_thread_id,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send a basketball (\ud83c\udfc0 emoji), which will have a random value from 1 to 6. On success, the sent Message is returned. View source","title":"#send_basketball"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_bowling(chat,message_thread_id,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send a bowling (\ud83c\udfb3 emoji), which will have a random value from 1 to 6. On success, the sent Message is returned. View source","title":"#send_bowling"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_chat_action(chat,action)","text":"Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns true on success. Example: The ImageBot needs some time to process a request and upload the image. Instead of sending a text message along the lines of \u201cRetrieving image, please wait\u2026\u201d, the bot may use #sendChatAction with action = upload_photo. The user will see a \u201csending photo\u201d status for the bot. We only recommend using this method when a response from the bot will take a noticeable amount of time to arrive. View source","title":"#send_chat_action"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_contact(chat,phone_number,first_name,message_thread_id,last_name,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send phone contacts. On success, the sent Message is returned. View source","title":"#send_contact"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_dart(chat,message_thread_id,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send a dart (\ud83c\udfaf emoji), which will have a random value from 1 to 6. On success, the sent Message is returned. View source","title":"#send_dart"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_dice(chat,message_thread_id,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send a dice (\ud83c\udfb2 emoji), which will have a random value from 1 to 6. On success, the sent Message is returned. View source","title":"#send_dice"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_document(chat,document,message_thread_id,caption,caption_entities,parse_mode,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future. TODO: Add filesize checking and validation. View source","title":"#send_document"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_football(chat,message_thread_id,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send a football (\u26bd\ufe0f emoji), which will have a random value from 1 to 5. On success, the sent Message is returned. View source","title":"#send_football"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_game(chat,game_short_name,message_thread_id,disable_notification,reply_to_message_id,reply_markup)","text":"Use this method to send a game. On success, the sent Message is returned. View source","title":"#send_game"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_invoice(chat,title,description,payload,provider_token,currency,prices,message_thread_id,max_tip_amount,suggested_tip_amounts,start_parameter,provider_data,photo_url,photo_size,photo_width,photo_height,need_name,need_phone_number,need_email,need_shipping_address,send_phone_number_to_provider,send_email_to_provider,is_flexible,disable_notification,reply_to_message,reply_markup)","text":"Use this method to send invoices. On success, the sent Message is returned. View source","title":"#send_invoice"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_location(chat,latitude,longitude,message_thread_id,horizontal_accuracy,live_period,proximity_alert_radius,heading,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send point on the map. On success, the sent Message is returned. View source","title":"#send_location"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_media_group(chat,media,message_thread_id,disable_notification,protect_content,reply_to_message,allow_sending_without_reply)","text":"Use this method to send a group of photos or videos as an album. On success, an array of the sent Messages is returned. View source","title":"#send_media_group"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_message(chat,text,message_thread_id,parse_mode,entities,link_preview,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send text messages. On success, the sent Message is returned. View source","title":"#send_message"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_photo(chat,photo,message_thread_id,caption,parse_mode,caption_entities,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send photos. On success, the sent Message is returned. View source","title":"#send_photo"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_poll(chat,question,options,anonymous,type,allows_multiple_answers,correct_option_id,close_date,open_period,closed,disable_notification,reply_to_message,reply_markup)","text":"Use this method to send a native poll. On success, the sent Message is returned. View source","title":"#send_poll"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_slot_machine(chat,message_thread_id,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send a slot_machine (\ud83c\udfb0 emoji), which will have a random value from 1 to 64. On success, the sent Message is returned. View source","title":"#send_slot_machine"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_soccerball(chat,message_thread_id,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send a soccerball (\u26bd\ufe0f emoji), which will have a random value from 1 to 5. On success, the sent Message is returned. View source","title":"#send_soccerball"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_sticker(chat,sticker,message_thread_id,emoji,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send .webp stickers. On success, the sent Message is returned. See: https://core.telegram.org/bots/api#stickers for more info. View source","title":"#send_sticker"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_venue(chat,latitude,longitude,title,address,message_thread_id,foursquare_id,foursquare_type,google_place_id,google_place_type,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send information about a venue. On success, the sent Message is returned. View source","title":"#send_venue"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_video(chat,video,message_thread_id,duration,width,height,caption,caption_entities,parse_mode,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future. TODO: Add filesize checking and validation. View source","title":"#send_video"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_video_note(chat,video_note,message_thread_id,duration,width,height,caption,caption_entities,parse_mode,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"As of v.4.0 , Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned. View source","title":"#send_video_note"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#send_voice(chat,voice,message_thread_id,caption,caption_entities,duration,preformer,title,disable_notification,protect_content,reply_to_message,allow_sending_without_reply,reply_markup)","text":"Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Audio or Document ). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future. TODO: Add filesize checking and validation. View source","title":"#send_voice"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#serve(path,host,port,ssl_certificate_path,ssl_key_path,no_middleware_check)","text":"View source","title":"#serve"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_chat_admininstrator_custom_title(chat,user,custom_title)","text":"Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success. View source","title":"#set_chat_admininstrator_custom_title"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_chat_description(chat,description)","text":"Use this method to change the description of a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. View source","title":"#set_chat_description"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_chat_menu_button(chat,menu_button)","text":"Use this method to change the bot's menu button in a private chat, or the default menu button. Returns True on success. View source","title":"#set_chat_menu_button"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_chat_permissions(chat,permissions)","text":"Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members admin rights. Returns True on success. View source","title":"#set_chat_permissions"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_chat_photo(chat,photo)","text":"Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. Note: In regular groups (non-supergroups), this method will only work if the All Members Are Admins setting is off in the target group. View source","title":"#set_chat_photo"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_chat_sticker_set(chat,sticker_set_name)","text":"Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in #get_chat requests to check if the bot can use this method. Returns true on success. View source","title":"#set_chat_sticker_set"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_chat_title(chat,title)","text":"Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns true on success. Note: In regular groups (non-supergroups), this method will only work if the All Members Are Admins setting is off in the target group. View source","title":"#set_chat_title"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_custom_emoji_sticker_set_thumbnail(name,custom_emoji_id)","text":"Use this method to set the thumbnail of a custom emoji sticker set. Returns True on success. View source","title":"#set_custom_emoji_sticker_set_thumbnail"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_game_score(user_id,score,force,disable_edit_message,chat_id,message_id,inline_message_id)","text":"Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited Message, otherwise returns true . Raises an error, if the new score is not greater than the user's current score in the chat and force is false (default). View source","title":"#set_game_score"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_my_commands(commands,scope,language_code)","text":"Use this method to change the list of the bot's commands. Returns true on success. View source","title":"#set_my_commands"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_my_default_adminstrator_rights(rights,for_channels)","text":"Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are are free to modify the list before adding the bot. Returns True on success. View source","title":"#set_my_default_adminstrator_rights"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_my_description(description,language_code)","text":"Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty. Returns True on success. View source","title":"#set_my_description"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_my_short_description(description,language_code)","text":"Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot. Returns True on success. View source","title":"#set_my_short_description"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_passport_data_errors(user_id,errors)","text":"Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success. Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues. View source","title":"#set_passport_data_errors"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_sticker_emoji_list(sticker,emoji_list)","text":"Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success. View source","title":"#set_sticker_emoji_list"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_sticker_keywords(sticker,keywords)","text":"Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success. View source","title":"#set_sticker_keywords"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_sticker_mask_position(sticker,position)","text":"Use this method to change the mask position of a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns True on success. View source","title":"#set_sticker_mask_position"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_sticker_position_in_set(sticker,position)","text":"Use this method to move a sticker in a set created by the bot to a specific position. Returns true on success. View source","title":"#set_sticker_position_in_set"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_sticker_set_thumbnail(name,user,thumbnail)","text":"Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns true on success. View source","title":"#set_sticker_set_thumbnail"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_sticker_set_title(name,title)","text":"Use this method to set the title of a created sticker set. Returns True on success. View source","title":"#set_sticker_set_title"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#set_webhook(url,ip_address,certificate,max_connections,allowed_updates,drop_pending_updates,secret_token)","text":"Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized Update . In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns true on success. If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. https://www.example.com/<token> . Since nobody else knows your bot\u2018s token, you can be pretty sure it\u2019s us. View source","title":"#set_webhook"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#stop_message_live_location(chat,message,inline_message,reply_markup)","text":"Use this method to stop updating a live location message before live_period expires. On success, if the message was sent by the bot, the sent Message is returned, otherwise true is returned. View source","title":"#stop_message_live_location"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#stop_poll(chat,message,reply_markup)","text":"Use this method to stop a poll which was sent by the bot. On success, the stopped Poll with the final results is returned. View source","title":"#stop_poll"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#unban_chat_member(chat,user,only_if_banned)","text":"Use this method to unban a previously kicked user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. Returns true on success. View source","title":"#unban_chat_member"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#unban_chat_sender_chat(chat,sender_chat)","text":"Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns True on success. View source","title":"#unban_chat_sender_chat"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#unpin_all_chat_messages(chat)","text":"View source","title":"#unpin_all_chat_messages"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#unpin_all_forum_topic_messages(chat,message_thread_id)","text":"Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success. View source","title":"#unpin_all_forum_topic_messages"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#unpin_chat_message(chat,message)","text":"Use this method to unpin a message in a group, a supergroup, or a channel. The bot must be an administrator in the chat for this to work and must have the \u2018can_pin_messages\u2019 admin right in the supergroup or \u2018can_edit_messages\u2019 admin right in the channel. Returns true on success. View source","title":"#unpin_chat_message"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#unset_webhook","text":"Use this to unset the webhook and stop receiving updates to your bot. View source","title":"#unset_webhook"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#upload_sticker_file(user_id,png_sticker)","text":"Use this method to upload a .png file with a sticker for later use in #create_new_sticker_set and #add_sticker_to_set methods (can be used multiple times). Returns the uploaded TFile on success. View source","title":"#upload_sticker_file"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#use(middleware)","text":"View source","title":"#use"},{"location":"api_reference/Tourmaline/CommandHandler/","text":"class Tourmaline::CommandHandler inherits Tourmaline::EventHandler # Constructors # .new ( commands : String | Array ( String ), proc : EventHandlerProc ) # View source .new ( commands : String | Array ( String ), & block : EventHandlerProc ) # View source Methods # #actions : Array ( UpdateAction ) # View source #call ( ctx : Context ) # View source #commands : Array ( String ) # View source","title":"CommandHandler"},{"location":"api_reference/Tourmaline/CommandHandler/#Tourmaline::CommandHandler","text":"","title":"CommandHandler"},{"location":"api_reference/Tourmaline/CommandHandler/#Tourmaline::CommandHandler-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/CommandHandler/#Tourmaline::CommandHandler.new(commands,proc)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/CommandHandler/#Tourmaline::CommandHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/CommandHandler/#Tourmaline::CommandHandler#actions","text":"View source","title":"#actions"},{"location":"api_reference/Tourmaline/CommandHandler/#Tourmaline::CommandHandler#call(ctx)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/CommandHandler/#Tourmaline::CommandHandler#commands","text":"View source","title":"#commands"},{"location":"api_reference/Tourmaline/Contact/","text":"class Tourmaline::Contact inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #first_name : String # View source #last_name : String? # View source #phone_number : String # View source #user_id : Int32? # View source","title":"Contact"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact","text":"","title":"Contact"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#first_name","text":"View source","title":"#first_name"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#last_name","text":"View source","title":"#last_name"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#phone_number","text":"View source","title":"#phone_number"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#user_id","text":"View source","title":"#user_id"},{"location":"api_reference/Tourmaline/Context/","text":"struct Tourmaline::Context inherits Struct # Constructors # .new ( client : Client , update : Update ) # View source Methods # #answer_query ( * args , ** kwargs ) # Context aware query answer View source #api : Tourmaline::Client # Slightly shorter alias for the client View source #callback_query ( * args , ** options ) # Pass all update methods to the update object View source #callback_query # Pass all update methods to the update object View source #callback_query? # Pass all update methods to the update object View source #callback_query? ( * args , ** options ) # Pass all update methods to the update object View source #channel_post # Pass all update methods to the update object View source #channel_post ( * args , ** options ) # Pass all update methods to the update object View source #channel_post? # Pass all update methods to the update object View source #channel_post? ( * args , ** options ) # Pass all update methods to the update object View source #chosen_inline_result # Pass all update methods to the update object View source #chosen_inline_result ( * args , ** options ) # Pass all update methods to the update object View source #chosen_inline_result? ( * args , ** options ) # Pass all update methods to the update object View source #chosen_inline_result? # Pass all update methods to the update object View source #client : Client # View source #command # Get the command name, return nil if there is no message View source #command! # Get the command name, raise an exception if there is no message View source #delete_message ( message_id : Int32 ) # Context aware message deletion View source #edited_channel_post # Pass all update methods to the update object View source #edited_channel_post ( * args , ** options ) # Pass all update methods to the update object View source #edited_channel_post? ( * args , ** options ) # Pass all update methods to the update object View source #edited_channel_post? # Pass all update methods to the update object View source #edited_message ( * args , ** options ) # Pass all update methods to the update object View source #edited_message # Pass all update methods to the update object View source #edited_message? ( * args , ** options ) # Pass all update methods to the update object View source #edited_message? # Pass all update methods to the update object View source #forward_message ( to_chat , ** args ) # Context aware forward View source #inline_query # Pass all update methods to the update object View source #inline_query ( * args , ** options ) # Pass all update methods to the update object View source #inline_query? # Pass all update methods to the update object View source #inline_query? ( * args , ** options ) # Pass all update methods to the update object View source #message # Pass all update methods to the update object View source #message ( * args , ** options ) # Pass all update methods to the update object View source #message # Retuns the message, edited_message, channel_post, edited_channel_post, callback_query.message, or nil View source #message! # Returns the message, edited_message, channel_post, edited_channel_post, callback_query.message, or raises an exception View source #message? # Pass all update methods to the update object View source #message? ( * args , ** options ) # Pass all update methods to the update object View source #pin_message ( ** args ) # Context aware pinning View source #poll ( * args , ** options ) # Pass all update methods to the update object View source #poll # Pass all update methods to the update object View source #poll? ( * args , ** options ) # Pass all update methods to the update object View source #poll? # Pass all update methods to the update object View source #poll_answer ( * args , ** options ) # Pass all update methods to the update object View source #poll_answer # Pass all update methods to the update object View source #poll_answer? ( * args , ** options ) # Pass all update methods to the update object View source #poll_answer? # Pass all update methods to the update object View source #pre_checkout_query ( * args , ** options ) # Pass all update methods to the update object View source #pre_checkout_query # Pass all update methods to the update object View source #pre_checkout_query? ( * args , ** options ) # Pass all update methods to the update object View source #pre_checkout_query? # Pass all update methods to the update object View source #reply ( text : String , ** kwargs ) # Reply directly to the incoming message View source #reply_with_animation ( * args , ** kwargs ) # Reply directly to the incoming message with a animation View source #reply_with_audio ( * args , ** kwargs ) # Reply directly to the incoming message with a audio View source #reply_with_basketball ( * args , ** kwargs ) # Reply directly to the incoming message with a basketball View source #reply_with_contact ( * args , ** kwargs ) # Reply directly to the incoming message with a contact View source #reply_with_dart ( * args , ** kwargs ) # Reply directly to the incoming message with a dart View source #reply_with_dice ( * args , ** kwargs ) # Reply directly to the incoming message with a dice View source #reply_with_document ( * args , ** kwargs ) # Reply directly to the incoming message with a document View source #reply_with_invoice ( * args , ** kwargs ) # Reply directly to the incoming message with a invoice View source #reply_with_location ( * args , ** kwargs ) # Reply directly to the incoming message with a location View source #reply_with_media_group ( * args , ** kwargs ) # Reply directly to the incoming message with a media_group View source #reply_with_photo ( * args , ** kwargs ) # Reply directly to the incoming message with a photo View source #reply_with_poll ( * args , ** kwargs ) # Reply directly to the incoming message with a poll View source #reply_with_sticker ( * args , ** kwargs ) # Reply directly to the incoming message with a sticker View source #reply_with_venu ( * args , ** kwargs ) # Reply directly to the incoming message with a venu View source #reply_with_video ( * args , ** kwargs ) # Reply directly to the incoming message with a video View source #reply_with_video_note ( * args , ** kwargs ) # Reply directly to the incoming message with a video_note View source #reply_with_voice ( * args , ** kwargs ) # Reply directly to the incoming message with a voice View source #respond ( text : String , ** kwargs ) # Respond to the incoming message View source #respond_with_animation ( * args , ** kwargs ) # Respond with a animation View source #respond_with_audio ( * args , ** kwargs ) # Respond with a audio View source #respond_with_basketball ( * args , ** kwargs ) # Respond with a basketball View source #respond_with_contact ( * args , ** kwargs ) # Respond with a contact View source #respond_with_dart ( * args , ** kwargs ) # Respond with a dart View source #respond_with_dice ( * args , ** kwargs ) # Respond with a dice View source #respond_with_document ( * args , ** kwargs ) # Respond with a document View source #respond_with_invoice ( * args , ** kwargs ) # Respond with a invoice View source #respond_with_location ( * args , ** kwargs ) # Respond with a location View source #respond_with_media_group ( * args , ** kwargs ) # Respond with a media_group View source #respond_with_photo ( * args , ** kwargs ) # Respond with a photo View source #respond_with_poll ( * args , ** kwargs ) # Respond with a poll View source #respond_with_sticker ( * args , ** kwargs ) # Respond with a sticker View source #respond_with_venu ( * args , ** kwargs ) # Respond with a venu View source #respond_with_video ( * args , ** kwargs ) # Respond with a video View source #respond_with_video_note ( * args , ** kwargs ) # Respond with a video_note View source #respond_with_voice ( * args , ** kwargs ) # Respond with a voice View source #send_chat_action ( action : ChatAction ) # Context aware chat actions View source #shipping_query # Pass all update methods to the update object View source #shipping_query ( * args , ** options ) # Pass all update methods to the update object View source #shipping_query? # Pass all update methods to the update object View source #shipping_query? ( * args , ** options ) # Pass all update methods to the update object View source #text ( strip_command = true ) # Get the message text, return nil if there is no message View source #text! ( strip_command = true ) # Get the message text, raise an exception if there is no message View source #unpin_message ( ** args ) # Context aware unpinning View source #update : Update # View source #with_message # If the update contains a message, pass it to the block. Less boilerplate. View source","title":"Context"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context","text":"","title":"Context"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context.new(client,update)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#answer_query(*,**)","text":"Context aware query answer View source","title":"#answer_query"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#api","text":"Slightly shorter alias for the client View source","title":"#api"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#callback_query(*,**)","text":"Pass all update methods to the update object View source","title":"#callback_query"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#callback_query?(*,**,&)","text":"Pass all update methods to the update object View source","title":"#callback_query?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#channel_post(*,**,&)","text":"Pass all update methods to the update object View source","title":"#channel_post"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#channel_post?(*,**,&)","text":"Pass all update methods to the update object View source","title":"#channel_post?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#chosen_inline_result(*,**,&)","text":"Pass all update methods to the update object View source","title":"#chosen_inline_result"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#chosen_inline_result?(*,**)","text":"Pass all update methods to the update object View source","title":"#chosen_inline_result?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#client","text":"View source","title":"#client"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#command","text":"Get the command name, return nil if there is no message View source","title":"#command"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#command!","text":"Get the command name, raise an exception if there is no message View source","title":"#command!"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#delete_message(message_id)","text":"Context aware message deletion View source","title":"#delete_message"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#edited_channel_post(*,**,&)","text":"Pass all update methods to the update object View source","title":"#edited_channel_post"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#edited_channel_post?(*,**)","text":"Pass all update methods to the update object View source","title":"#edited_channel_post?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#edited_message(*,**)","text":"Pass all update methods to the update object View source","title":"#edited_message"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#edited_message?(*,**)","text":"Pass all update methods to the update object View source","title":"#edited_message?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#forward_message(to_chat,**)","text":"Context aware forward View source","title":"#forward_message"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#inline_query(*,**,&)","text":"Pass all update methods to the update object View source","title":"#inline_query"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#inline_query?(*,**,&)","text":"Pass all update methods to the update object View source","title":"#inline_query?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#message(*,**,&)","text":"Pass all update methods to the update object View source","title":"#message"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#message!","text":"Returns the message, edited_message, channel_post, edited_channel_post, callback_query.message, or raises an exception View source","title":"#message!"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#message?(*,**,&)","text":"Pass all update methods to the update object View source","title":"#message?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#pin_message(**)","text":"Context aware pinning View source","title":"#pin_message"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#poll(*,**)","text":"Pass all update methods to the update object View source","title":"#poll"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#poll?(*,**)","text":"Pass all update methods to the update object View source","title":"#poll?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#poll_answer(*,**)","text":"Pass all update methods to the update object View source","title":"#poll_answer"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#poll_answer?(*,**)","text":"Pass all update methods to the update object View source","title":"#poll_answer?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#pre_checkout_query(*,**)","text":"Pass all update methods to the update object View source","title":"#pre_checkout_query"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#pre_checkout_query?(*,**)","text":"Pass all update methods to the update object View source","title":"#pre_checkout_query?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply(text,**)","text":"Reply directly to the incoming message View source","title":"#reply"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_animation(*,**)","text":"Reply directly to the incoming message with a animation View source","title":"#reply_with_animation"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_audio(*,**)","text":"Reply directly to the incoming message with a audio View source","title":"#reply_with_audio"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_basketball(*,**)","text":"Reply directly to the incoming message with a basketball View source","title":"#reply_with_basketball"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_contact(*,**)","text":"Reply directly to the incoming message with a contact View source","title":"#reply_with_contact"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_dart(*,**)","text":"Reply directly to the incoming message with a dart View source","title":"#reply_with_dart"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_dice(*,**)","text":"Reply directly to the incoming message with a dice View source","title":"#reply_with_dice"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_document(*,**)","text":"Reply directly to the incoming message with a document View source","title":"#reply_with_document"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_invoice(*,**)","text":"Reply directly to the incoming message with a invoice View source","title":"#reply_with_invoice"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_location(*,**)","text":"Reply directly to the incoming message with a location View source","title":"#reply_with_location"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_media_group(*,**)","text":"Reply directly to the incoming message with a media_group View source","title":"#reply_with_media_group"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_photo(*,**)","text":"Reply directly to the incoming message with a photo View source","title":"#reply_with_photo"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_poll(*,**)","text":"Reply directly to the incoming message with a poll View source","title":"#reply_with_poll"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_sticker(*,**)","text":"Reply directly to the incoming message with a sticker View source","title":"#reply_with_sticker"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_venu(*,**)","text":"Reply directly to the incoming message with a venu View source","title":"#reply_with_venu"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_video(*,**)","text":"Reply directly to the incoming message with a video View source","title":"#reply_with_video"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_video_note(*,**)","text":"Reply directly to the incoming message with a video_note View source","title":"#reply_with_video_note"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_voice(*,**)","text":"Reply directly to the incoming message with a voice View source","title":"#reply_with_voice"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond(text,**)","text":"Respond to the incoming message View source","title":"#respond"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_animation(*,**)","text":"Respond with a animation View source","title":"#respond_with_animation"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_audio(*,**)","text":"Respond with a audio View source","title":"#respond_with_audio"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_basketball(*,**)","text":"Respond with a basketball View source","title":"#respond_with_basketball"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_contact(*,**)","text":"Respond with a contact View source","title":"#respond_with_contact"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_dart(*,**)","text":"Respond with a dart View source","title":"#respond_with_dart"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_dice(*,**)","text":"Respond with a dice View source","title":"#respond_with_dice"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_document(*,**)","text":"Respond with a document View source","title":"#respond_with_document"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_invoice(*,**)","text":"Respond with a invoice View source","title":"#respond_with_invoice"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_location(*,**)","text":"Respond with a location View source","title":"#respond_with_location"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_media_group(*,**)","text":"Respond with a media_group View source","title":"#respond_with_media_group"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_photo(*,**)","text":"Respond with a photo View source","title":"#respond_with_photo"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_poll(*,**)","text":"Respond with a poll View source","title":"#respond_with_poll"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_sticker(*,**)","text":"Respond with a sticker View source","title":"#respond_with_sticker"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_venu(*,**)","text":"Respond with a venu View source","title":"#respond_with_venu"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_video(*,**)","text":"Respond with a video View source","title":"#respond_with_video"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_video_note(*,**)","text":"Respond with a video_note View source","title":"#respond_with_video_note"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_voice(*,**)","text":"Respond with a voice View source","title":"#respond_with_voice"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#send_chat_action(action)","text":"Context aware chat actions View source","title":"#send_chat_action"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#shipping_query(*,**,&)","text":"Pass all update methods to the update object View source","title":"#shipping_query"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#shipping_query?(*,**,&)","text":"Pass all update methods to the update object View source","title":"#shipping_query?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#text(strip_command)","text":"Get the message text, return nil if there is no message View source","title":"#text"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#text!(strip_command)","text":"Get the message text, raise an exception if there is no message View source","title":"#text!"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#unpin_message(**)","text":"Context aware unpinning View source","title":"#unpin_message"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#update","text":"View source","title":"#update"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#with_message(&)","text":"If the update contains a message, pass it to the block. Less boilerplate. View source","title":"#with_message"},{"location":"api_reference/Tourmaline/Dice/","text":"class Tourmaline::Dice inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #emoji : String # View source #value : Int32 # View source","title":"Dice"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice","text":"","title":"Dice"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice#emoji","text":"View source","title":"#emoji"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice#value","text":"View source","title":"#value"},{"location":"api_reference/Tourmaline/Dispatcher/","text":"class Tourmaline::Dispatcher inherits Reference # The Dispatcher is responsible for dispatching requests to the appropria Constructors # .new ( client : Client ) # View source Methods # #event_handlers : Hash ( UpdateAction , Array ( EventHandlerType )) # View source #middleware : Array ( Middleware ) # View source #on ( * actions : UpdateAction , & block : Context -> ) # View source #process ( update : Update ) # View source #register ( handler : EventHandler ) # View source #use ( * middlewares : Middleware ) # View source #use ( * middlewares : Middleware . class ) # View source","title":"Dispatcher"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher","text":"The Dispatcher is responsible for dispatching requests to the appropria","title":"Dispatcher"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher.new(client)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher#event_handlers","text":"View source","title":"#event_handlers"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher#middleware","text":"View source","title":"#middleware"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher#on(*,&)","text":"View source","title":"#on"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher#process(update)","text":"View source","title":"#process"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher#register(handler)","text":"View source","title":"#register"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher#use(*)","text":"View source","title":"#use"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher#use(*)","text":"View source","title":"#use"},{"location":"api_reference/Tourmaline/Document/","text":"class Tourmaline::Document inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_id : String # View source #file_name : String? # View source #file_size : Int64? # View source #file_unique_id : String # View source #mime_type : String? # View source #thumbnail : PhotoSize? # View source","title":"Document"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document","text":"","title":"Document"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#file_name","text":"View source","title":"#file_name"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#mime_type","text":"View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#thumbnail","text":"View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/EncryptedCredentials/","text":"class Tourmaline::EncryptedCredentials inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #data : String # View source #hash : String # Generates an UInt64 hash value for this object. This method must have the property that a == b implies a.hash == b.hash . The hash value is used along with == by the Hash class to determine if two objects reference the same hash key. Subclasses must not override this method. Instead, they must define hash(hasher) , though usually the macro def_hash can be used to generate this method. View source #secret : String # View source","title":"EncryptedCredentials"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials","text":"","title":"EncryptedCredentials"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials#data","text":"View source","title":"#data"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials#hash","text":"Generates an UInt64 hash value for this object. This method must have the property that a == b implies a.hash == b.hash . The hash value is used along with == by the Hash class to determine if two objects reference the same hash key. Subclasses must not override this method. Instead, they must define hash(hasher) , though usually the macro def_hash can be used to generate this method. View source","title":"#hash"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials#secret","text":"View source","title":"#secret"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/","text":"class Tourmaline::EncryptedPassportElement inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #data : String? # View source #email : String? # View source #files : Array ( PassportFile ) # View source #front_side : Array ( PassportFile ) # View source #hash : String # Generates an UInt64 hash value for this object. This method must have the property that a == b implies a.hash == b.hash . The hash value is used along with == by the Hash class to determine if two objects reference the same hash key. Subclasses must not override this method. Instead, they must define hash(hasher) , though usually the macro def_hash can be used to generate this method. View source #phone_number : String? # View source #reverse_side : Array ( PassportFile ) # View source #selfie : PassportFile? # View source #translation : Array ( PassportFile ) # View source #type : EncryptedPassportElement::Type # View source","title":"EncryptedPassportElement"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement","text":"","title":"EncryptedPassportElement"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#data","text":"View source","title":"#data"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#email","text":"View source","title":"#email"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#files","text":"View source","title":"#files"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#front_side","text":"View source","title":"#front_side"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#hash","text":"Generates an UInt64 hash value for this object. This method must have the property that a == b implies a.hash == b.hash . The hash value is used along with == by the Hash class to determine if two objects reference the same hash key. Subclasses must not override this method. Instead, they must define hash(hasher) , though usually the macro def_hash can be used to generate this method. View source","title":"#hash"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#phone_number","text":"View source","title":"#phone_number"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#reverse_side","text":"View source","title":"#reverse_side"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#selfie","text":"View source","title":"#selfie"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#translation","text":"View source","title":"#translation"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/","text":"enum Tourmaline::EncryptedPassportElement::Type # Members # PersonalDetails = 0 # Passport = 1 # DriverLicense = 2 # IdentityCard = 3 # InternalPassport = 4 # Address = 5 # UtilityBill = 6 # BankStatement = 7 # RentalAgreement = 8 # PassportRegistration = 9 # TemporaryRegistration = 10 # PhoneNumber = 11 # Email = 12 # Class methods # .from_json ( pull : JSON :: PullParser ) # View source Methods # #address? # View source #bank_statement? # View source #driver_license? # View source #email? # View source #identity_card? # View source #internal_passport? # View source #passport? # View source #passport_registration? # View source #personal_details? # View source #phone_number? # View source #rental_agreement? # View source #temporary_registration? # View source #to_json ( json : JSON :: Builder ) # Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source #utility_bill? # View source","title":"Type"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type","text":"","title":"Type"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::PersonalDetails","text":"","title":"PersonalDetails"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::Passport","text":"","title":"Passport"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::DriverLicense","text":"","title":"DriverLicense"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::IdentityCard","text":"","title":"IdentityCard"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::InternalPassport","text":"","title":"InternalPassport"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::Address","text":"","title":"Address"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::UtilityBill","text":"","title":"UtilityBill"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::BankStatement","text":"","title":"BankStatement"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::RentalAgreement","text":"","title":"RentalAgreement"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::PassportRegistration","text":"","title":"PassportRegistration"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::TemporaryRegistration","text":"","title":"TemporaryRegistration"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::PhoneNumber","text":"","title":"PhoneNumber"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type::Email","text":"","title":"Email"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type.from_json(pull)","text":"View source","title":".from_json"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#address?","text":"View source","title":"#address?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#bank_statement?","text":"View source","title":"#bank_statement?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#driver_license?","text":"View source","title":"#driver_license?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#email?","text":"View source","title":"#email?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#identity_card?","text":"View source","title":"#identity_card?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#internal_passport?","text":"View source","title":"#internal_passport?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#passport?","text":"View source","title":"#passport?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#passport_registration?","text":"View source","title":"#passport_registration?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#personal_details?","text":"View source","title":"#personal_details?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#phone_number?","text":"View source","title":"#phone_number?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#rental_agreement?","text":"View source","title":"#rental_agreement?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#temporary_registration?","text":"View source","title":"#temporary_registration?"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#to_json(json)","text":"Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source","title":"#to_json"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/Type/#Tourmaline::EncryptedPassportElement::Type#utility_bill?","text":"View source","title":"#utility_bill?"},{"location":"api_reference/Tourmaline/Error/","text":"class Tourmaline::Error inherits Exception # Direct known subclasses Tourmaline::Error::BadRequest Tourmaline::Error::ConflictError Tourmaline::Error::MigrateToChat Tourmaline::Error::NetworkError Tourmaline::Error::RetryAfter Tourmaline::Error::Throttled Tourmaline::Error::Unauthorized Tourmaline::Error::ValidationError Constants # ERROR_PREFIXES = [ \"error: \" , \"[error]: \" , \"bad request: \" , \"conflict: \" , \"not found: \" ] # Constructors # .new ( message = \"\" ) # View source Class methods # .from_message ( text ) # View source","title":"Error"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error","text":"","title":"Error"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error::ERROR_PREFIXES","text":"","title":"ERROR_PREFIXES"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error.new(message)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error.from_message(text)","text":"View source","title":".from_message"},{"location":"api_reference/Tourmaline/Error/BadRequest/","text":"class Tourmaline::Error::BadRequest inherits Tourmaline::Error # Direct known subclasses Tourmaline::Error::BadWebhook Tourmaline::Error::BotDomainInvalid Tourmaline::Error::ButtonDataInvalid Tourmaline::Error::ButtonURLInvalid Tourmaline::Error::CantDemoteChatCreator Tourmaline::Error::CantParseEntities Tourmaline::Error::CantParseUrl Tourmaline::Error::CantRemoveChatOwner Tourmaline::Error::CantRestrictSelf Tourmaline::Error::ChatAdminRequired Tourmaline::Error::ChatDescriptionIsNotModified Tourmaline::Error::ChatIdIsEmpty Tourmaline::Error::ChatNotFound Tourmaline::Error::CurrencyTotalAmountInvalid Tourmaline::Error::GroupDeactivated Tourmaline::Error::InlineKeyboardExpected Tourmaline::Error::InvalidHTTPUrlContent Tourmaline::Error::InvalidPeerID Tourmaline::Error::InvalidQueryID Tourmaline::Error::InvalidResultID Tourmaline::Error::InvalidStickersSet Tourmaline::Error::InvalidUserId Tourmaline::Error::MemberListInaccessible Tourmaline::Error::MessageError Tourmaline::Error::MethodIsNotAvailable Tourmaline::Error::MethodNotAvailableInPrivateChats Tourmaline::Error::NeedAdministratorRightsInTheChannel Tourmaline::Error::NoStickerInRequest Tourmaline::Error::NotEnoughRightsOther Tourmaline::Error::NotEnoughRightsToPinMessage Tourmaline::Error::NotEnoughRightsToRestrict Tourmaline::Error::NotFound Tourmaline::Error::ObjectExpectedAsReplyMarkup Tourmaline::Error::PaymentProviderInvalid Tourmaline::Error::PhotoAsInputFileRequired Tourmaline::Error::PhotoDimensions Tourmaline::Error::PollError Tourmaline::Error::RequestTimeoutError Tourmaline::Error::ResultIdDuplicate Tourmaline::Error::StartParamInvalid Tourmaline::Error::TypeOfFileMismatch Tourmaline::Error::UnavailableMembers Tourmaline::Error::UnsupportedUrlProtocol Tourmaline::Error::URLHostIsEmpty Tourmaline::Error::UserNotFound Tourmaline::Error::WrongFileIdentifier Tourmaline::Error::WrongLiveLocationPeriod Tourmaline::Error::WrongRemoteFileIdSpecified","title":"BadRequest"},{"location":"api_reference/Tourmaline/Error/BadRequest/#Tourmaline::Error::BadRequest","text":"","title":"BadRequest"},{"location":"api_reference/Tourmaline/Error/BadWebhook/","text":"class Tourmaline::Error::BadWebhook inherits Tourmaline::Error::BadRequest # Direct known subclasses Tourmaline::Error::BadWebhookAddrInfo Tourmaline::Error::BadWebhookNoAddressAssociatedWithHostname Tourmaline::Error::BadWebhookPort Tourmaline::Error::WebhookRequireHTTPS","title":"BadWebhook"},{"location":"api_reference/Tourmaline/Error/BadWebhook/#Tourmaline::Error::BadWebhook","text":"","title":"BadWebhook"},{"location":"api_reference/Tourmaline/Error/BadWebhookAddrInfo/","text":"class Tourmaline::Error::BadWebhookAddrInfo inherits Tourmaline::Error::BadWebhook #","title":"BadWebhookAddrInfo"},{"location":"api_reference/Tourmaline/Error/BadWebhookAddrInfo/#Tourmaline::Error::BadWebhookAddrInfo","text":"","title":"BadWebhookAddrInfo"},{"location":"api_reference/Tourmaline/Error/BadWebhookNoAddressAssociatedWithHostname/","text":"class Tourmaline::Error::BadWebhookNoAddressAssociatedWithHostname inherits Tourmaline::Error::BadWebhook #","title":"BadWebhookNoAddressAssociatedWithHostname"},{"location":"api_reference/Tourmaline/Error/BadWebhookNoAddressAssociatedWithHostname/#Tourmaline::Error::BadWebhookNoAddressAssociatedWithHostname","text":"","title":"BadWebhookNoAddressAssociatedWithHostname"},{"location":"api_reference/Tourmaline/Error/BadWebhookPort/","text":"class Tourmaline::Error::BadWebhookPort inherits Tourmaline::Error::BadWebhook #","title":"BadWebhookPort"},{"location":"api_reference/Tourmaline/Error/BadWebhookPort/#Tourmaline::Error::BadWebhookPort","text":"","title":"BadWebhookPort"},{"location":"api_reference/Tourmaline/Error/BotBlocked/","text":"class Tourmaline::Error::BotBlocked inherits Tourmaline::Error::Unauthorized #","title":"BotBlocked"},{"location":"api_reference/Tourmaline/Error/BotBlocked/#Tourmaline::Error::BotBlocked","text":"","title":"BotBlocked"},{"location":"api_reference/Tourmaline/Error/BotDomainInvalid/","text":"class Tourmaline::Error::BotDomainInvalid inherits Tourmaline::Error::BadRequest #","title":"BotDomainInvalid"},{"location":"api_reference/Tourmaline/Error/BotDomainInvalid/#Tourmaline::Error::BotDomainInvalid","text":"","title":"BotDomainInvalid"},{"location":"api_reference/Tourmaline/Error/BotKicked/","text":"class Tourmaline::Error::BotKicked inherits Tourmaline::Error::Unauthorized #","title":"BotKicked"},{"location":"api_reference/Tourmaline/Error/BotKicked/#Tourmaline::Error::BotKicked","text":"","title":"BotKicked"},{"location":"api_reference/Tourmaline/Error/ButtonDataInvalid/","text":"class Tourmaline::Error::ButtonDataInvalid inherits Tourmaline::Error::BadRequest #","title":"ButtonDataInvalid"},{"location":"api_reference/Tourmaline/Error/ButtonDataInvalid/#Tourmaline::Error::ButtonDataInvalid","text":"","title":"ButtonDataInvalid"},{"location":"api_reference/Tourmaline/Error/ButtonURLInvalid/","text":"class Tourmaline::Error::ButtonURLInvalid inherits Tourmaline::Error::BadRequest #","title":"ButtonURLInvalid"},{"location":"api_reference/Tourmaline/Error/ButtonURLInvalid/#Tourmaline::Error::ButtonURLInvalid","text":"","title":"ButtonURLInvalid"},{"location":"api_reference/Tourmaline/Error/CantDemoteChatCreator/","text":"class Tourmaline::Error::CantDemoteChatCreator inherits Tourmaline::Error::BadRequest #","title":"CantDemoteChatCreator"},{"location":"api_reference/Tourmaline/Error/CantDemoteChatCreator/#Tourmaline::Error::CantDemoteChatCreator","text":"","title":"CantDemoteChatCreator"},{"location":"api_reference/Tourmaline/Error/CantGetUpdates/","text":"class Tourmaline::Error::CantGetUpdates inherits Tourmaline::Error::ConflictError #","title":"CantGetUpdates"},{"location":"api_reference/Tourmaline/Error/CantGetUpdates/#Tourmaline::Error::CantGetUpdates","text":"","title":"CantGetUpdates"},{"location":"api_reference/Tourmaline/Error/CantInitiateConversation/","text":"class Tourmaline::Error::CantInitiateConversation inherits Tourmaline::Error::Unauthorized #","title":"CantInitiateConversation"},{"location":"api_reference/Tourmaline/Error/CantInitiateConversation/#Tourmaline::Error::CantInitiateConversation","text":"","title":"CantInitiateConversation"},{"location":"api_reference/Tourmaline/Error/CantParseEntities/","text":"class Tourmaline::Error::CantParseEntities inherits Tourmaline::Error::BadRequest #","title":"CantParseEntities"},{"location":"api_reference/Tourmaline/Error/CantParseEntities/#Tourmaline::Error::CantParseEntities","text":"","title":"CantParseEntities"},{"location":"api_reference/Tourmaline/Error/CantParseUrl/","text":"class Tourmaline::Error::CantParseUrl inherits Tourmaline::Error::BadRequest #","title":"CantParseUrl"},{"location":"api_reference/Tourmaline/Error/CantParseUrl/#Tourmaline::Error::CantParseUrl","text":"","title":"CantParseUrl"},{"location":"api_reference/Tourmaline/Error/CantRemoveChatOwner/","text":"class Tourmaline::Error::CantRemoveChatOwner inherits Tourmaline::Error::BadRequest #","title":"CantRemoveChatOwner"},{"location":"api_reference/Tourmaline/Error/CantRemoveChatOwner/#Tourmaline::Error::CantRemoveChatOwner","text":"","title":"CantRemoveChatOwner"},{"location":"api_reference/Tourmaline/Error/CantRestrictSelf/","text":"class Tourmaline::Error::CantRestrictSelf inherits Tourmaline::Error::BadRequest #","title":"CantRestrictSelf"},{"location":"api_reference/Tourmaline/Error/CantRestrictSelf/#Tourmaline::Error::CantRestrictSelf","text":"","title":"CantRestrictSelf"},{"location":"api_reference/Tourmaline/Error/CantTalkWithBots/","text":"class Tourmaline::Error::CantTalkWithBots inherits Tourmaline::Error::Unauthorized #","title":"CantTalkWithBots"},{"location":"api_reference/Tourmaline/Error/CantTalkWithBots/#Tourmaline::Error::CantTalkWithBots","text":"","title":"CantTalkWithBots"},{"location":"api_reference/Tourmaline/Error/ChatAdminRequired/","text":"class Tourmaline::Error::ChatAdminRequired inherits Tourmaline::Error::BadRequest #","title":"ChatAdminRequired"},{"location":"api_reference/Tourmaline/Error/ChatAdminRequired/#Tourmaline::Error::ChatAdminRequired","text":"","title":"ChatAdminRequired"},{"location":"api_reference/Tourmaline/Error/ChatDescriptionIsNotModified/","text":"class Tourmaline::Error::ChatDescriptionIsNotModified inherits Tourmaline::Error::BadRequest #","title":"ChatDescriptionIsNotModified"},{"location":"api_reference/Tourmaline/Error/ChatDescriptionIsNotModified/#Tourmaline::Error::ChatDescriptionIsNotModified","text":"","title":"ChatDescriptionIsNotModified"},{"location":"api_reference/Tourmaline/Error/ChatIdIsEmpty/","text":"class Tourmaline::Error::ChatIdIsEmpty inherits Tourmaline::Error::BadRequest #","title":"ChatIdIsEmpty"},{"location":"api_reference/Tourmaline/Error/ChatIdIsEmpty/#Tourmaline::Error::ChatIdIsEmpty","text":"","title":"ChatIdIsEmpty"},{"location":"api_reference/Tourmaline/Error/ChatNotFound/","text":"class Tourmaline::Error::ChatNotFound inherits Tourmaline::Error::BadRequest #","title":"ChatNotFound"},{"location":"api_reference/Tourmaline/Error/ChatNotFound/#Tourmaline::Error::ChatNotFound","text":"","title":"ChatNotFound"},{"location":"api_reference/Tourmaline/Error/ConflictError/","text":"class Tourmaline::Error::ConflictError inherits Tourmaline::Error # Direct known subclasses Tourmaline::Error::CantGetUpdates Tourmaline::Error::TerminatedByOtherGetUpdates","title":"ConflictError"},{"location":"api_reference/Tourmaline/Error/ConflictError/#Tourmaline::Error::ConflictError","text":"","title":"ConflictError"},{"location":"api_reference/Tourmaline/Error/ConnectionLost/","text":"class Tourmaline::Error::ConnectionLost inherits DB::PoolResourceLost # Raised when a connection is unable to be established probably due to socket/network or configuration issues. It is used by the connection pool retry logic.","title":"ConnectionLost"},{"location":"api_reference/Tourmaline/Error/ConnectionLost/#Tourmaline::Error::ConnectionLost","text":"Raised when a connection is unable to be established probably due to socket/network or configuration issues. It is used by the connection pool retry logic.","title":"ConnectionLost"},{"location":"api_reference/Tourmaline/Error/CurrencyTotalAmountInvalid/","text":"class Tourmaline::Error::CurrencyTotalAmountInvalid inherits Tourmaline::Error::BadRequest #","title":"CurrencyTotalAmountInvalid"},{"location":"api_reference/Tourmaline/Error/CurrencyTotalAmountInvalid/#Tourmaline::Error::CurrencyTotalAmountInvalid","text":"","title":"CurrencyTotalAmountInvalid"},{"location":"api_reference/Tourmaline/Error/GroupDeactivated/","text":"class Tourmaline::Error::GroupDeactivated inherits Tourmaline::Error::BadRequest #","title":"GroupDeactivated"},{"location":"api_reference/Tourmaline/Error/GroupDeactivated/#Tourmaline::Error::GroupDeactivated","text":"","title":"GroupDeactivated"},{"location":"api_reference/Tourmaline/Error/InlineKeyboardExpected/","text":"class Tourmaline::Error::InlineKeyboardExpected inherits Tourmaline::Error::BadRequest #","title":"InlineKeyboardExpected"},{"location":"api_reference/Tourmaline/Error/InlineKeyboardExpected/#Tourmaline::Error::InlineKeyboardExpected","text":"","title":"InlineKeyboardExpected"},{"location":"api_reference/Tourmaline/Error/InvalidHTTPUrlContent/","text":"class Tourmaline::Error::InvalidHTTPUrlContent inherits Tourmaline::Error::BadRequest #","title":"InvalidHTTPUrlContent"},{"location":"api_reference/Tourmaline/Error/InvalidHTTPUrlContent/#Tourmaline::Error::InvalidHTTPUrlContent","text":"","title":"InvalidHTTPUrlContent"},{"location":"api_reference/Tourmaline/Error/InvalidPeerID/","text":"class Tourmaline::Error::InvalidPeerID inherits Tourmaline::Error::BadRequest #","title":"InvalidPeerID"},{"location":"api_reference/Tourmaline/Error/InvalidPeerID/#Tourmaline::Error::InvalidPeerID","text":"","title":"InvalidPeerID"},{"location":"api_reference/Tourmaline/Error/InvalidQueryID/","text":"class Tourmaline::Error::InvalidQueryID inherits Tourmaline::Error::BadRequest #","title":"InvalidQueryID"},{"location":"api_reference/Tourmaline/Error/InvalidQueryID/#Tourmaline::Error::InvalidQueryID","text":"","title":"InvalidQueryID"},{"location":"api_reference/Tourmaline/Error/InvalidResultID/","text":"class Tourmaline::Error::InvalidResultID inherits Tourmaline::Error::BadRequest #","title":"InvalidResultID"},{"location":"api_reference/Tourmaline/Error/InvalidResultID/#Tourmaline::Error::InvalidResultID","text":"","title":"InvalidResultID"},{"location":"api_reference/Tourmaline/Error/InvalidStickersSet/","text":"class Tourmaline::Error::InvalidStickersSet inherits Tourmaline::Error::BadRequest #","title":"InvalidStickersSet"},{"location":"api_reference/Tourmaline/Error/InvalidStickersSet/#Tourmaline::Error::InvalidStickersSet","text":"","title":"InvalidStickersSet"},{"location":"api_reference/Tourmaline/Error/InvalidUserId/","text":"class Tourmaline::Error::InvalidUserId inherits Tourmaline::Error::BadRequest #","title":"InvalidUserId"},{"location":"api_reference/Tourmaline/Error/InvalidUserId/#Tourmaline::Error::InvalidUserId","text":"","title":"InvalidUserId"},{"location":"api_reference/Tourmaline/Error/MemberListInaccessible/","text":"class Tourmaline::Error::MemberListInaccessible inherits Tourmaline::Error::BadRequest #","title":"MemberListInaccessible"},{"location":"api_reference/Tourmaline/Error/MemberListInaccessible/#Tourmaline::Error::MemberListInaccessible","text":"","title":"MemberListInaccessible"},{"location":"api_reference/Tourmaline/Error/MessageCantBeDeleted/","text":"class Tourmaline::Error::MessageCantBeDeleted inherits Tourmaline::Error::MessageError #","title":"MessageCantBeDeleted"},{"location":"api_reference/Tourmaline/Error/MessageCantBeDeleted/#Tourmaline::Error::MessageCantBeDeleted","text":"","title":"MessageCantBeDeleted"},{"location":"api_reference/Tourmaline/Error/MessageCantBeEdited/","text":"class Tourmaline::Error::MessageCantBeEdited inherits Tourmaline::Error::MessageError #","title":"MessageCantBeEdited"},{"location":"api_reference/Tourmaline/Error/MessageCantBeEdited/#Tourmaline::Error::MessageCantBeEdited","text":"","title":"MessageCantBeEdited"},{"location":"api_reference/Tourmaline/Error/MessageError/","text":"class Tourmaline::Error::MessageError inherits Tourmaline::Error::BadRequest # Direct known subclasses Tourmaline::Error::MessageCantBeDeleted Tourmaline::Error::MessageCantBeEdited Tourmaline::Error::MessageIdentifierNotSpecified Tourmaline::Error::MessageIdInvalid Tourmaline::Error::MessageIsNotAPoll Tourmaline::Error::MessageIsTooLong Tourmaline::Error::MessageNotModified Tourmaline::Error::MessageTextIsEmpty Tourmaline::Error::MessageToDeleteNotFound Tourmaline::Error::MessageToEditNotFound Tourmaline::Error::MessageToForwardNotFound Tourmaline::Error::MessageToReplyNotFound Tourmaline::Error::MessageWithPollNotFound Tourmaline::Error::PollCantBeStopped Tourmaline::Error::PollHasAlreadyClosed Tourmaline::Error::PollsCantBeSentToPrivateChats Tourmaline::Error::TooMuchMessages","title":"MessageError"},{"location":"api_reference/Tourmaline/Error/MessageError/#Tourmaline::Error::MessageError","text":"","title":"MessageError"},{"location":"api_reference/Tourmaline/Error/MessageIdInvalid/","text":"class Tourmaline::Error::MessageIdInvalid inherits Tourmaline::Error::MessageError #","title":"MessageIdInvalid"},{"location":"api_reference/Tourmaline/Error/MessageIdInvalid/#Tourmaline::Error::MessageIdInvalid","text":"","title":"MessageIdInvalid"},{"location":"api_reference/Tourmaline/Error/MessageIdentifierNotSpecified/","text":"class Tourmaline::Error::MessageIdentifierNotSpecified inherits Tourmaline::Error::MessageError #","title":"MessageIdentifierNotSpecified"},{"location":"api_reference/Tourmaline/Error/MessageIdentifierNotSpecified/#Tourmaline::Error::MessageIdentifierNotSpecified","text":"","title":"MessageIdentifierNotSpecified"},{"location":"api_reference/Tourmaline/Error/MessageIsNotAPoll/","text":"class Tourmaline::Error::MessageIsNotAPoll inherits Tourmaline::Error::MessageError #","title":"MessageIsNotAPoll"},{"location":"api_reference/Tourmaline/Error/MessageIsNotAPoll/#Tourmaline::Error::MessageIsNotAPoll","text":"","title":"MessageIsNotAPoll"},{"location":"api_reference/Tourmaline/Error/MessageIsTooLong/","text":"class Tourmaline::Error::MessageIsTooLong inherits Tourmaline::Error::MessageError #","title":"MessageIsTooLong"},{"location":"api_reference/Tourmaline/Error/MessageIsTooLong/#Tourmaline::Error::MessageIsTooLong","text":"","title":"MessageIsTooLong"},{"location":"api_reference/Tourmaline/Error/MessageNotModified/","text":"class Tourmaline::Error::MessageNotModified inherits Tourmaline::Error::MessageError #","title":"MessageNotModified"},{"location":"api_reference/Tourmaline/Error/MessageNotModified/#Tourmaline::Error::MessageNotModified","text":"","title":"MessageNotModified"},{"location":"api_reference/Tourmaline/Error/MessageTextIsEmpty/","text":"class Tourmaline::Error::MessageTextIsEmpty inherits Tourmaline::Error::MessageError #","title":"MessageTextIsEmpty"},{"location":"api_reference/Tourmaline/Error/MessageTextIsEmpty/#Tourmaline::Error::MessageTextIsEmpty","text":"","title":"MessageTextIsEmpty"},{"location":"api_reference/Tourmaline/Error/MessageToDeleteNotFound/","text":"class Tourmaline::Error::MessageToDeleteNotFound inherits Tourmaline::Error::MessageError #","title":"MessageToDeleteNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToDeleteNotFound/#Tourmaline::Error::MessageToDeleteNotFound","text":"","title":"MessageToDeleteNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToEditNotFound/","text":"class Tourmaline::Error::MessageToEditNotFound inherits Tourmaline::Error::MessageError #","title":"MessageToEditNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToEditNotFound/#Tourmaline::Error::MessageToEditNotFound","text":"","title":"MessageToEditNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToForwardNotFound/","text":"class Tourmaline::Error::MessageToForwardNotFound inherits Tourmaline::Error::MessageError #","title":"MessageToForwardNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToForwardNotFound/#Tourmaline::Error::MessageToForwardNotFound","text":"","title":"MessageToForwardNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToReplyNotFound/","text":"class Tourmaline::Error::MessageToReplyNotFound inherits Tourmaline::Error::MessageError #","title":"MessageToReplyNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToReplyNotFound/#Tourmaline::Error::MessageToReplyNotFound","text":"","title":"MessageToReplyNotFound"},{"location":"api_reference/Tourmaline/Error/MessageWithPollNotFound/","text":"class Tourmaline::Error::MessageWithPollNotFound inherits Tourmaline::Error::MessageError #","title":"MessageWithPollNotFound"},{"location":"api_reference/Tourmaline/Error/MessageWithPollNotFound/#Tourmaline::Error::MessageWithPollNotFound","text":"","title":"MessageWithPollNotFound"},{"location":"api_reference/Tourmaline/Error/MethodIsNotAvailable/","text":"class Tourmaline::Error::MethodIsNotAvailable inherits Tourmaline::Error::BadRequest #","title":"MethodIsNotAvailable"},{"location":"api_reference/Tourmaline/Error/MethodIsNotAvailable/#Tourmaline::Error::MethodIsNotAvailable","text":"","title":"MethodIsNotAvailable"},{"location":"api_reference/Tourmaline/Error/MethodNotAvailableInPrivateChats/","text":"class Tourmaline::Error::MethodNotAvailableInPrivateChats inherits Tourmaline::Error::BadRequest #","title":"MethodNotAvailableInPrivateChats"},{"location":"api_reference/Tourmaline/Error/MethodNotAvailableInPrivateChats/#Tourmaline::Error::MethodNotAvailableInPrivateChats","text":"","title":"MethodNotAvailableInPrivateChats"},{"location":"api_reference/Tourmaline/Error/MethodNotKnown/","text":"class Tourmaline::Error::MethodNotKnown inherits Tourmaline::Error::NotFound #","title":"MethodNotKnown"},{"location":"api_reference/Tourmaline/Error/MethodNotKnown/#Tourmaline::Error::MethodNotKnown","text":"","title":"MethodNotKnown"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/","text":"class Tourmaline::Error::MigrateToChat inherits Tourmaline::Error # Constructors # .new ( chat_id ) # View source Methods # #chat_id : Int64 # View source","title":"MigrateToChat"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/#Tourmaline::Error::MigrateToChat","text":"","title":"MigrateToChat"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/#Tourmaline::Error::MigrateToChat-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/#Tourmaline::Error::MigrateToChat.new(chat_id)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/#Tourmaline::Error::MigrateToChat-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/#Tourmaline::Error::MigrateToChat#chat_id","text":"View source","title":"#chat_id"},{"location":"api_reference/Tourmaline/Error/NeedAdministratorRightsInTheChannel/","text":"class Tourmaline::Error::NeedAdministratorRightsInTheChannel inherits Tourmaline::Error::BadRequest #","title":"NeedAdministratorRightsInTheChannel"},{"location":"api_reference/Tourmaline/Error/NeedAdministratorRightsInTheChannel/#Tourmaline::Error::NeedAdministratorRightsInTheChannel","text":"","title":"NeedAdministratorRightsInTheChannel"},{"location":"api_reference/Tourmaline/Error/NetworkError/","text":"class Tourmaline::Error::NetworkError inherits Tourmaline::Error #","title":"NetworkError"},{"location":"api_reference/Tourmaline/Error/NetworkError/#Tourmaline::Error::NetworkError","text":"","title":"NetworkError"},{"location":"api_reference/Tourmaline/Error/NoStickerInRequest/","text":"class Tourmaline::Error::NoStickerInRequest inherits Tourmaline::Error::BadRequest #","title":"NoStickerInRequest"},{"location":"api_reference/Tourmaline/Error/NoStickerInRequest/#Tourmaline::Error::NoStickerInRequest","text":"","title":"NoStickerInRequest"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsOther/","text":"class Tourmaline::Error::NotEnoughRightsOther inherits Tourmaline::Error::BadRequest #","title":"NotEnoughRightsOther"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsOther/#Tourmaline::Error::NotEnoughRightsOther","text":"","title":"NotEnoughRightsOther"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsToPinMessage/","text":"class Tourmaline::Error::NotEnoughRightsToPinMessage inherits Tourmaline::Error::BadRequest #","title":"NotEnoughRightsToPinMessage"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsToPinMessage/#Tourmaline::Error::NotEnoughRightsToPinMessage","text":"","title":"NotEnoughRightsToPinMessage"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsToRestrict/","text":"class Tourmaline::Error::NotEnoughRightsToRestrict inherits Tourmaline::Error::BadRequest #","title":"NotEnoughRightsToRestrict"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsToRestrict/#Tourmaline::Error::NotEnoughRightsToRestrict","text":"","title":"NotEnoughRightsToRestrict"},{"location":"api_reference/Tourmaline/Error/NotFound/","text":"class Tourmaline::Error::NotFound inherits Tourmaline::Error::BadRequest # Direct known subclasses Tourmaline::Error::MethodNotKnown","title":"NotFound"},{"location":"api_reference/Tourmaline/Error/NotFound/#Tourmaline::Error::NotFound","text":"","title":"NotFound"},{"location":"api_reference/Tourmaline/Error/ObjectExpectedAsReplyMarkup/","text":"class Tourmaline::Error::ObjectExpectedAsReplyMarkup inherits Tourmaline::Error::BadRequest #","title":"ObjectExpectedAsReplyMarkup"},{"location":"api_reference/Tourmaline/Error/ObjectExpectedAsReplyMarkup/#Tourmaline::Error::ObjectExpectedAsReplyMarkup","text":"","title":"ObjectExpectedAsReplyMarkup"},{"location":"api_reference/Tourmaline/Error/PaymentProviderInvalid/","text":"class Tourmaline::Error::PaymentProviderInvalid inherits Tourmaline::Error::BadRequest #","title":"PaymentProviderInvalid"},{"location":"api_reference/Tourmaline/Error/PaymentProviderInvalid/#Tourmaline::Error::PaymentProviderInvalid","text":"","title":"PaymentProviderInvalid"},{"location":"api_reference/Tourmaline/Error/PhotoAsInputFileRequired/","text":"class Tourmaline::Error::PhotoAsInputFileRequired inherits Tourmaline::Error::BadRequest #","title":"PhotoAsInputFileRequired"},{"location":"api_reference/Tourmaline/Error/PhotoAsInputFileRequired/#Tourmaline::Error::PhotoAsInputFileRequired","text":"","title":"PhotoAsInputFileRequired"},{"location":"api_reference/Tourmaline/Error/PhotoDimensions/","text":"class Tourmaline::Error::PhotoDimensions inherits Tourmaline::Error::BadRequest #","title":"PhotoDimensions"},{"location":"api_reference/Tourmaline/Error/PhotoDimensions/#Tourmaline::Error::PhotoDimensions","text":"","title":"PhotoDimensions"},{"location":"api_reference/Tourmaline/Error/PollCantBeStopped/","text":"class Tourmaline::Error::PollCantBeStopped inherits Tourmaline::Error::MessageError #","title":"PollCantBeStopped"},{"location":"api_reference/Tourmaline/Error/PollCantBeStopped/#Tourmaline::Error::PollCantBeStopped","text":"","title":"PollCantBeStopped"},{"location":"api_reference/Tourmaline/Error/PollCantHaveMoreOptions/","text":"class Tourmaline::Error::PollCantHaveMoreOptions inherits Tourmaline::Error::PollError #","title":"PollCantHaveMoreOptions"},{"location":"api_reference/Tourmaline/Error/PollCantHaveMoreOptions/#Tourmaline::Error::PollCantHaveMoreOptions","text":"","title":"PollCantHaveMoreOptions"},{"location":"api_reference/Tourmaline/Error/PollError/","text":"class Tourmaline::Error::PollError inherits Tourmaline::Error::BadRequest # Direct known subclasses Tourmaline::Error::PollCantHaveMoreOptions Tourmaline::Error::PollMustHaveMoreOptions Tourmaline::Error::PollOptionsMustBeNonEmpty Tourmaline::Error::PollQuestionMustBeNonEmpty Tourmaline::Error::PollSizeError Tourmaline::Error::PollsOptionsLengthTooLong","title":"PollError"},{"location":"api_reference/Tourmaline/Error/PollError/#Tourmaline::Error::PollError","text":"","title":"PollError"},{"location":"api_reference/Tourmaline/Error/PollHasAlreadyClosed/","text":"class Tourmaline::Error::PollHasAlreadyClosed inherits Tourmaline::Error::MessageError #","title":"PollHasAlreadyClosed"},{"location":"api_reference/Tourmaline/Error/PollHasAlreadyClosed/#Tourmaline::Error::PollHasAlreadyClosed","text":"","title":"PollHasAlreadyClosed"},{"location":"api_reference/Tourmaline/Error/PollMustHaveMoreOptions/","text":"class Tourmaline::Error::PollMustHaveMoreOptions inherits Tourmaline::Error::PollError #","title":"PollMustHaveMoreOptions"},{"location":"api_reference/Tourmaline/Error/PollMustHaveMoreOptions/#Tourmaline::Error::PollMustHaveMoreOptions","text":"","title":"PollMustHaveMoreOptions"},{"location":"api_reference/Tourmaline/Error/PollOptionsMustBeNonEmpty/","text":"class Tourmaline::Error::PollOptionsMustBeNonEmpty inherits Tourmaline::Error::PollError #","title":"PollOptionsMustBeNonEmpty"},{"location":"api_reference/Tourmaline/Error/PollOptionsMustBeNonEmpty/#Tourmaline::Error::PollOptionsMustBeNonEmpty","text":"","title":"PollOptionsMustBeNonEmpty"},{"location":"api_reference/Tourmaline/Error/PollQuestionMustBeNonEmpty/","text":"class Tourmaline::Error::PollQuestionMustBeNonEmpty inherits Tourmaline::Error::PollError #","title":"PollQuestionMustBeNonEmpty"},{"location":"api_reference/Tourmaline/Error/PollQuestionMustBeNonEmpty/#Tourmaline::Error::PollQuestionMustBeNonEmpty","text":"","title":"PollQuestionMustBeNonEmpty"},{"location":"api_reference/Tourmaline/Error/PollSizeError/","text":"class Tourmaline::Error::PollSizeError inherits Tourmaline::Error::PollError #","title":"PollSizeError"},{"location":"api_reference/Tourmaline/Error/PollSizeError/#Tourmaline::Error::PollSizeError","text":"","title":"PollSizeError"},{"location":"api_reference/Tourmaline/Error/PollsCantBeSentToPrivateChats/","text":"class Tourmaline::Error::PollsCantBeSentToPrivateChats inherits Tourmaline::Error::MessageError #","title":"PollsCantBeSentToPrivateChats"},{"location":"api_reference/Tourmaline/Error/PollsCantBeSentToPrivateChats/#Tourmaline::Error::PollsCantBeSentToPrivateChats","text":"","title":"PollsCantBeSentToPrivateChats"},{"location":"api_reference/Tourmaline/Error/PollsOptionsLengthTooLong/","text":"class Tourmaline::Error::PollsOptionsLengthTooLong inherits Tourmaline::Error::PollError #","title":"PollsOptionsLengthTooLong"},{"location":"api_reference/Tourmaline/Error/PollsOptionsLengthTooLong/#Tourmaline::Error::PollsOptionsLengthTooLong","text":"","title":"PollsOptionsLengthTooLong"},{"location":"api_reference/Tourmaline/Error/PoolRetryAttemptsExceeded/","text":"class Tourmaline::Error::PoolRetryAttemptsExceeded inherits DB::PoolRetryAttemptsExceeded #","title":"PoolRetryAttemptsExceeded"},{"location":"api_reference/Tourmaline/Error/PoolRetryAttemptsExceeded/#Tourmaline::Error::PoolRetryAttemptsExceeded","text":"","title":"PoolRetryAttemptsExceeded"},{"location":"api_reference/Tourmaline/Error/RequestTimeoutError/","text":"class Tourmaline::Error::RequestTimeoutError inherits Tourmaline::Error::BadRequest #","title":"RequestTimeoutError"},{"location":"api_reference/Tourmaline/Error/RequestTimeoutError/#Tourmaline::Error::RequestTimeoutError","text":"","title":"RequestTimeoutError"},{"location":"api_reference/Tourmaline/Error/ResultIdDuplicate/","text":"class Tourmaline::Error::ResultIdDuplicate inherits Tourmaline::Error::BadRequest #","title":"ResultIdDuplicate"},{"location":"api_reference/Tourmaline/Error/ResultIdDuplicate/#Tourmaline::Error::ResultIdDuplicate","text":"","title":"ResultIdDuplicate"},{"location":"api_reference/Tourmaline/Error/RetryAfter/","text":"class Tourmaline::Error::RetryAfter inherits Tourmaline::Error # Constructors # .new ( seconds ) # View source Methods # #seconds : Int32 # View source","title":"RetryAfter"},{"location":"api_reference/Tourmaline/Error/RetryAfter/#Tourmaline::Error::RetryAfter","text":"","title":"RetryAfter"},{"location":"api_reference/Tourmaline/Error/RetryAfter/#Tourmaline::Error::RetryAfter-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Error/RetryAfter/#Tourmaline::Error::RetryAfter.new(seconds)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Error/RetryAfter/#Tourmaline::Error::RetryAfter-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Error/RetryAfter/#Tourmaline::Error::RetryAfter#seconds","text":"View source","title":"#seconds"},{"location":"api_reference/Tourmaline/Error/StartParamInvalid/","text":"class Tourmaline::Error::StartParamInvalid inherits Tourmaline::Error::BadRequest #","title":"StartParamInvalid"},{"location":"api_reference/Tourmaline/Error/StartParamInvalid/#Tourmaline::Error::StartParamInvalid","text":"","title":"StartParamInvalid"},{"location":"api_reference/Tourmaline/Error/TerminatedByOtherGetUpdates/","text":"class Tourmaline::Error::TerminatedByOtherGetUpdates inherits Tourmaline::Error::ConflictError #","title":"TerminatedByOtherGetUpdates"},{"location":"api_reference/Tourmaline/Error/TerminatedByOtherGetUpdates/#Tourmaline::Error::TerminatedByOtherGetUpdates","text":"","title":"TerminatedByOtherGetUpdates"},{"location":"api_reference/Tourmaline/Error/Throttled/","text":"class Tourmaline::Error::Throttled inherits Tourmaline::Error #","title":"Throttled"},{"location":"api_reference/Tourmaline/Error/Throttled/#Tourmaline::Error::Throttled","text":"","title":"Throttled"},{"location":"api_reference/Tourmaline/Error/TooMuchMessages/","text":"class Tourmaline::Error::TooMuchMessages inherits Tourmaline::Error::MessageError #","title":"TooMuchMessages"},{"location":"api_reference/Tourmaline/Error/TooMuchMessages/#Tourmaline::Error::TooMuchMessages","text":"","title":"TooMuchMessages"},{"location":"api_reference/Tourmaline/Error/TypeOfFileMismatch/","text":"class Tourmaline::Error::TypeOfFileMismatch inherits Tourmaline::Error::BadRequest #","title":"TypeOfFileMismatch"},{"location":"api_reference/Tourmaline/Error/TypeOfFileMismatch/#Tourmaline::Error::TypeOfFileMismatch","text":"","title":"TypeOfFileMismatch"},{"location":"api_reference/Tourmaline/Error/URLHostIsEmpty/","text":"class Tourmaline::Error::URLHostIsEmpty inherits Tourmaline::Error::BadRequest #","title":"URLHostIsEmpty"},{"location":"api_reference/Tourmaline/Error/URLHostIsEmpty/#Tourmaline::Error::URLHostIsEmpty","text":"","title":"URLHostIsEmpty"},{"location":"api_reference/Tourmaline/Error/Unauthorized/","text":"class Tourmaline::Error::Unauthorized inherits Tourmaline::Error # Direct known subclasses Tourmaline::Error::BotBlocked Tourmaline::Error::BotKicked Tourmaline::Error::CantInitiateConversation Tourmaline::Error::CantTalkWithBots Tourmaline::Error::UserDeactivated","title":"Unauthorized"},{"location":"api_reference/Tourmaline/Error/Unauthorized/#Tourmaline::Error::Unauthorized","text":"","title":"Unauthorized"},{"location":"api_reference/Tourmaline/Error/UnavailableMembers/","text":"class Tourmaline::Error::UnavailableMembers inherits Tourmaline::Error::BadRequest #","title":"UnavailableMembers"},{"location":"api_reference/Tourmaline/Error/UnavailableMembers/#Tourmaline::Error::UnavailableMembers","text":"","title":"UnavailableMembers"},{"location":"api_reference/Tourmaline/Error/UnsupportedUrlProtocol/","text":"class Tourmaline::Error::UnsupportedUrlProtocol inherits Tourmaline::Error::BadRequest #","title":"UnsupportedUrlProtocol"},{"location":"api_reference/Tourmaline/Error/UnsupportedUrlProtocol/#Tourmaline::Error::UnsupportedUrlProtocol","text":"","title":"UnsupportedUrlProtocol"},{"location":"api_reference/Tourmaline/Error/UserDeactivated/","text":"class Tourmaline::Error::UserDeactivated inherits Tourmaline::Error::Unauthorized #","title":"UserDeactivated"},{"location":"api_reference/Tourmaline/Error/UserDeactivated/#Tourmaline::Error::UserDeactivated","text":"","title":"UserDeactivated"},{"location":"api_reference/Tourmaline/Error/UserNotFound/","text":"class Tourmaline::Error::UserNotFound inherits Tourmaline::Error::BadRequest #","title":"UserNotFound"},{"location":"api_reference/Tourmaline/Error/UserNotFound/#Tourmaline::Error::UserNotFound","text":"","title":"UserNotFound"},{"location":"api_reference/Tourmaline/Error/ValidationError/","text":"class Tourmaline::Error::ValidationError inherits Tourmaline::Error #","title":"ValidationError"},{"location":"api_reference/Tourmaline/Error/ValidationError/#Tourmaline::Error::ValidationError","text":"","title":"ValidationError"},{"location":"api_reference/Tourmaline/Error/WebhookRequireHTTPS/","text":"class Tourmaline::Error::WebhookRequireHTTPS inherits Tourmaline::Error::BadWebhook #","title":"WebhookRequireHTTPS"},{"location":"api_reference/Tourmaline/Error/WebhookRequireHTTPS/#Tourmaline::Error::WebhookRequireHTTPS","text":"","title":"WebhookRequireHTTPS"},{"location":"api_reference/Tourmaline/Error/WrongFileIdentifier/","text":"class Tourmaline::Error::WrongFileIdentifier inherits Tourmaline::Error::BadRequest #","title":"WrongFileIdentifier"},{"location":"api_reference/Tourmaline/Error/WrongFileIdentifier/#Tourmaline::Error::WrongFileIdentifier","text":"","title":"WrongFileIdentifier"},{"location":"api_reference/Tourmaline/Error/WrongLiveLocationPeriod/","text":"class Tourmaline::Error::WrongLiveLocationPeriod inherits Tourmaline::Error::BadRequest #","title":"WrongLiveLocationPeriod"},{"location":"api_reference/Tourmaline/Error/WrongLiveLocationPeriod/#Tourmaline::Error::WrongLiveLocationPeriod","text":"","title":"WrongLiveLocationPeriod"},{"location":"api_reference/Tourmaline/Error/WrongRemoteFileIdSpecified/","text":"class Tourmaline::Error::WrongRemoteFileIdSpecified inherits Tourmaline::Error::BadRequest #","title":"WrongRemoteFileIdSpecified"},{"location":"api_reference/Tourmaline/Error/WrongRemoteFileIdSpecified/#Tourmaline::Error::WrongRemoteFileIdSpecified","text":"","title":"WrongRemoteFileIdSpecified"},{"location":"api_reference/Tourmaline/EventHandler/","text":"abstract class Tourmaline::EventHandler inherits Reference # Direct known subclasses Tourmaline::CallbackQueryHandler Tourmaline::CommandHandler Tourmaline::HearsHandler Tourmaline::InlineQueryHandler Methods # abstract #actions : Array ( UpdateAction ) # View source abstract #call ( ctx : Tourmaline::Context ) # View source","title":"EventHandler"},{"location":"api_reference/Tourmaline/EventHandler/#Tourmaline::EventHandler","text":"","title":"EventHandler"},{"location":"api_reference/Tourmaline/EventHandler/#Tourmaline::EventHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/EventHandler/#Tourmaline::EventHandler#actions","text":"View source","title":"#actions"},{"location":"api_reference/Tourmaline/EventHandler/#Tourmaline::EventHandler#call(ctx)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/EventHandlerProc/","text":"alias Tourmaline::EventHandlerProc # Alias definition Tourmaline::Context -> Nil","title":"EventHandlerProc"},{"location":"api_reference/Tourmaline/EventHandlerProc/#Tourmaline::EventHandlerProc","text":"","title":"EventHandlerProc"},{"location":"api_reference/Tourmaline/EventHandlerType/","text":"alias Tourmaline::EventHandlerType # Alias definition Tourmaline::Context -> Nil | Tourmaline::EventHandler","title":"EventHandlerType"},{"location":"api_reference/Tourmaline/EventHandlerType/#Tourmaline::EventHandlerType","text":"","title":"EventHandlerType"},{"location":"api_reference/Tourmaline/ForceReply/","text":"class Tourmaline::ForceReply inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( selective : Bool , force_reply : Bool = true ) # View source Methods # #force_reply : Bool # View source #input_field_placeholder : String? # View source #selective : Bool # View source","title":"ForceReply"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply","text":"","title":"ForceReply"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply#force_reply","text":"View source","title":"#force_reply"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply#input_field_placeholder","text":"View source","title":"#input_field_placeholder"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply#selective","text":"View source","title":"#selective"},{"location":"api_reference/Tourmaline/ForumTopicClosed/","text":"class Tourmaline::ForumTopicClosed inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source","title":"ForumTopicClosed"},{"location":"api_reference/Tourmaline/ForumTopicClosed/#Tourmaline::ForumTopicClosed","text":"","title":"ForumTopicClosed"},{"location":"api_reference/Tourmaline/ForumTopicClosed/#Tourmaline::ForumTopicClosed-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ForumTopicClosed/#Tourmaline::ForumTopicClosed.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ForumTopicCreated/","text":"class Tourmaline::ForumTopicCreated inherits Reference # Included modules JSON::Serializable Constructors # .new ( name : String , icon_color : Int32 , icon_custom_emoji : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #icon_color : Int32 # View source #icon_custom_emoji : String? # View source #name : String # View source","title":"ForumTopicCreated"},{"location":"api_reference/Tourmaline/ForumTopicCreated/#Tourmaline::ForumTopicCreated","text":"","title":"ForumTopicCreated"},{"location":"api_reference/Tourmaline/ForumTopicCreated/#Tourmaline::ForumTopicCreated-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ForumTopicCreated/#Tourmaline::ForumTopicCreated.new(name,icon_color,icon_custom_emoji)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ForumTopicCreated/#Tourmaline::ForumTopicCreated-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ForumTopicCreated/#Tourmaline::ForumTopicCreated#icon_color","text":"View source","title":"#icon_color"},{"location":"api_reference/Tourmaline/ForumTopicCreated/#Tourmaline::ForumTopicCreated#icon_custom_emoji","text":"View source","title":"#icon_custom_emoji"},{"location":"api_reference/Tourmaline/ForumTopicCreated/#Tourmaline::ForumTopicCreated#name","text":"View source","title":"#name"},{"location":"api_reference/Tourmaline/ForumTopicReopened/","text":"class Tourmaline::ForumTopicReopened inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source","title":"ForumTopicReopened"},{"location":"api_reference/Tourmaline/ForumTopicReopened/#Tourmaline::ForumTopicReopened","text":"","title":"ForumTopicReopened"},{"location":"api_reference/Tourmaline/ForumTopicReopened/#Tourmaline::ForumTopicReopened-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ForumTopicReopened/#Tourmaline::ForumTopicReopened.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Game/","text":"class Tourmaline::Game inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #animation : Animation? # View source #description : String # View source #photo : Array ( PhotoSize ) # View source #text : String? # View source #text_entities : Array ( MessageEntity )? # View source #title : String # View source","title":"Game"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game","text":"","title":"Game"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#animation","text":"View source","title":"#animation"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#photo","text":"View source","title":"#photo"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#text","text":"View source","title":"#text"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#text_entities","text":"View source","title":"#text_entities"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/GameHighScore/","text":"class Tourmaline::GameHighScore inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #position : Int32 # View source #score : Int32 # View source #user : User # View source","title":"GameHighScore"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore","text":"","title":"GameHighScore"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore#position","text":"View source","title":"#position"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore#score","text":"View source","title":"#score"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore#user","text":"View source","title":"#user"},{"location":"api_reference/Tourmaline/HearsHandler/","text":"class Tourmaline::HearsHandler inherits Tourmaline::EventHandler # Constructors # .new ( pattern : String | Regex , proc : EventHandlerProc ) # View source .new ( pattern : String | Regex , & block : EventHandlerProc ) # View source Methods # #actions : Array ( UpdateAction ) # View source #call ( ctx : Context ) # View source #pattern : Regex # View source","title":"HearsHandler"},{"location":"api_reference/Tourmaline/HearsHandler/#Tourmaline::HearsHandler","text":"","title":"HearsHandler"},{"location":"api_reference/Tourmaline/HearsHandler/#Tourmaline::HearsHandler-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/HearsHandler/#Tourmaline::HearsHandler.new(pattern,proc)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/HearsHandler/#Tourmaline::HearsHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/HearsHandler/#Tourmaline::HearsHandler#actions","text":"View source","title":"#actions"},{"location":"api_reference/Tourmaline/HearsHandler/#Tourmaline::HearsHandler#call(ctx)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/HearsHandler/#Tourmaline::HearsHandler#pattern","text":"View source","title":"#pattern"},{"location":"api_reference/Tourmaline/Helpers/","text":"module Tourmaline::Helpers # Extended modules Tourmaline::Helpers Constants # DEFAULT_EXTENSIONS = { audio : \"mp3\" , photo : \"jpg\" , sticker : \"webp\" , video : \"mp4\" , animation : \"mp4\" , video_note : \"mp4\" , voice : \"ogg\" } # Methods # #escape_html ( text ) # Escape the given html for use in a Telegram message. View source #escape_md ( text , version = 1 ) # Escape the given markdown for use in a Telegram message. View source #labeled_prices ( lp : Array ( NamedTuple ())) # Convenience method to create and Array of LabledPrice from an Array of NamedTuple(label: String, amount: Int32) . TODO: Replace with a builder of some kind View source #pad_utf16 ( text ) # Pad the given text with spaces to make it a multiple of 4 bytes. View source #random_string ( length , characters = nil ) # Return a random string of the given length. If characters is not given, it will default to 0..9, a..z, A..Z. View source #shipping_options ( options : Array ( NamedTuple ())) # Convenience method to create an Array of ShippingOption from a NamedTuple(id: String, title: String, prices: Array(LabeledPrice)) . TODO: Replace with a builder of some kind View source #unpad_utf16 ( text ) # Unpad the given text by removing spaces that were added to make it a multiple of 4 bytes. View source","title":"Helpers"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers","text":"","title":"Helpers"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers::DEFAULT_EXTENSIONS","text":"","title":"DEFAULT_EXTENSIONS"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#escape_html(text)","text":"Escape the given html for use in a Telegram message. View source","title":"#escape_html"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#escape_md(text,version)","text":"Escape the given markdown for use in a Telegram message. View source","title":"#escape_md"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#labeled_prices(lp)","text":"Convenience method to create and Array of LabledPrice from an Array of NamedTuple(label: String, amount: Int32) . TODO: Replace with a builder of some kind View source","title":"#labeled_prices"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#pad_utf16(text)","text":"Pad the given text with spaces to make it a multiple of 4 bytes. View source","title":"#pad_utf16"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#random_string(length,characters)","text":"Return a random string of the given length. If characters is not given, it will default to 0..9, a..z, A..Z. View source","title":"#random_string"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#shipping_options(options)","text":"Convenience method to create an Array of ShippingOption from a NamedTuple(id: String, title: String, prices: Array(LabeledPrice)) . TODO: Replace with a builder of some kind View source","title":"#shipping_options"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#unpad_utf16(text)","text":"Unpad the given text by removing spaces that were added to make it a multiple of 4 bytes. View source","title":"#unpad_utf16"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/","text":"class Tourmaline::InlineKeyboardButton inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( text : String , url : String? = nil , login_url : LoginURL? = nil , callback_data : String? = nil , web_app = nil , switch_inline_query : String? = nil , switch_inline_query_current_chat : String? = nil , callback_game : CallbackGame? = nil , pay : Bool? = nil ) # View source Methods # #callback_data : String? # View source #callback_data= ( callback_data : String? ) # View source #callback_game : CallbackGame? # View source #callback_game= ( callback_game : CallbackGame? ) # View source #login_url : LoginURL? # View source #login_url= ( login_url : LoginURL? ) # View source #pay : Bool? # View source #pay= ( pay : Bool? ) # View source #switch_inline_query : String? # View source #switch_inline_query= ( switch_inline_query : String? ) # View source #switch_inline_query_current_chat : String? # View source #switch_inline_query_current_chat= ( switch_inline_query_current_chat : String? ) # View source #text : String # View source #text= ( text : String ) # View source #url : String? # View source #url= ( url : String? ) # View source #web_app : WebAppInfo? # View source #web_app= ( web_app : WebAppInfo? ) # View source","title":"InlineKeyboardButton"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton","text":"","title":"InlineKeyboardButton"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#callback_data","text":"View source","title":"#callback_data"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#callback_data=(callback_data)","text":"View source","title":"#callback_data="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#callback_game","text":"View source","title":"#callback_game"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#callback_game=(callback_game)","text":"View source","title":"#callback_game="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#login_url","text":"View source","title":"#login_url"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#login_url=(login_url)","text":"View source","title":"#login_url="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#pay","text":"View source","title":"#pay"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#pay=(pay)","text":"View source","title":"#pay="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#switch_inline_query","text":"View source","title":"#switch_inline_query"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#switch_inline_query=(switch_inline_query)","text":"View source","title":"#switch_inline_query="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#switch_inline_query_current_chat","text":"View source","title":"#switch_inline_query_current_chat"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#switch_inline_query_current_chat=(switch_inline_query_current_chat)","text":"View source","title":"#switch_inline_query_current_chat="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#text","text":"View source","title":"#text"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#text=(text)","text":"View source","title":"#text="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#url","text":"View source","title":"#url"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#url=(url)","text":"View source","title":"#url="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#web_app","text":"View source","title":"#web_app"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#web_app=(web_app)","text":"View source","title":"#web_app="},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/","text":"class Tourmaline::InlineKeyboardMarkup inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( inline_keyboard = [] of Array ( InlineKeyboardButton )) # View source .new ( * lines : Array ( InlineKeyboardButton )) # View source Class methods # .build ( * args , columns = nil # View source Methods # #<< ( row , btn : InlineKeyboardButton ) # View source #<< ( btns : Array ( InlineKeyboardButton )) # View source #inline_keyboard : Array ( Array ( InlineKeyboardButton )) # View source #inline_keyboard= ( inline_keyboard : Array ( Array ( InlineKeyboardButton ))) # View source","title":"InlineKeyboardMarkup"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup","text":"","title":"InlineKeyboardMarkup"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup.build(*,columns,**,&)","text":"View source","title":".build"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup#<<(row,btn)","text":"View source","title":"#&lt;&lt;"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup#inline_keyboard","text":"View source","title":"#inline_keyboard"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup#inline_keyboard=(inline_keyboard)","text":"View source","title":"#inline_keyboard="},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/","text":"class Tourmaline::InlineKeyboardMarkup::Builder inherits Tourmaline::KeyboardBuilder # Constructors # .new ( force_reply = false , remove_keyboard = false , selective = false , keyboard = [] of T , resize = false , one_time = false , input_field_placeholder = nil ) # View source Methods # #callback_button ( text , data ) # View source #game_button ( text ) # View source #keyboard ( columns = nil ) : G # View source #login_button ( text , url , * args , ** opts ) # View source #pay_button ( text ) # View source #switch_to_chat_button ( text , value ) # View source #switch_to_current_chat_button ( text , value ) # View source #url_button ( text , url ) # View source #web_app_button ( app : String | WebAppInfo ) # View source","title":"Builder"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder","text":"","title":"Builder"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder.new(force_reply,remove_keyboard,selective,keyboard,resize,one_time,input_field_placeholder)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder#callback_button(text,data)","text":"View source","title":"#callback_button"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder#game_button(text)","text":"View source","title":"#game_button"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder#keyboard(columns)","text":"View source","title":"#keyboard"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder#login_button(text,url,*,**)","text":"View source","title":"#login_button"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder#pay_button(text)","text":"View source","title":"#pay_button"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder#switch_to_chat_button(text,value)","text":"View source","title":"#switch_to_chat_button"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder#switch_to_current_chat_button(text,value)","text":"View source","title":"#switch_to_current_chat_button"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder#url_button(text,url)","text":"View source","title":"#url_button"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/Builder/#Tourmaline::InlineKeyboardMarkup::Builder#web_app_button(app)","text":"View source","title":"#web_app_button"},{"location":"api_reference/Tourmaline/InlineQuery/","text":"class Tourmaline::InlineQuery inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #chat_type : String? # View source #from : User # View source #id : String # View source #location : Location? # View source #offset : String # View source #query : String # View source","title":"InlineQuery"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery","text":"","title":"InlineQuery"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#chat_type","text":"View source","title":"#chat_type"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#from","text":"View source","title":"#from"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#location","text":"View source","title":"#location"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#offset","text":"View source","title":"#offset"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#query","text":"View source","title":"#query"},{"location":"api_reference/Tourmaline/InlineQueryHandler/","text":"class Tourmaline::InlineQueryHandler inherits Tourmaline::EventHandler # Constructors # .new ( pattern : String | Regex , proc : EventHandlerProc ) # View source .new ( pattern : String | Regex , & block : EventHandlerProc ) # View source Methods # #actions : Array ( UpdateAction ) # View source #call ( ctx : Context ) # View source #pattern : Regex # View source","title":"InlineQueryHandler"},{"location":"api_reference/Tourmaline/InlineQueryHandler/#Tourmaline::InlineQueryHandler","text":"","title":"InlineQueryHandler"},{"location":"api_reference/Tourmaline/InlineQueryHandler/#Tourmaline::InlineQueryHandler-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryHandler/#Tourmaline::InlineQueryHandler.new(pattern,proc)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryHandler/#Tourmaline::InlineQueryHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryHandler/#Tourmaline::InlineQueryHandler#actions","text":"View source","title":"#actions"},{"location":"api_reference/Tourmaline/InlineQueryHandler/#Tourmaline::InlineQueryHandler#call(ctx)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/InlineQueryHandler/#Tourmaline::InlineQueryHandler#pattern","text":"View source","title":"#pattern"},{"location":"api_reference/Tourmaline/InlineQueryResult/","text":"abstract class Tourmaline::InlineQueryResult inherits Reference # Included modules JSON::Serializable Direct known subclasses Tourmaline::InlineQueryResultArticle Tourmaline::InlineQueryResultAudio Tourmaline::InlineQueryResultCachedAudio Tourmaline::InlineQueryResultCachedDocument Tourmaline::InlineQueryResultCachedGif Tourmaline::InlineQueryResultCachedMpeg4Gif Tourmaline::InlineQueryResultCachedPhoto Tourmaline::InlineQueryResultCachedSticker Tourmaline::InlineQueryResultCachedVideo Tourmaline::InlineQueryResultCachedVoice Tourmaline::InlineQueryResultContact Tourmaline::InlineQueryResultDocument Tourmaline::InlineQueryResultGame Tourmaline::InlineQueryResultGif Tourmaline::InlineQueryResultLocation Tourmaline::InlineQueryResultMpeg4Gif Tourmaline::InlineQueryResultPhoto Tourmaline::InlineQueryResultVenue Tourmaline::InlineQueryResultVideo Tourmaline::InlineQueryResultVoice Constructors # .new ( pull : JSON :: PullParser ) # View source Class methods # .build # View source","title":"InlineQueryResult"},{"location":"api_reference/Tourmaline/InlineQueryResult/#Tourmaline::InlineQueryResult","text":"","title":"InlineQueryResult"},{"location":"api_reference/Tourmaline/InlineQueryResult/#Tourmaline::InlineQueryResult-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResult/#Tourmaline::InlineQueryResult.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResult/#Tourmaline::InlineQueryResult-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/InlineQueryResult/#Tourmaline::InlineQueryResult.build(&)","text":"View source","title":".build"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/","text":"class Tourmaline::InlineQueryResult::Builder inherits Reference # Constructors # .new # View source Methods # #article ( * args , ** opts ) # View source #audio ( * args , ** opts ) # View source #cached_audio ( * args , ** opts ) # View source #cached_document ( * args , ** opts ) # View source #cached_gif ( * args , ** opts ) # View source #cached_mpeg4_gif ( * args , ** opts ) # View source #cached_photo ( * args , ** opts ) # View source #cached_sticker ( * args , ** opts ) # View source #cached_video ( * args , ** opts ) # View source #cached_voice ( * args , ** opts ) # View source #contact ( * args , ** opts ) # View source #document ( * args , ** opts ) # View source #game ( * args , ** opts ) # View source #gif ( * args , ** opts ) # View source #location ( * args , ** opts ) # View source #mpeg4_gif ( * args , ** opts ) # View source #photo ( * args , ** opts ) # View source #results : Array ( Tourmaline::InlineQueryResult ) # View source #venue ( * args , ** opts ) # View source #video ( * args , ** opts ) # View source","title":"Builder"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder","text":"","title":"Builder"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder.new","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#article(*,**)","text":"View source","title":"#article"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#audio(*,**)","text":"View source","title":"#audio"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#cached_audio(*,**)","text":"View source","title":"#cached_audio"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#cached_document(*,**)","text":"View source","title":"#cached_document"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#cached_gif(*,**)","text":"View source","title":"#cached_gif"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#cached_mpeg4_gif(*,**)","text":"View source","title":"#cached_mpeg4_gif"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#cached_photo(*,**)","text":"View source","title":"#cached_photo"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#cached_sticker(*,**)","text":"View source","title":"#cached_sticker"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#cached_video(*,**)","text":"View source","title":"#cached_video"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#cached_voice(*,**)","text":"View source","title":"#cached_voice"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#contact(*,**)","text":"View source","title":"#contact"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#document(*,**)","text":"View source","title":"#document"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#game(*,**)","text":"View source","title":"#game"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#gif(*,**)","text":"View source","title":"#gif"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#location(*,**)","text":"View source","title":"#location"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#mpeg4_gif(*,**)","text":"View source","title":"#mpeg4_gif"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#photo(*,**)","text":"View source","title":"#photo"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#results","text":"View source","title":"#results"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#venue(*,**)","text":"View source","title":"#venue"},{"location":"api_reference/Tourmaline/InlineQueryResult/Builder/#Tourmaline::InlineQueryResult::Builder#video(*,**)","text":"View source","title":"#video"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/","text":"class Tourmaline::InlineQueryResultArticle inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , title , input_message_content , reply_markup = nil , url = nil , hide_url = nil , description = nil , thumbnail_url = nil , thumbnail_width = nil , thumbnail_height = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #description : String? # View source #hide_url : Bool? # View source #id : String # View source #input_message_content : InputMessageContent # View source #reply_markup : InlineKeyboardMarkup? # View source #thumbnail_height : Int32? # View source #thumbnail_url : String? # View source #thumbnail_width : Int32? # View source #title : String # View source #type : String # View source #url : String? # View source","title":"InlineQueryResultArticle"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle","text":"","title":"InlineQueryResultArticle"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle.new(id,title,input_message_content,reply_markup,url,hide_url,description,thumbnail_url,thumbnail_width,thumbnail_height)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#hide_url","text":"View source","title":"#hide_url"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#thumbnail_height","text":"View source","title":"#thumbnail_height"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#thumbnail_url","text":"View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#thumbnail_width","text":"View source","title":"#thumbnail_width"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#url","text":"View source","title":"#url"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/","text":"class Tourmaline::InlineQueryResultAudio inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , audio_url , title , performer = nil , audio_duration = nil , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #audio_duration : Int32? # View source #audio_url : String # View source #id : String # View source #input_message_content : InputMessageContent? # View source #performer : String? # View source #reply_markup : InlineKeyboardMarkup? # View source #title : String # View source #type : String # View source","title":"InlineQueryResultAudio"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio","text":"","title":"InlineQueryResultAudio"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio.new(id,audio_url,title,performer,audio_duration,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#audio_duration","text":"View source","title":"#audio_duration"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#audio_url","text":"View source","title":"#audio_url"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#performer","text":"View source","title":"#performer"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/","text":"class Tourmaline::InlineQueryResultCachedAudio inherits Tourmaline::InlineQueryResult # Constructors # .new ( id : String , audio_file_id , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #audio_file_id : String # View source #id : String # View source #input_message_content : InputMessageContent? # View source #reply_markup : InlineKeyboardMarkup? # View source #type : String # View source","title":"InlineQueryResultCachedAudio"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio","text":"","title":"InlineQueryResultCachedAudio"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio.new(id,audio_file_id,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#audio_file_id","text":"View source","title":"#audio_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/","text":"class Tourmaline::InlineQueryResultCachedDocument inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , title , document_file_id , description = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #description : String? # View source #description= ( description : String? ) # View source #document_file_id : String # View source #document_file_id= ( document_file_id : String ) # View source #id : String # View source #id= ( id : String ) # View source #input_message_content : InputMessageContent? # View source #input_message_content= ( input_message_content : InputMessageContent? ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #reply_markup= ( reply_markup : InlineKeyboardMarkup? ) # View source #title : String # View source #title= ( title : String ) # View source #type : String # View source #type= ( type : String ) # View source","title":"InlineQueryResultCachedDocument"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument","text":"","title":"InlineQueryResultCachedDocument"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument.new(id,title,document_file_id,description,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#description=(description)","text":"View source","title":"#description="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#document_file_id","text":"View source","title":"#document_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#document_file_id=(document_file_id)","text":"View source","title":"#document_file_id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#id=(id)","text":"View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#input_message_content=(input_message_content)","text":"View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#reply_markup=(reply_markup)","text":"View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#title=(title)","text":"View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#type=(type)","text":"View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/","text":"class Tourmaline::InlineQueryResultCachedGif inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , gif_file_id , title = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #gif_file_id : String # View source #id : String # View source #input_message_content : InputMessageContent? # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #title : String? # View source #type : String # View source","title":"InlineQueryResultCachedGif"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif","text":"","title":"InlineQueryResultCachedGif"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif.new(id,gif_file_id,title,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#gif_file_id","text":"View source","title":"#gif_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/","text":"class Tourmaline::InlineQueryResultCachedMpeg4Gif inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , mpeg4_file_id , title = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #id : String # View source #input_message_content : InputMessageContent? # View source #mpeg4_file_id : String # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #title : String? # View source #type : String # View source","title":"InlineQueryResultCachedMpeg4Gif"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif","text":"","title":"InlineQueryResultCachedMpeg4Gif"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif.new(id,mpeg4_file_id,title,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#mpeg4_file_id","text":"View source","title":"#mpeg4_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/","text":"class Tourmaline::InlineQueryResultCachedPhoto inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , photo_file_id , title = nil , description = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #description : String? # View source #id : String # View source #input_message_content : InputMessageContent? # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #photo_file_id : String # View source #reply_markup : InlineKeyboardMarkup? # View source #title : String? # View source #type : String # View source","title":"InlineQueryResultCachedPhoto"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto","text":"","title":"InlineQueryResultCachedPhoto"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto.new(id,photo_file_id,title,description,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#photo_file_id","text":"View source","title":"#photo_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/","text":"class Tourmaline::InlineQueryResultCachedSticker inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , sticker_file_id , reply_markup , input_message_content ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #id : String # View source #input_message_content : InputMessageContent # View source #reply_markup : InlineKeyboardMarkup # View source #sticker_file_id : String # View source #type : String # View source","title":"InlineQueryResultCachedSticker"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker","text":"","title":"InlineQueryResultCachedSticker"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker.new(id,sticker_file_id,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#sticker_file_id","text":"View source","title":"#sticker_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/","text":"class Tourmaline::InlineQueryResultCachedVideo inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , video_file_id , title , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , description = nil , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #description : String? # View source #id : String # View source #input_message_content : InputMessageContent? # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #title : String # View source #type : String # View source #video_file_id : String # View source","title":"InlineQueryResultCachedVideo"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo","text":"","title":"InlineQueryResultCachedVideo"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo.new(id,video_file_id,title,caption,parse_mode,caption_entities,description,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#video_file_id","text":"View source","title":"#video_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/","text":"class Tourmaline::InlineQueryResultCachedVoice inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , voice_file_id , title , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #id : String # View source #input_message_content : InputMessageContent? # View source #reply_markup : InlineKeyboardMarkup? # View source #title : String # View source #type : String # View source #voice_file_id : String # View source","title":"InlineQueryResultCachedVoice"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice","text":"","title":"InlineQueryResultCachedVoice"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice.new(id,voice_file_id,title,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#voice_file_id","text":"View source","title":"#voice_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/","text":"class Tourmaline::InlineQueryResultContact inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , phone_number , first_name , last_name = nil , user_id = nil , reply_markup = nil , input_message_content = nil , thumbnail_url = nil , thumbnail_width = nil , thumbnail_height = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #first_name : String # View source #id : String # View source #input_message_content : InputMessageContent? # View source #last_name : String? # View source #phone_number : String # View source #reply_markup : InlineKeyboardMarkup? # View source #thumbnail_height : Int32? # View source #thumbnail_url : String? # View source #thumbnail_width : Int32? # View source #type : String # View source #user_id : Int32? # View source","title":"InlineQueryResultContact"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact","text":"","title":"InlineQueryResultContact"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact.new(id,phone_number,first_name,last_name,user_id,reply_markup,input_message_content,thumbnail_url,thumbnail_width,thumbnail_height)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#first_name","text":"View source","title":"#first_name"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#last_name","text":"View source","title":"#last_name"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#phone_number","text":"View source","title":"#phone_number"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#thumbnail_height","text":"View source","title":"#thumbnail_height"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#thumbnail_url","text":"View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#thumbnail_width","text":"View source","title":"#thumbnail_width"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#user_id","text":"View source","title":"#user_id"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/","text":"class Tourmaline::InlineQueryResultDocument inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , title , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , document_url = nil , mime_type = nil , description = nil , reply_markup = nil , input_message_content = nil , thumbnail_url = nil , thumbnail_width = nil , thumbnail_height = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #description : String? # View source #document_url : String # View source #id : String # View source #input_message_content : InputMessageContent? # View source #mime_type : String # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #thumbnail_height : Int32? # View source #thumbnail_url : String # View source #thumbnail_width : Int32? # View source #title : String # View source #type : String # View source","title":"InlineQueryResultDocument"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument","text":"","title":"InlineQueryResultDocument"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument.new(id,title,caption,parse_mode,caption_entities,document_url,mime_type,description,reply_markup,input_message_content,thumbnail_url,thumbnail_width,thumbnail_height)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#document_url","text":"View source","title":"#document_url"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#mime_type","text":"View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#thumbnail_height","text":"View source","title":"#thumbnail_height"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#thumbnail_url","text":"View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#thumbnail_width","text":"View source","title":"#thumbnail_width"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/","text":"class Tourmaline::InlineQueryResultGame inherits Tourmaline::InlineQueryResult # Constructors # .new ( id : String , game_short_name , reply_markup = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #game_short_name : String # View source #id : String # View source #reply_markup : InlineKeyboardMarkup? # View source #type : String # View source","title":"InlineQueryResultGame"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame","text":"","title":"InlineQueryResultGame"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame.new(id,game_short_name,reply_markup)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame#game_short_name","text":"View source","title":"#game_short_name"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/","text":"class Tourmaline::InlineQueryResultGif inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , gif_url , gif_width = nil , gif_height = nil , gif_duration = nil , thumbnail_url = nil , thumbnail_mime_type = nil , title = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #gif_duration : Int32? # View source #gif_duration= ( gif_duration : Int32? ) # View source #gif_height : Int32? # View source #gif_height= ( gif_height : Int32? ) # View source #gif_url : String # View source #gif_url= ( gif_url : String ) # View source #gif_width : Int32? # View source #gif_width= ( gif_width : Int32? ) # View source #id : String # View source #id= ( id : String ) # View source #input_message_content : InputMessageContent? # View source #input_message_content= ( input_message_content : InputMessageContent? ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #reply_markup= ( reply_markup : InlineKeyboardMarkup? ) # View source #thumbnail_mime_type : String? # View source #thumbnail_mime_type= ( thumbnail_mime_type : String? ) # View source #thumbnail_url : String # View source #thumbnail_url= ( thumbnail_url : String ) # View source #title : String? # View source #title= ( title : String? ) # View source #type : String # View source #type= ( type : String ) # View source","title":"InlineQueryResultGif"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif","text":"","title":"InlineQueryResultGif"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif.new(id,gif_url,gif_width,gif_height,gif_duration,thumbnail_url,thumbnail_mime_type,title,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_duration","text":"View source","title":"#gif_duration"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_duration=(gif_duration)","text":"View source","title":"#gif_duration="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_height","text":"View source","title":"#gif_height"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_height=(gif_height)","text":"View source","title":"#gif_height="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_url","text":"View source","title":"#gif_url"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_url=(gif_url)","text":"View source","title":"#gif_url="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_width","text":"View source","title":"#gif_width"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_width=(gif_width)","text":"View source","title":"#gif_width="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#id=(id)","text":"View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#input_message_content=(input_message_content)","text":"View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#reply_markup=(reply_markup)","text":"View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#thumbnail_mime_type","text":"View source","title":"#thumbnail_mime_type"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#thumbnail_mime_type=(thumbnail_mime_type)","text":"View source","title":"#thumbnail_mime_type="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#thumbnail_url","text":"View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#thumbnail_url=(thumbnail_url)","text":"View source","title":"#thumbnail_url="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#title=(title)","text":"View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#type=(type)","text":"View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/","text":"class Tourmaline::InlineQueryResultLocation inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , latitude , longitude , title , live_period = nil , reply_markup = nil , input_message_content = nil , thumbnail_url = nil , thumbnail_width = nil , thumbnail_height = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #heading : Int32? # View source #horizontal_accuracy : Int32? # View source #id : String # View source #input_message_content : InputMessageContent? # View source #latitude : Float64 # View source #live_period : Int32? # View source #longitude : Float64 # View source #proximity_alert_radius : Int32? # View source #reply_markup : InlineKeyboardMarkup? # View source #thumbnail_height : Int32? # View source #thumbnail_url : String? # View source #thumbnail_width : Int32? # View source #title : String # View source #type : String # View source","title":"InlineQueryResultLocation"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation","text":"","title":"InlineQueryResultLocation"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation.new(id,latitude,longitude,title,live_period,reply_markup,input_message_content,thumbnail_url,thumbnail_width,thumbnail_height)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#heading","text":"View source","title":"#heading"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#horizontal_accuracy","text":"View source","title":"#horizontal_accuracy"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#latitude","text":"View source","title":"#latitude"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#live_period","text":"View source","title":"#live_period"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#longitude","text":"View source","title":"#longitude"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#proximity_alert_radius","text":"View source","title":"#proximity_alert_radius"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#thumbnail_height","text":"View source","title":"#thumbnail_height"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#thumbnail_url","text":"View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#thumbnail_width","text":"View source","title":"#thumbnail_width"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/","text":"class Tourmaline::InlineQueryResultMpeg4Gif inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , mpeg4_url , mpeg4_width = nil , mpeg4_height = nil , mpeg4_duration = nil , thumbnail_url = nil , thumbnail_mime_type = nil , title = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #id : String # View source #input_message_content : InputMessageContent? # View source #mpeg4_duration : Int32? # View source #mpeg4_height : Int32? # View source #mpeg4_url : String # View source #mpeg4_width : Int32? # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #thumbnail_mime_type : String? # View source #thumbnail_url : String? # View source #title : String? # View source #type : String # View source","title":"InlineQueryResultMpeg4Gif"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif","text":"","title":"InlineQueryResultMpeg4Gif"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif.new(id,mpeg4_url,mpeg4_width,mpeg4_height,mpeg4_duration,thumbnail_url,thumbnail_mime_type,title,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#mpeg4_duration","text":"View source","title":"#mpeg4_duration"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#mpeg4_height","text":"View source","title":"#mpeg4_height"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#mpeg4_url","text":"View source","title":"#mpeg4_url"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#mpeg4_width","text":"View source","title":"#mpeg4_width"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#thumbnail_mime_type","text":"View source","title":"#thumbnail_mime_type"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#thumbnail_url","text":"View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/","text":"class Tourmaline::InlineQueryResultPhoto inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , photo_url , thumbnail_url , photo_width = nil , photo_height = nil , title = nil , description = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #description : String? # View source #description= ( description : String? ) # View source #id : String # View source #id= ( id : String ) # View source #input_message_content : InputMessageContent? # View source #input_message_content= ( input_message_content : InputMessageContent? ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #photo_height : Int32? # View source #photo_height= ( photo_height : Int32? ) # View source #photo_url : String # View source #photo_url= ( photo_url : String ) # View source #photo_width : Int32? # View source #photo_width= ( photo_width : Int32? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #reply_markup= ( reply_markup : InlineKeyboardMarkup? ) # View source #thumbnail_url : String # View source #thumbnail_url= ( thumbnail_url : String ) # View source #title : String? # View source #title= ( title : String? ) # View source #type : String # View source #type= ( type : String ) # View source","title":"InlineQueryResultPhoto"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto","text":"","title":"InlineQueryResultPhoto"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto.new(id,photo_url,thumbnail_url,photo_width,photo_height,title,description,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#description=(description)","text":"View source","title":"#description="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#id=(id)","text":"View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#input_message_content=(input_message_content)","text":"View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_height","text":"View source","title":"#photo_height"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_height=(photo_height)","text":"View source","title":"#photo_height="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_url","text":"View source","title":"#photo_url"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_url=(photo_url)","text":"View source","title":"#photo_url="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_width","text":"View source","title":"#photo_width"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_width=(photo_width)","text":"View source","title":"#photo_width="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#reply_markup=(reply_markup)","text":"View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#thumbnail_url","text":"View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#thumbnail_url=(thumbnail_url)","text":"View source","title":"#thumbnail_url="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#title=(title)","text":"View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#type=(type)","text":"View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/","text":"class Tourmaline::InlineQueryResultVenue inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , latitude , longitude , title , address , foursquare_id = nil , foursquare_type = nil , reply_markup = nil , google_place_id = nil , google_place_type = nil , input_message_content = nil , thumbnail_url = nil , thumbnail_width = nil , thumbnail_height = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #address : String # View source #foursquare_id : String? # View source #foursquare_type : String? # View source #google_place_id : String? # View source #google_place_type : String? # View source #id : String # View source #input_message_content : InputMessageContent? # View source #latitude : Float64 # View source #longitude : Float64 # View source #reply_markup : InlineKeyboardMarkup? # View source #thumbnail_height : Int32? # View source #thumbnail_url : String? # View source #thumbnail_width : Int32? # View source #title : String # View source #type : String # View source","title":"InlineQueryResultVenue"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue","text":"","title":"InlineQueryResultVenue"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue.new(id,latitude,longitude,title,address,foursquare_id,foursquare_type,reply_markup,google_place_id,google_place_type,input_message_content,thumbnail_url,thumbnail_width,thumbnail_height)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#address","text":"View source","title":"#address"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#foursquare_id","text":"View source","title":"#foursquare_id"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#foursquare_type","text":"View source","title":"#foursquare_type"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#google_place_id","text":"View source","title":"#google_place_id"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#google_place_type","text":"View source","title":"#google_place_type"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#latitude","text":"View source","title":"#latitude"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#longitude","text":"View source","title":"#longitude"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#thumbnail_height","text":"View source","title":"#thumbnail_height"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#thumbnail_url","text":"View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#thumbnail_width","text":"View source","title":"#thumbnail_width"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/","text":"class Tourmaline::InlineQueryResultVideo inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , video_url , mime_type , thumbnail_url , title , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , video_width = nil , video_height = nil , video_duration = nil , description = nil , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #description : String? # View source #description= ( description : String? ) # View source #id : String # View source #id= ( id : String ) # View source #input_message_content : InputMessageContent? # View source #input_message_content= ( input_message_content : InputMessageContent? ) # View source #mime_type : String # View source #mime_type= ( mime_type : String ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #reply_markup= ( reply_markup : InlineKeyboardMarkup? ) # View source #thumbnail_url : String # View source #thumbnail_url= ( thumbnail_url : String ) # View source #title : String # View source #title= ( title : String ) # View source #type : String # View source #type= ( type : String ) # View source #video_duration : Int32? # View source #video_duration= ( video_duration : Int32? ) # View source #video_height : Int32? # View source #video_height= ( video_height : Int32? ) # View source #video_url : String # View source #video_url= ( video_url : String ) # View source #video_width : Int32? # View source #video_width= ( video_width : Int32? ) # View source","title":"InlineQueryResultVideo"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo","text":"","title":"InlineQueryResultVideo"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo.new(id,video_url,mime_type,thumbnail_url,title,caption,parse_mode,caption_entities,video_width,video_height,video_duration,description,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#description=(description)","text":"View source","title":"#description="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#id=(id)","text":"View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#input_message_content=(input_message_content)","text":"View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#mime_type","text":"View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#mime_type=(mime_type)","text":"View source","title":"#mime_type="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#reply_markup=(reply_markup)","text":"View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#thumbnail_url","text":"View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#thumbnail_url=(thumbnail_url)","text":"View source","title":"#thumbnail_url="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#title=(title)","text":"View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#type=(type)","text":"View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_duration","text":"View source","title":"#video_duration"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_duration=(video_duration)","text":"View source","title":"#video_duration="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_height","text":"View source","title":"#video_height"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_height=(video_height)","text":"View source","title":"#video_height="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_url","text":"View source","title":"#video_url"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_url=(video_url)","text":"View source","title":"#video_url="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_width","text":"View source","title":"#video_width"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_width=(video_width)","text":"View source","title":"#video_width="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/","text":"class Tourmaline::InlineQueryResultVoice inherits Tourmaline::InlineQueryResult # Constructors # .new ( id , voice_url , title , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , voice_duration = nil , reply_markup = nil , input_message_content = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #id : String # View source #id= ( id : String ) # View source #input_message_content : InputMessageContent? # View source #input_message_content= ( input_message_content : InputMessageContent? ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #reply_markup : InlineKeyboardMarkup? # View source #reply_markup= ( reply_markup : InlineKeyboardMarkup? ) # View source #title : String # View source #title= ( title : String ) # View source #type : String # View source #type= ( type : String ) # View source #voice_duration : Int32? # View source #voice_duration= ( voice_duration : Int32? ) # View source #voice_url : String # View source #voice_url= ( voice_url : String ) # View source","title":"InlineQueryResultVoice"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice","text":"","title":"InlineQueryResultVoice"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice.new(id,voice_url,title,caption,parse_mode,caption_entities,voice_duration,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#id=(id)","text":"View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#input_message_content","text":"View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#input_message_content=(input_message_content)","text":"View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#reply_markup=(reply_markup)","text":"View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#title=(title)","text":"View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#type=(type)","text":"View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#voice_duration","text":"View source","title":"#voice_duration"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#voice_duration=(voice_duration)","text":"View source","title":"#voice_duration="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#voice_url","text":"View source","title":"#voice_url"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#voice_url=(voice_url)","text":"View source","title":"#voice_url="},{"location":"api_reference/Tourmaline/InputContactMessageContent/","text":"class Tourmaline::InputContactMessageContent inherits Reference # Included modules JSON::Serializable Constructors # .new ( phone_number : String , first_name : String , last_name : String? = nil , vcard : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #first_name : String # View source #last_name : String? # View source #phone_number : String # View source #vcard : String? # View source","title":"InputContactMessageContent"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent","text":"","title":"InputContactMessageContent"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent.new(phone_number,first_name,last_name,vcard)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent#first_name","text":"View source","title":"#first_name"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent#last_name","text":"View source","title":"#last_name"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent#phone_number","text":"View source","title":"#phone_number"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent#vcard","text":"View source","title":"#vcard"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/","text":"class Tourmaline::InputInvoiceMessageContent inherits Reference # Included modules JSON::Serializable Constructors # .new ( title : String , description : String , payload : String , provider_token : String , currency : String , prices = [] of Tourmaline :: LabeledPrice , max_tip_amount : Int32? = nil , suggested_tip_amounts : Array ( Int32 ) = [] of Int32 , provider_data : String? = nil , photo_url : String? = nil , photo_size : Int32? = nil , photo_width : Int32? = nil , photo_height : Int32? = nil , need_name : Bool = false , need_phone_number : Bool = false , need_email : Bool = false , need_shipping_address : Bool = false , send_phone_number_to_provider : Bool = false , send_email_to_provider : Bool = false ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #currency : String # View source #description : String # View source #flexible? : Bool # View source #max_tip_amount : Int32? # View source #need_email? : Bool # View source #need_name? : Bool # View source #need_phone_number? : Bool # View source #need_shipping_address? : Bool # View source #payload : String # View source #photo_height : Int32? # View source #photo_size : Int32? # View source #photo_url : String? # View source #photo_width : Int32? # View source #prices : Array ( Tourmaline::LabeledPrice ) # View source #provider_data : String? # View source #provider_token : String # View source #send_email_to_provider? : Bool # View source #send_phone_number_to_provider? : Bool # View source #suggested_tip_amounts : Array ( Int32 ) # View source #title : String # View source","title":"InputInvoiceMessageContent"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent","text":"","title":"InputInvoiceMessageContent"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent.new(title,description,payload,provider_token,currency,prices,max_tip_amount,suggested_tip_amounts,provider_data,photo_url,photo_size,photo_width,photo_height,need_name,need_phone_number,need_email,need_shipping_address,send_phone_number_to_provider,send_email_to_provider)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#currency","text":"View source","title":"#currency"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#flexible?","text":"View source","title":"#flexible?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#max_tip_amount","text":"View source","title":"#max_tip_amount"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#need_email?","text":"View source","title":"#need_email?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#need_name?","text":"View source","title":"#need_name?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#need_phone_number?","text":"View source","title":"#need_phone_number?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#need_shipping_address?","text":"View source","title":"#need_shipping_address?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#payload","text":"View source","title":"#payload"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#photo_height","text":"View source","title":"#photo_height"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#photo_size","text":"View source","title":"#photo_size"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#photo_url","text":"View source","title":"#photo_url"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#photo_width","text":"View source","title":"#photo_width"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#prices","text":"View source","title":"#prices"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#provider_data","text":"View source","title":"#provider_data"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#provider_token","text":"View source","title":"#provider_token"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#send_email_to_provider?","text":"View source","title":"#send_email_to_provider?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#send_phone_number_to_provider?","text":"View source","title":"#send_phone_number_to_provider?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#suggested_tip_amounts","text":"View source","title":"#suggested_tip_amounts"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/","text":"class Tourmaline::InputLocationMessageContent inherits Reference # Included modules JSON::Serializable Constructors # .new ( latitude , longitude , horizontal_accuracy = nil , live_period = nil , heading = nil , proximity_alert_radius = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #heading : Int32? # View source #horizontal_accuracy : Int32? # View source #latitude : String # View source #live_period : Int32? # View source #longitude : String # View source #proximity_alert_radius : Int32? # View source","title":"InputLocationMessageContent"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent","text":"","title":"InputLocationMessageContent"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent.new(latitude,longitude,horizontal_accuracy,live_period,heading,proximity_alert_radius)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#heading","text":"View source","title":"#heading"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#horizontal_accuracy","text":"View source","title":"#horizontal_accuracy"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#latitude","text":"View source","title":"#latitude"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#live_period","text":"View source","title":"#live_period"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#longitude","text":"View source","title":"#longitude"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#proximity_alert_radius","text":"View source","title":"#proximity_alert_radius"},{"location":"api_reference/Tourmaline/InputMedia/","text":"alias Tourmaline::InputMedia # Alias definition Tourmaline::InputMediaAnimation | Tourmaline::InputMediaAudio | Tourmaline::InputMediaDocument | Tourmaline::InputMediaPhoto | Tourmaline::InputMediaVideo","title":"InputMedia"},{"location":"api_reference/Tourmaline/InputMedia/#Tourmaline::InputMedia","text":"","title":"InputMedia"},{"location":"api_reference/Tourmaline/InputMediaAnimation/","text":"class Tourmaline::InputMediaAnimation inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( media , thumb = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , width = nil , height = nil , duration = nil ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #duration : Int32? # View source #duration= ( duration : Int32? ) # View source #height : Int32? # View source #height= ( height : Int32? ) # View source #media : String | File # View source #media= ( media : String | File ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #thumb : String | File | Nil # View source #thumb= ( thumb : String | File | Nil ) # View source #width : Int32? # View source #width= ( width : Int32? ) # View source","title":"InputMediaAnimation"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation","text":"","title":"InputMediaAnimation"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#duration","text":"View source","title":"#duration"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#duration=(duration)","text":"View source","title":"#duration="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#height","text":"View source","title":"#height"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#height=(height)","text":"View source","title":"#height="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#media","text":"View source","title":"#media"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#media=(media)","text":"View source","title":"#media="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#thumb","text":"View source","title":"#thumb"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#thumb=(thumb)","text":"View source","title":"#thumb="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#width","text":"View source","title":"#width"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#width=(width)","text":"View source","title":"#width="},{"location":"api_reference/Tourmaline/InputMediaAudio/","text":"class Tourmaline::InputMediaAudio inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( media , thumb = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , duration = nil , performer = nil , title = nil ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #duration : Int32? # View source #duration= ( duration : Int32? ) # View source #media : String | File # View source #media= ( media : String | File ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #performer : String? # View source #performer= ( performer : String? ) # View source #thumb : String | File | Nil # View source #thumb= ( thumb : String | File | Nil ) # View source #title : String? # View source #title= ( title : String? ) # View source","title":"InputMediaAudio"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio","text":"","title":"InputMediaAudio"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#duration","text":"View source","title":"#duration"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#duration=(duration)","text":"View source","title":"#duration="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#media","text":"View source","title":"#media"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#media=(media)","text":"View source","title":"#media="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#performer","text":"View source","title":"#performer"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#performer=(performer)","text":"View source","title":"#performer="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#thumb","text":"View source","title":"#thumb"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#thumb=(thumb)","text":"View source","title":"#thumb="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#title=(title)","text":"View source","title":"#title="},{"location":"api_reference/Tourmaline/InputMediaDocument/","text":"class Tourmaline::InputMediaDocument inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( media , thumb = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #media : String | File # View source #media= ( media : String | File ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #thumb : String | File | Nil # View source #thumb= ( thumb : String | File | Nil ) # View source","title":"InputMediaDocument"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument","text":"","title":"InputMediaDocument"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#media","text":"View source","title":"#media"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#media=(media)","text":"View source","title":"#media="},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#thumb","text":"View source","title":"#thumb"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#thumb=(thumb)","text":"View source","title":"#thumb="},{"location":"api_reference/Tourmaline/InputMediaPhoto/","text":"class Tourmaline::InputMediaPhoto inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( media , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #media : String | File # View source #media= ( media : String | File ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source","title":"InputMediaPhoto"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto","text":"","title":"InputMediaPhoto"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#media","text":"View source","title":"#media"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#media=(media)","text":"View source","title":"#media="},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputMediaVideo/","text":"class Tourmaline::InputMediaVideo inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( media , thumb = nil , caption = nil , parse_mode = nil , caption_entities = [] of MessageEntity , width = nil , height = nil , duration = nil , supports_streaming = nil ) # View source Methods # #caption : String? # View source #caption= ( caption : String? ) # View source #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #duration : Int32? # View source #duration= ( duration : Int32? ) # View source #height : Int32? # View source #height= ( height : Int32? ) # View source #media : String | File # View source #media= ( media : String | File ) # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source #supports_streaming : Bool? # View source #supports_streaming= ( supports_streaming : Bool? ) # View source #thumb : String | File | Nil # View source #thumb= ( thumb : String | File | Nil ) # View source #width : Int32? # View source #width= ( width : Int32? ) # View source","title":"InputMediaVideo"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo","text":"","title":"InputMediaVideo"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#caption=(caption)","text":"View source","title":"#caption="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#duration","text":"View source","title":"#duration"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#duration=(duration)","text":"View source","title":"#duration="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#height","text":"View source","title":"#height"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#height=(height)","text":"View source","title":"#height="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#media","text":"View source","title":"#media"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#media=(media)","text":"View source","title":"#media="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#supports_streaming","text":"View source","title":"#supports_streaming"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#supports_streaming=(supports_streaming)","text":"View source","title":"#supports_streaming="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#thumb","text":"View source","title":"#thumb"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#thumb=(thumb)","text":"View source","title":"#thumb="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#width","text":"View source","title":"#width"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#width=(width)","text":"View source","title":"#width="},{"location":"api_reference/Tourmaline/InputMessageContent/","text":"alias Tourmaline::InputMessageContent # Alias definition Tourmaline::InputContactMessageContent | Tourmaline::InputInvoiceMessageContent | Tourmaline::InputLocationMessageContent | Tourmaline::InputTextMessageContent | Tourmaline::InputVenueMessageContent","title":"InputMessageContent"},{"location":"api_reference/Tourmaline/InputMessageContent/#Tourmaline::InputMessageContent","text":"","title":"InputMessageContent"},{"location":"api_reference/Tourmaline/InputSticker/","text":"class Tourmaline::InputSticker inherits Reference # Included modules JSON::Serializable Constructors # .new ( sticker : String | File , emoji_list : Array ( String ), mask_position : MaskPosition? = nil , keywords : Array ( String ) = [] of String ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #emoji_list : Array ( String ) # View source #emoji_list= ( emoji_list : Array ( String )) # View source #keywords : Array ( String ) # View source #keywords= ( keywords : Array ( String )) # View source #mask_position : MaskPosition? # View source #mask_position= ( mask_position : MaskPosition? ) # View source #sticker : String | File # View source #sticker= ( sticker : String | File ) # View source","title":"InputSticker"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker","text":"","title":"InputSticker"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker.new(sticker,emoji_list,mask_position,keywords)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#emoji_list","text":"View source","title":"#emoji_list"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#emoji_list=(emoji_list)","text":"View source","title":"#emoji_list="},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#keywords","text":"View source","title":"#keywords"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#keywords=(keywords)","text":"View source","title":"#keywords="},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#mask_position","text":"View source","title":"#mask_position"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#mask_position=(mask_position)","text":"View source","title":"#mask_position="},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#sticker","text":"View source","title":"#sticker"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#sticker=(sticker)","text":"View source","title":"#sticker="},{"location":"api_reference/Tourmaline/InputTextMessageContent/","text":"class Tourmaline::InputTextMessageContent inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( message_text , parse_mode = nil , caption_entities = [] of MessageEntity , disable_web_page_preview = nil ) # View source Methods # #caption_entities : Array ( MessageEntity ) # View source #caption_entities= ( caption_entities : Array ( MessageEntity )) # View source #disable_web_page_preview : Bool? # View source #message_text : String # View source #parse_mode : ParseMode? # View source #parse_mode= ( parse_mode : ParseMode? ) # View source","title":"InputTextMessageContent"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent","text":"","title":"InputTextMessageContent"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#caption_entities=(caption_entities)","text":"View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#disable_web_page_preview","text":"View source","title":"#disable_web_page_preview"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#message_text","text":"View source","title":"#message_text"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#parse_mode","text":"View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#parse_mode=(parse_mode)","text":"View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputVenueMessageContent/","text":"class Tourmaline::InputVenueMessageContent inherits Reference # Included modules JSON::Serializable Constructors # .new ( latitude , longitude , title , address , foursquare_id = nil , foursquare_type = nil , google_place_id = nil , google_place_type = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #address : String # View source #foursquare_id : String? # View source #foursquare_type : String? # View source #google_place_id : String? # View source #google_place_type : String? # View source #latitude : Float64 # View source #longitude : Float64 # View source #title : String # View source","title":"InputVenueMessageContent"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent","text":"","title":"InputVenueMessageContent"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent.new(latitude,longitude,title,address,foursquare_id,foursquare_type,google_place_id,google_place_type)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#address","text":"View source","title":"#address"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#foursquare_id","text":"View source","title":"#foursquare_id"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#foursquare_type","text":"View source","title":"#foursquare_type"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#google_place_id","text":"View source","title":"#google_place_id"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#google_place_type","text":"View source","title":"#google_place_type"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#latitude","text":"View source","title":"#latitude"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#longitude","text":"View source","title":"#longitude"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/Invoice/","text":"class Tourmaline::Invoice inherits Reference # Included modules JSON::Serializable Constructors # .new ( title , description , start_parameter , currency , total_amount ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #currency : String # View source #currency= ( currency : String ) # View source #description : String # View source #description= ( description : String ) # View source #start_parameter : String # View source #start_parameter= ( start_parameter : String ) # View source #title : String # View source #title= ( title : String ) # View source #total_amount : Int32 # View source #total_amount= ( total_amount : Int32 ) # View source","title":"Invoice"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice","text":"","title":"Invoice"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice.new(title,description,start_parameter,currency,total_amount)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#currency","text":"View source","title":"#currency"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#currency=(currency)","text":"View source","title":"#currency="},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#description","text":"View source","title":"#description"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#description=(description)","text":"View source","title":"#description="},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#start_parameter","text":"View source","title":"#start_parameter"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#start_parameter=(start_parameter)","text":"View source","title":"#start_parameter="},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#title=(title)","text":"View source","title":"#title="},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#total_amount","text":"View source","title":"#total_amount"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#total_amount=(total_amount)","text":"View source","title":"#total_amount="},{"location":"api_reference/Tourmaline/KeyboardBuilder/","text":"abstract class Tourmaline::KeyboardBuilder(T, G) inherits Reference # Base builder class for InlineKeyboardMarkup::Builder and ReplyKeyboardMarkup::Builder . Direct known subclasses Tourmaline::InlineKeyboardMarkup::Builder Tourmaline::ReplyKeyboardMarkup::Builder Constructors # .new ( force_reply = false , remove_keyboard = false , selective = false , keyboard = [] of T , resize = false , one_time = false , input_field_placeholder = nil ) # View source Class methods # .build_keyboard ( buttons : Array ( T ), columns = 1 , wrap = nil ) # View source .buttons ( buttons , ** options ) # View source .force_reply ( value : Bool ) # View source .inline_buttons ( buttons , ** options ) # View source .one_time ( value : Bool ) # View source .remove_keyboard ( value : Bool ) # View source .resize ( value : Bool ) # View source .selective ( value : Bool ) # View source Methods # #button ( * args , ** options ) # View source #force_reply ( value ) # View source #force_reply : Bool # View source #force_reply= ( force_reply : Bool ) # View source #input_field_placeholder : String? # View source #input_field_placeholder ( value ) # View source #input_field_placeholder= ( input_field_placeholder : String? ) # View source abstract #keyboard ( columns = nil ) : G # View source #one_time ( value ) # View source #one_time : Bool # View source #one_time= ( one_time : Bool ) # View source #remove_keyboard ( value ) # View source #remove_keyboard : Bool # View source #remove_keyboard= ( remove_keyboard : Bool ) # View source #resize : Bool # View source #resize ( value ) # View source #resize= ( resize : Bool ) # View source #selective : Bool # View source #selective ( value ) # View source #selective= ( selective : Bool ) # View source","title":"KeyboardBuilder"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder","text":"Base builder class for InlineKeyboardMarkup::Builder and ReplyKeyboardMarkup::Builder .","title":"KeyboardBuilder"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.new(force_reply,remove_keyboard,selective,keyboard,resize,one_time,input_field_placeholder)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.build_keyboard(buttons,columns,wrap)","text":"View source","title":".build_keyboard"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.buttons(buttons,**)","text":"View source","title":".buttons"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.force_reply(value)","text":"View source","title":".force_reply"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.inline_buttons(buttons,**)","text":"View source","title":".inline_buttons"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.one_time(value)","text":"View source","title":".one_time"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.remove_keyboard(value)","text":"View source","title":".remove_keyboard"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.resize(value)","text":"View source","title":".resize"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.selective(value)","text":"View source","title":".selective"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#button(*,**)","text":"View source","title":"#button"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#force_reply(value)","text":"View source","title":"#force_reply"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#force_reply=(force_reply)","text":"View source","title":"#force_reply="},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#input_field_placeholder","text":"View source","title":"#input_field_placeholder"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#input_field_placeholder=(input_field_placeholder)","text":"View source","title":"#input_field_placeholder="},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#keyboard(columns)","text":"View source","title":"#keyboard"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#one_time(value)","text":"View source","title":"#one_time"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#one_time=(one_time)","text":"View source","title":"#one_time="},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#remove_keyboard(value)","text":"View source","title":"#remove_keyboard"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#remove_keyboard=(remove_keyboard)","text":"View source","title":"#remove_keyboard="},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#resize","text":"View source","title":"#resize"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#resize=(resize)","text":"View source","title":"#resize="},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#selective","text":"View source","title":"#selective"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#selective=(selective)","text":"View source","title":"#selective="},{"location":"api_reference/Tourmaline/KeyboardButton/","text":"class Tourmaline::KeyboardButton inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( text : String , request_contact = false , request_location = false , request_poll = nil , web_app = nil ) # View source Methods # #request_contact : Bool # View source #request_contact= ( request_contact : Bool ) # View source #request_location : Bool # View source #request_location= ( request_location : Bool ) # View source #request_poll : KeyboardButtonPollType? # View source #request_poll= ( request_poll : KeyboardButtonPollType? ) # View source #text : String # View source #text= ( text : String ) # View source #web_app : WebAppInfo? # View source #web_app= ( web_app : WebAppInfo? ) # View source","title":"KeyboardButton"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton","text":"","title":"KeyboardButton"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_contact","text":"View source","title":"#request_contact"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_contact=(request_contact)","text":"View source","title":"#request_contact="},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_location","text":"View source","title":"#request_location"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_location=(request_location)","text":"View source","title":"#request_location="},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_poll","text":"View source","title":"#request_poll"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_poll=(request_poll)","text":"View source","title":"#request_poll="},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#text","text":"View source","title":"#text"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#text=(text)","text":"View source","title":"#text="},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#web_app","text":"View source","title":"#web_app"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#web_app=(web_app)","text":"View source","title":"#web_app="},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/","text":"class Tourmaline::KeyboardButtonPollType inherits Reference # This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( type ) # View source Methods # #type : Poll::Type # View source #type= ( type : Poll::Type ) # View source","title":"KeyboardButtonPollType"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType","text":"This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.","title":"KeyboardButtonPollType"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType#type=(type)","text":"View source","title":"#type="},{"location":"api_reference/Tourmaline/LabeledPrice/","text":"class Tourmaline::LabeledPrice inherits Reference # Included modules JSON::Serializable Constructors # .new ( label : String , amount : Int32 ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #amount : Int32 # View source #label : String # View source","title":"LabeledPrice"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice","text":"","title":"LabeledPrice"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice.new(label,amount)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice#amount","text":"View source","title":"#amount"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice#label","text":"View source","title":"#label"},{"location":"api_reference/Tourmaline/Location/","text":"class Tourmaline::Location inherits Reference # Included modules JSON::Serializable Constructors # .new ( latitude , longitude , horizontal_accuracy = nil , live_period = nil , heading = nil , proximity_alert_radius = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #heading : Int32? # View source #horizontal_accuracy : Float64? # View source #latitude : Float64 # View source #live_period : Int32? # View source #longitude : Float64 # View source #proximity_alert_radius : Int32? # View source","title":"Location"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location","text":"","title":"Location"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location.new(latitude,longitude,horizontal_accuracy,live_period,heading,proximity_alert_radius)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#heading","text":"View source","title":"#heading"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#horizontal_accuracy","text":"View source","title":"#horizontal_accuracy"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#latitude","text":"View source","title":"#latitude"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#live_period","text":"View source","title":"#live_period"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#longitude","text":"View source","title":"#longitude"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#proximity_alert_radius","text":"View source","title":"#proximity_alert_radius"},{"location":"api_reference/Tourmaline/LoginURL/","text":"struct Tourmaline::LoginURL inherits Struct # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( url , forward_text = nil , bot_username = nil , request_write_access = nil ) # View source Methods # #bot_username : String? # View source #forward_text : String? # View source #request_write_access : Bool? # View source #url : String # View source","title":"LoginURL"},{"location":"api_reference/Tourmaline/LoginURL/#Tourmaline::LoginURL","text":"","title":"LoginURL"},{"location":"api_reference/Tourmaline/LoginURL/#Tourmaline::LoginURL-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/LoginURL/#Tourmaline::LoginURL.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/LoginURL/#Tourmaline::LoginURL-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/LoginURL/#Tourmaline::LoginURL#bot_username","text":"View source","title":"#bot_username"},{"location":"api_reference/Tourmaline/LoginURL/#Tourmaline::LoginURL#forward_text","text":"View source","title":"#forward_text"},{"location":"api_reference/Tourmaline/LoginURL/#Tourmaline::LoginURL#request_write_access","text":"View source","title":"#request_write_access"},{"location":"api_reference/Tourmaline/LoginURL/#Tourmaline::LoginURL#url","text":"View source","title":"#url"},{"location":"api_reference/Tourmaline/MaskPosition/","text":"class Tourmaline::MaskPosition inherits Reference # Included modules JSON::Serializable Constructors # .new ( point : String , x_shift : Float64 , y_shift : Float64 , scale : Float64 ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #point : String # View source #scale : Float64 # View source #x_shift : Float64 # View source #y_shift : Float64 # View source","title":"MaskPosition"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition","text":"","title":"MaskPosition"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition.new(point,x_shift,y_shift,scale)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition#point","text":"View source","title":"#point"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition#scale","text":"View source","title":"#scale"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition#x_shift","text":"View source","title":"#x_shift"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition#y_shift","text":"View source","title":"#y_shift"},{"location":"api_reference/Tourmaline/MenuButton/","text":"alias Tourmaline::MenuButton # Alias definition Tourmaline::MenuButtonCommands | Tourmaline::MenuButtonDefault | Tourmaline::MenuButtonWebApp","title":"MenuButton"},{"location":"api_reference/Tourmaline/MenuButton/#Tourmaline::MenuButton","text":"","title":"MenuButton"},{"location":"api_reference/Tourmaline/MenuButtonCommands/","text":"class Tourmaline::MenuButtonCommands inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( type : String ) # View source Methods # #type : String # View source","title":"MenuButtonCommands"},{"location":"api_reference/Tourmaline/MenuButtonCommands/#Tourmaline::MenuButtonCommands","text":"","title":"MenuButtonCommands"},{"location":"api_reference/Tourmaline/MenuButtonCommands/#Tourmaline::MenuButtonCommands-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MenuButtonCommands/#Tourmaline::MenuButtonCommands.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MenuButtonCommands/#Tourmaline::MenuButtonCommands-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MenuButtonCommands/#Tourmaline::MenuButtonCommands#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/MenuButtonDefault/","text":"class Tourmaline::MenuButtonDefault inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( type : String ) # View source Methods # #type : String # View source","title":"MenuButtonDefault"},{"location":"api_reference/Tourmaline/MenuButtonDefault/#Tourmaline::MenuButtonDefault","text":"","title":"MenuButtonDefault"},{"location":"api_reference/Tourmaline/MenuButtonDefault/#Tourmaline::MenuButtonDefault-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MenuButtonDefault/#Tourmaline::MenuButtonDefault.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MenuButtonDefault/#Tourmaline::MenuButtonDefault-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MenuButtonDefault/#Tourmaline::MenuButtonDefault#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/MenuButtonWebApp/","text":"class Tourmaline::MenuButtonWebApp inherits Reference # Included modules JSON::Serializable Constructors # .new ( type : String , text : String , web_app : WebAppInfo ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #text : String # View source #type : String # View source #web_app : WebAppInfo # View source","title":"MenuButtonWebApp"},{"location":"api_reference/Tourmaline/MenuButtonWebApp/#Tourmaline::MenuButtonWebApp","text":"","title":"MenuButtonWebApp"},{"location":"api_reference/Tourmaline/MenuButtonWebApp/#Tourmaline::MenuButtonWebApp-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MenuButtonWebApp/#Tourmaline::MenuButtonWebApp.new(type,text,web_app)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MenuButtonWebApp/#Tourmaline::MenuButtonWebApp-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MenuButtonWebApp/#Tourmaline::MenuButtonWebApp#text","text":"View source","title":"#text"},{"location":"api_reference/Tourmaline/MenuButtonWebApp/#Tourmaline::MenuButtonWebApp#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/MenuButtonWebApp/#Tourmaline::MenuButtonWebApp#web_app","text":"View source","title":"#web_app"},{"location":"api_reference/Tourmaline/Message/","text":"class Tourmaline::Message inherits Reference # This object represents a Telegram user or bot. # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #animation : Animation? # View source #audio : Audio? # View source #author_signature : String? # View source #automatic_forward? : Bool? # View source #caption : String? # View source #caption_entities : Array ( MessageEntity ) # View source #channel_chat_created : Bool? # View source #chat : Chat # View source #chats ( & block : Chat -> ) # View source #chats # View source #connected_website : String? # View source #contact : Contact? # View source #date : Time # View source #delete_chat_photo : Bool? # View source #dice : Dice? # View source #document : Document? # View source #edit_date : Time? # View source #entities : Array ( MessageEntity ) # View source #file # View source #forum_topic_closed : ForumTopicClosed? # View source #forum_topic_created : ForumTopicCreated? # View source #forum_topic_reopened : ForumTopicReopened? # View source #forward_date : Time? # View source #forward_from : User? # View source #forward_from_chat : Chat? # View source #forward_from_message_id : Int64? # View source #forward_sender_name : String? # View source #forward_signature : String? # View source #forwards : Int32? # USER API ONLY View source #from : User? # View source #game : Game? # View source #group_chat_created : Bool? # View source #has_protected_content? : Bool? # View source #invoice : Invoice? # View source #left_chat_member : User? # View source #link # View source #location : Location? # View source #media_group_id : String? # View source #message_auto_delete_timer_changed : MessageAutoDeleteTimerChanged? # View source #message_id : Int64 # View source #message_thread_id : Int64? # View source #migrate_from_chat_id : Int64? # View source #migrate_to_chat_id : Int64? # View source #new_chat_members : Array ( User ) # View source #new_chat_photo : Array ( PhotoSize ) # View source #new_chat_title : String? # View source #outgoing? : Bool? # USER API ONLY View source #passport_data : PassportData? # View source #photo : Array ( PhotoSize ) # View source #pinned_message : Message? # View source #poll : Poll? # View source #proximity_alert_triggered : ProximityAlertTriggered? # View source #reply_markup : InlineKeyboardMarkup? # View source #reply_message : Message? # View source #sender_chat : Chat? # View source #sender_type # View source #sticker : Sticker? # View source #successful_payment : SuccessfulPayment? # View source #supergroup_chat_created : Bool? # View source #text : String? # View source #text_entities ( type : String ) # View source #text_entities # View source #topic_message? : Bool? # View source #users # View source #users ( & block : User -> ) # View source #venue : Venue? # View source #via_bot : User? # View source #video : Video? # View source #video_chat_ended : VideoChatEnded? # View source #video_chat_participants_invited : VideoChatParticipantsInvited? # View source #video_chat_scheduled : VideoChatScheduled? # View source #video_chat_started : VideoChatStarted? # View source #video_note : VideoNote? # View source #views : Int32? # USER API ONLY View source #voice : Voice? # View source #web_app_data : WebAppData? # View source","title":"Message"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message","text":"","title":"Message"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message--this-object-represents-a-telegram-user-or-bot","text":"","title":"This object represents a Telegram user or bot."},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#animation","text":"View source","title":"#animation"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#audio","text":"View source","title":"#audio"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#author_signature","text":"View source","title":"#author_signature"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#automatic_forward?","text":"View source","title":"#automatic_forward?"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#caption","text":"View source","title":"#caption"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#caption_entities","text":"View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#channel_chat_created","text":"View source","title":"#channel_chat_created"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#chat","text":"View source","title":"#chat"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#chats(&)","text":"View source","title":"#chats"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#connected_website","text":"View source","title":"#connected_website"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#contact","text":"View source","title":"#contact"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#date","text":"View source","title":"#date"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#delete_chat_photo","text":"View source","title":"#delete_chat_photo"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#dice","text":"View source","title":"#dice"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#document","text":"View source","title":"#document"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#edit_date","text":"View source","title":"#edit_date"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#entities","text":"View source","title":"#entities"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#file","text":"View source","title":"#file"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forum_topic_closed","text":"View source","title":"#forum_topic_closed"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forum_topic_created","text":"View source","title":"#forum_topic_created"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forum_topic_reopened","text":"View source","title":"#forum_topic_reopened"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forward_date","text":"View source","title":"#forward_date"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forward_from","text":"View source","title":"#forward_from"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forward_from_chat","text":"View source","title":"#forward_from_chat"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forward_from_message_id","text":"View source","title":"#forward_from_message_id"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forward_sender_name","text":"View source","title":"#forward_sender_name"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forward_signature","text":"View source","title":"#forward_signature"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forwards","text":"USER API ONLY View source","title":"#forwards"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#from","text":"View source","title":"#from"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#game","text":"View source","title":"#game"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#group_chat_created","text":"View source","title":"#group_chat_created"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#has_protected_content?","text":"View source","title":"#has_protected_content?"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#invoice","text":"View source","title":"#invoice"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#left_chat_member","text":"View source","title":"#left_chat_member"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#link","text":"View source","title":"#link"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#location","text":"View source","title":"#location"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#media_group_id","text":"View source","title":"#media_group_id"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#message_auto_delete_timer_changed","text":"View source","title":"#message_auto_delete_timer_changed"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#message_id","text":"View source","title":"#message_id"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#message_thread_id","text":"View source","title":"#message_thread_id"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#migrate_from_chat_id","text":"View source","title":"#migrate_from_chat_id"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#migrate_to_chat_id","text":"View source","title":"#migrate_to_chat_id"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#new_chat_members","text":"View source","title":"#new_chat_members"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#new_chat_photo","text":"View source","title":"#new_chat_photo"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#new_chat_title","text":"View source","title":"#new_chat_title"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#outgoing?","text":"USER API ONLY View source","title":"#outgoing?"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#passport_data","text":"View source","title":"#passport_data"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#photo","text":"View source","title":"#photo"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#pinned_message","text":"View source","title":"#pinned_message"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#poll","text":"View source","title":"#poll"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#proximity_alert_triggered","text":"View source","title":"#proximity_alert_triggered"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_markup","text":"View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_message","text":"View source","title":"#reply_message"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#sender_chat","text":"View source","title":"#sender_chat"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#sender_type","text":"View source","title":"#sender_type"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#sticker","text":"View source","title":"#sticker"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#successful_payment","text":"View source","title":"#successful_payment"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#supergroup_chat_created","text":"View source","title":"#supergroup_chat_created"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#text","text":"View source","title":"#text"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#text_entities(type)","text":"View source","title":"#text_entities"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#topic_message?","text":"View source","title":"#topic_message?"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#users","text":"View source","title":"#users"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#venue","text":"View source","title":"#venue"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#via_bot","text":"View source","title":"#via_bot"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video","text":"View source","title":"#video"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video_chat_ended","text":"View source","title":"#video_chat_ended"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video_chat_participants_invited","text":"View source","title":"#video_chat_participants_invited"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video_chat_scheduled","text":"View source","title":"#video_chat_scheduled"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video_chat_started","text":"View source","title":"#video_chat_started"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video_note","text":"View source","title":"#video_note"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#views","text":"USER API ONLY View source","title":"#views"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#voice","text":"View source","title":"#voice"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#web_app_data","text":"View source","title":"#web_app_data"},{"location":"api_reference/Tourmaline/Message/SenderType/","text":"enum Tourmaline::Message::SenderType # Members # Bot = 0 # User = 1 # Channel = 2 # ChannelForward = 3 # AnonymousAdmin = 4 # Methods # #anonymous_admin? # View source #bot? # View source #channel? # View source #channel_forward? # View source #user? # View source","title":"SenderType"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType","text":"","title":"SenderType"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType::Bot","text":"","title":"Bot"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType::User","text":"","title":"User"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType::Channel","text":"","title":"Channel"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType::ChannelForward","text":"","title":"ChannelForward"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType::AnonymousAdmin","text":"","title":"AnonymousAdmin"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType#anonymous_admin?","text":"View source","title":"#anonymous_admin?"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType#bot?","text":"View source","title":"#bot?"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType#channel?","text":"View source","title":"#channel?"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType#channel_forward?","text":"View source","title":"#channel_forward?"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType#user?","text":"View source","title":"#user?"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/","text":"class Tourmaline::MessageAutoDeleteTimerChanged inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #message_auto_delete_time : Int32 # View source","title":"MessageAutoDeleteTimerChanged"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/#Tourmaline::MessageAutoDeleteTimerChanged","text":"","title":"MessageAutoDeleteTimerChanged"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/#Tourmaline::MessageAutoDeleteTimerChanged-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/#Tourmaline::MessageAutoDeleteTimerChanged.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/#Tourmaline::MessageAutoDeleteTimerChanged-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/#Tourmaline::MessageAutoDeleteTimerChanged#message_auto_delete_time","text":"View source","title":"#message_auto_delete_time"},{"location":"api_reference/Tourmaline/MessageEntity/","text":"class Tourmaline::MessageEntity inherits Reference # Included modules JSON::Serializable Constants # MENTION_TYPES = [ \"mention\" , \"text_mention\" , \"hashtag\" , \"cashtag\" , \"bot_command\" , \"url\" , \"email\" , \"phone_number\" , \"bold\" , \"italic\" , \"code\" , \"pre\" , \"text_link\" , \"underline\" , \"strikethrough\" , \"spoiler\" , \"custom_emoji\" ] of :: String # Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( type , offset = 0 , length = 0 , url = nil , user = nil , language = nil , custom_emoji_id = nil ) # View source Methods # #== ( other ) # Returns false (other can only be a Value here). View source #bold? # View source #bot_command? # View source #cashtag? # View source #code? # View source #custom_emoji? # View source #custom_emoji_id : String? # View source #custom_emoji_id= ( custom_emoji_id : String? ) # View source #email? # View source #hashtag? # View source #italic? # View source #language : String? # View source #language= ( language : String? ) # View source #length : Int32 # View source #length= ( length : Int32 ) # View source #mention? # View source #offset : Int32 # View source #offset= ( offset : Int32 ) # View source #phone_number? # View source #pre? # View source #spoiler? # View source #strikethrough? # View source #text_link? # View source #text_mention? # View source #type : String # View source #type= ( type : String ) # View source #underline? # View source #url : String? # View source #url= ( url : String? ) # View source #url? # View source #user : User? # View source #user= ( user : User? ) # View source","title":"MessageEntity"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity","text":"","title":"MessageEntity"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity::MENTION_TYPES","text":"","title":"MENTION_TYPES"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#==(other)","text":"Returns false (other can only be a Value here). View source","title":"#=="},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#bold?","text":"View source","title":"#bold?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#bot_command?","text":"View source","title":"#bot_command?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#cashtag?","text":"View source","title":"#cashtag?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#code?","text":"View source","title":"#code?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#custom_emoji?","text":"View source","title":"#custom_emoji?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#custom_emoji_id","text":"View source","title":"#custom_emoji_id"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#custom_emoji_id=(custom_emoji_id)","text":"View source","title":"#custom_emoji_id="},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#email?","text":"View source","title":"#email?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#hashtag?","text":"View source","title":"#hashtag?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#italic?","text":"View source","title":"#italic?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#language","text":"View source","title":"#language"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#language=(language)","text":"View source","title":"#language="},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#length","text":"View source","title":"#length"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#length=(length)","text":"View source","title":"#length="},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#mention?","text":"View source","title":"#mention?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#offset","text":"View source","title":"#offset"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#offset=(offset)","text":"View source","title":"#offset="},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#phone_number?","text":"View source","title":"#phone_number?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#pre?","text":"View source","title":"#pre?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#spoiler?","text":"View source","title":"#spoiler?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#strikethrough?","text":"View source","title":"#strikethrough?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#text_link?","text":"View source","title":"#text_link?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#text_mention?","text":"View source","title":"#text_mention?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#type=(type)","text":"View source","title":"#type="},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#underline?","text":"View source","title":"#underline?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#url","text":"View source","title":"#url"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#url=(url)","text":"View source","title":"#url="},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#url?","text":"View source","title":"#url?"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#user","text":"View source","title":"#user"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#user=(user)","text":"View source","title":"#user="},{"location":"api_reference/Tourmaline/Middleware/","text":"abstract class Tourmaline::Middleware inherits Reference # Methods # abstract #call ( context : Context ) # View source #call_internal ( context : Context ) # View source #next # View source #stop # View source","title":"Middleware"},{"location":"api_reference/Tourmaline/Middleware/#Tourmaline::Middleware","text":"","title":"Middleware"},{"location":"api_reference/Tourmaline/Middleware/#Tourmaline::Middleware-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Middleware/#Tourmaline::Middleware#call(context)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/Middleware/#Tourmaline::Middleware#call_internal(context)","text":"View source","title":"#call_internal"},{"location":"api_reference/Tourmaline/Middleware/#Tourmaline::Middleware#next","text":"View source","title":"#next"},{"location":"api_reference/Tourmaline/Middleware/#Tourmaline::Middleware#stop","text":"View source","title":"#stop"},{"location":"api_reference/Tourmaline/Middleware/Stop/","text":"class Tourmaline::Middleware::Stop inherits Exception #","title":"Stop"},{"location":"api_reference/Tourmaline/Middleware/Stop/#Tourmaline::Middleware::Stop","text":"","title":"Stop"},{"location":"api_reference/Tourmaline/OrderInfo/","text":"class Tourmaline::OrderInfo inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #email : String? # View source #name : String? # View source #phone_number : String? # View source #shipping_address : ShippingAddress? # View source","title":"OrderInfo"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo","text":"","title":"OrderInfo"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo#email","text":"View source","title":"#email"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo#name","text":"View source","title":"#name"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo#phone_number","text":"View source","title":"#phone_number"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo#shipping_address","text":"View source","title":"#shipping_address"},{"location":"api_reference/Tourmaline/ParseMode/","text":"enum Tourmaline::ParseMode # Parse mode for messages. Members # None = 0 # Markdown = 1 # MarkdownV2 = 2 # HTML = 3 # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #html? # View source #markdown? # View source #markdown_v2? # View source #none? # View source #to_json ( json : JSON :: Builder ) # Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source","title":"ParseMode"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode","text":"Parse mode for messages.","title":"ParseMode"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode::None","text":"","title":"None"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode::Markdown","text":"","title":"Markdown"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode::MarkdownV2","text":"","title":"MarkdownV2"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode::HTML","text":"","title":"HTML"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode#html?","text":"View source","title":"#html?"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode#markdown?","text":"View source","title":"#markdown?"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode#markdown_v2?","text":"View source","title":"#markdown_v2?"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode#none?","text":"View source","title":"#none?"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode#to_json(json)","text":"Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source","title":"#to_json"},{"location":"api_reference/Tourmaline/PassportData/","text":"class Tourmaline::PassportData inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #credentials : EncryptedCredentials # View source #data : Array ( EncryptedPassportElement ) # View source","title":"PassportData"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData","text":"","title":"PassportData"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData#credentials","text":"View source","title":"#credentials"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData#data","text":"View source","title":"#data"},{"location":"api_reference/Tourmaline/PassportElementError/","text":"class Tourmaline::PassportElementError inherits Reference # Included modules JSON::Serializable Direct known subclasses Tourmaline::PassportElementErrorDataField Tourmaline::PassportElementErrorFile Tourmaline::PassportElementErrorFiles Tourmaline::PassportElementErrorFrontSide Tourmaline::PassportElementErrorReverseSide Tourmaline::PassportElementErrorSelfie Tourmaline::PassportElementErrorTranslationFile Tourmaline::PassportElementErrorTranslationFiles Tourmaline::PassportElementErrorUnspecified Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( ** params ) # View source Methods # #message : String # View source #source : String # View source #type : String # View source","title":"PassportElementError"},{"location":"api_reference/Tourmaline/PassportElementError/#Tourmaline::PassportElementError","text":"","title":"PassportElementError"},{"location":"api_reference/Tourmaline/PassportElementError/#Tourmaline::PassportElementError-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementError/#Tourmaline::PassportElementError.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementError/#Tourmaline::PassportElementError-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementError/#Tourmaline::PassportElementError#message","text":"View source","title":"#message"},{"location":"api_reference/Tourmaline/PassportElementError/#Tourmaline::PassportElementError#source","text":"View source","title":"#source"},{"location":"api_reference/Tourmaline/PassportElementError/#Tourmaline::PassportElementError#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/","text":"class Tourmaline::PassportElementErrorDataField inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #data_hash : String # View source #field_name : String # View source","title":"PassportElementErrorDataField"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField","text":"","title":"PassportElementErrorDataField"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField#data_hash","text":"View source","title":"#data_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField#field_name","text":"View source","title":"#field_name"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/","text":"class Tourmaline::PassportElementErrorFile inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_hash : String # View source","title":"PassportElementErrorFile"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile","text":"","title":"PassportElementErrorFile"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile#file_hash","text":"View source","title":"#file_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/","text":"class Tourmaline::PassportElementErrorFiles inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_hashes : Array ( String ) # View source","title":"PassportElementErrorFiles"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles","text":"","title":"PassportElementErrorFiles"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles#file_hashes","text":"View source","title":"#file_hashes"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/","text":"class Tourmaline::PassportElementErrorFrontSide inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_hash : String # View source","title":"PassportElementErrorFrontSide"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide","text":"","title":"PassportElementErrorFrontSide"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide#file_hash","text":"View source","title":"#file_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/","text":"class Tourmaline::PassportElementErrorReverseSide inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_hash : String # View source","title":"PassportElementErrorReverseSide"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide","text":"","title":"PassportElementErrorReverseSide"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide#file_hash","text":"View source","title":"#file_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/","text":"class Tourmaline::PassportElementErrorSelfie inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_hash : String # View source","title":"PassportElementErrorSelfie"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie","text":"","title":"PassportElementErrorSelfie"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie#file_hash","text":"View source","title":"#file_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/","text":"class Tourmaline::PassportElementErrorTranslationFile inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_hash : String # View source","title":"PassportElementErrorTranslationFile"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile","text":"","title":"PassportElementErrorTranslationFile"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile#file_hash","text":"View source","title":"#file_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/","text":"class Tourmaline::PassportElementErrorTranslationFiles inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_hashes : Array ( String ) # View source","title":"PassportElementErrorTranslationFiles"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles","text":"","title":"PassportElementErrorTranslationFiles"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles#file_hashes","text":"View source","title":"#file_hashes"},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/","text":"class Tourmaline::PassportElementErrorUnspecified inherits Tourmaline::PassportElementError # Constructors # .new ( pull : JSON :: PullParser ) # View source","title":"PassportElementErrorUnspecified"},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified","text":"","title":"PassportElementErrorUnspecified"},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportFile/","text":"class Tourmaline::PassportFile inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_date : Time? # View source #file_id : String # View source #file_size : Int64 # View source #file_unique_id : String # View source","title":"PassportFile"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile","text":"","title":"PassportFile"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile#file_date","text":"View source","title":"#file_date"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/PhotoSize/","text":"class Tourmaline::PhotoSize inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_id : String # View source #file_size : Int64 # View source #file_unique_id : String # View source #height : Int32 # View source #width : Int32 # View source","title":"PhotoSize"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize","text":"","title":"PhotoSize"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#height","text":"View source","title":"#height"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#width","text":"View source","title":"#width"},{"location":"api_reference/Tourmaline/Poll/","text":"class Tourmaline::Poll inherits Reference # This object contains information about a poll. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #allows_multiple_answers : Bool # View source #anonymous? : Bool # View source #closed? : Bool # View source #correct_option_id : Int32? # View source #explanation_entities : Array ( Tourmaline::MessageEntity ) # View source #id : String # View source #options : Array ( PollOption ) # View source #question : String # View source #total_voter_count : Int32 # View source #type : Type # View source","title":"Poll"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll","text":"This object contains information about a poll.","title":"Poll"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#allows_multiple_answers","text":"View source","title":"#allows_multiple_answers"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#anonymous?","text":"View source","title":"#anonymous?"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#closed?","text":"View source","title":"#closed?"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#correct_option_id","text":"View source","title":"#correct_option_id"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#explanation_entities","text":"View source","title":"#explanation_entities"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#options","text":"View source","title":"#options"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#question","text":"View source","title":"#question"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#total_voter_count","text":"View source","title":"#total_voter_count"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/Poll/Type/","text":"enum Tourmaline::Poll::Type # Members # Quiz = 0 # Regular = 1 # Methods # #quiz? # View source #regular? # View source #to_s # Returns a String representation of this enum member. In the case of regular enums, this is just the name of the member. In the case of flag enums, it's the names joined by vertical bars, or \"None\", if the value is zero. If an enum's value doesn't match a member's value, the raw value is returned as a string. Color :: Red . to_s # => \"Red\" IOMode :: None . to_s # => \"None\" ( IOMode :: Read | IOMode :: Write ) . to_s # => \"Read | Write\" Color . new ( 10 ) . to_s # => \"10\" View source","title":"Type"},{"location":"api_reference/Tourmaline/Poll/Type/#Tourmaline::Poll::Type","text":"","title":"Type"},{"location":"api_reference/Tourmaline/Poll/Type/#Tourmaline::Poll::Type-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/Poll/Type/#Tourmaline::Poll::Type::Quiz","text":"","title":"Quiz"},{"location":"api_reference/Tourmaline/Poll/Type/#Tourmaline::Poll::Type::Regular","text":"","title":"Regular"},{"location":"api_reference/Tourmaline/Poll/Type/#Tourmaline::Poll::Type-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Poll/Type/#Tourmaline::Poll::Type#quiz?","text":"View source","title":"#quiz?"},{"location":"api_reference/Tourmaline/Poll/Type/#Tourmaline::Poll::Type#regular?","text":"View source","title":"#regular?"},{"location":"api_reference/Tourmaline/Poll/Type/#Tourmaline::Poll::Type#to_s","text":"Returns a String representation of this enum member. In the case of regular enums, this is just the name of the member. In the case of flag enums, it's the names joined by vertical bars, or \"None\", if the value is zero. If an enum's value doesn't match a member's value, the raw value is returned as a string. Color :: Red . to_s # => \"Red\" IOMode :: None . to_s # => \"None\" ( IOMode :: Read | IOMode :: Write ) . to_s # => \"Read | Write\" Color . new ( 10 ) . to_s # => \"10\" View source","title":"#to_s"},{"location":"api_reference/Tourmaline/PollAnswer/","text":"class Tourmaline::PollAnswer inherits Reference # This object contains information about one answer option in a poll. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #option_ids : Array ( Int32 ) # View source #poll_id : String # View source #user : User # View source","title":"PollAnswer"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer","text":"This object contains information about one answer option in a poll.","title":"PollAnswer"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer#option_ids","text":"View source","title":"#option_ids"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer#poll_id","text":"View source","title":"#poll_id"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer#user","text":"View source","title":"#user"},{"location":"api_reference/Tourmaline/PollOption/","text":"class Tourmaline::PollOption inherits Reference # This object contains information about one answer option in a poll. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #text : String # View source #voter_count : Int32 # View source","title":"PollOption"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption","text":"This object contains information about one answer option in a poll.","title":"PollOption"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption#text","text":"View source","title":"#text"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption#voter_count","text":"View source","title":"#voter_count"},{"location":"api_reference/Tourmaline/Poller/","text":"class Tourmaline::Poller inherits Reference # The Poller class is responsible for polling Telegram's API for updates, and then passing them to the Dispatcher for processing. Constants # Log = :: Log . for ( self ) # Constructors # .new ( client : Tourmaline::Client ) # View source Methods # #offset : Int64 # View source #start # Starts polling Telegram's API for updates. View source #stop # View source","title":"Poller"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller","text":"The Poller class is responsible for polling Telegram's API for updates, and then passing them to the Dispatcher for processing.","title":"Poller"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller::Log","text":"","title":"Log"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller.new(client)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller#offset","text":"View source","title":"#offset"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller#start","text":"Starts polling Telegram's API for updates. View source","title":"#start"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller#stop","text":"View source","title":"#stop"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/","text":"class Tourmaline::PreCheckoutQuery inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #currency : String # View source #from : User # View source #id : String # View source #invoice_payload : String # View source #order_info : OrderInfo? # View source #shipping_option_id : String? # View source #total_amount : Int32 # View source","title":"PreCheckoutQuery"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery","text":"","title":"PreCheckoutQuery"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#currency","text":"View source","title":"#currency"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#from","text":"View source","title":"#from"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#invoice_payload","text":"View source","title":"#invoice_payload"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#order_info","text":"View source","title":"#order_info"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#shipping_option_id","text":"View source","title":"#shipping_option_id"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#total_amount","text":"View source","title":"#total_amount"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/","text":"class Tourmaline::ProximityAlertTriggered inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #distance : Int32 # View source #traveler : User # View source #watcher : User # View source","title":"ProximityAlertTriggered"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered","text":"","title":"ProximityAlertTriggered"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered#distance","text":"View source","title":"#distance"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered#traveler","text":"View source","title":"#traveler"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered#watcher","text":"View source","title":"#watcher"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/","text":"class Tourmaline::ReplyKeyboardMarkup inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( keyboard = [] of Array ( KeyboardButton ), resize_keyboard = false , one_time_keyboard = false , input_field_placeholder = nil , selective = false ) # View source Class methods # .build ( * args , columns = nil # View source Methods # #<< ( row : Int32 , key : KeyboardButton ) # View source #<< ( keys : Array ( KeyboardButton )) # View source #delete_row ( row ) # View source #input_field_placeholder : String? # View source #input_field_placeholder= ( input_field_placeholder : String? ) # View source #keyboard : Array ( Array ( KeyboardButton )) # View source #keyboard= ( keyboard : Array ( Array ( KeyboardButton ))) # View source #one_time_keyboard : Bool # View source #one_time_keyboard= ( one_time_keyboard : Bool ) # View source #resize_keyboard : Bool # View source #resize_keyboard= ( resize_keyboard : Bool ) # View source #selective : Bool # View source #selective= ( selective : Bool ) # View source #size # View source #swap_row ( row : Int32 , keys : Array ( KeyboardButton )) # View source","title":"ReplyKeyboardMarkup"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup","text":"","title":"ReplyKeyboardMarkup"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup.build(*,columns,**,&)","text":"View source","title":".build"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#<<(row,key)","text":"View source","title":"#&lt;&lt;"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#delete_row(row)","text":"View source","title":"#delete_row"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#input_field_placeholder","text":"View source","title":"#input_field_placeholder"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#input_field_placeholder=(input_field_placeholder)","text":"View source","title":"#input_field_placeholder="},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#keyboard","text":"View source","title":"#keyboard"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#keyboard=(keyboard)","text":"View source","title":"#keyboard="},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#one_time_keyboard","text":"View source","title":"#one_time_keyboard"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#one_time_keyboard=(one_time_keyboard)","text":"View source","title":"#one_time_keyboard="},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#resize_keyboard","text":"View source","title":"#resize_keyboard"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#resize_keyboard=(resize_keyboard)","text":"View source","title":"#resize_keyboard="},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#selective","text":"View source","title":"#selective"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#selective=(selective)","text":"View source","title":"#selective="},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#size","text":"View source","title":"#size"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#swap_row(row,keys)","text":"View source","title":"#swap_row"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/","text":"class Tourmaline::ReplyKeyboardMarkup::Builder inherits Tourmaline::KeyboardBuilder # Constructors # .new ( force_reply = false , remove_keyboard = false , selective = false , keyboard = [] of T , resize = false , one_time = false , input_field_placeholder = nil ) # View source Methods # #contact_request_button ( text ) # View source #keyboard ( columns = nil ) : G # View source #location_request_button ( text ) # View source #poll_request_button ( text , type : Poll::Type ) # View source #text_button ( text ) # View source #web_app_button ( app : String | WebAppInfo ) # View source","title":"Builder"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder","text":"","title":"Builder"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder.new(force_reply,remove_keyboard,selective,keyboard,resize,one_time,input_field_placeholder)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder#contact_request_button(text)","text":"View source","title":"#contact_request_button"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder#keyboard(columns)","text":"View source","title":"#keyboard"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder#location_request_button(text)","text":"View source","title":"#location_request_button"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder#poll_request_button(text,type)","text":"View source","title":"#poll_request_button"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder#text_button(text)","text":"View source","title":"#text_button"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/Builder/#Tourmaline::ReplyKeyboardMarkup::Builder#web_app_button(app)","text":"View source","title":"#web_app_button"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/","text":"class Tourmaline::ReplyKeyboardRemove inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( selective : Bool? , remove_keyboard : Bool = true ) # View source Methods # #remove_keyboard : Bool # View source #selective : Bool? # View source","title":"ReplyKeyboardRemove"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove","text":"","title":"ReplyKeyboardRemove"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove#remove_keyboard","text":"View source","title":"#remove_keyboard"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove#selective","text":"View source","title":"#selective"},{"location":"api_reference/Tourmaline/SentWebAppMessage/","text":"class Tourmaline::SentWebAppMessage inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( inline_message_id : String ) # View source Methods # #inline_message_id : String # View source","title":"SentWebAppMessage"},{"location":"api_reference/Tourmaline/SentWebAppMessage/#Tourmaline::SentWebAppMessage","text":"","title":"SentWebAppMessage"},{"location":"api_reference/Tourmaline/SentWebAppMessage/#Tourmaline::SentWebAppMessage-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/SentWebAppMessage/#Tourmaline::SentWebAppMessage.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/SentWebAppMessage/#Tourmaline::SentWebAppMessage-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/SentWebAppMessage/#Tourmaline::SentWebAppMessage#inline_message_id","text":"View source","title":"#inline_message_id"},{"location":"api_reference/Tourmaline/Server/","text":"class Tourmaline::Server inherits Reference # The Server class is a basic webhook server for receiving updates from the Telegram API. Constructors # .new ( client : Tourmaline::Client ) # View source Methods # #serve ( host = \"127.0.0.1\" , port = 8081 , ssl_certificate_path = nil , ssl_key_path = nil , no_middleware_check = false , & block : HTTP :: Server :: Context -> ) # Start an HTTP server at the specified host and port that listens for updates using Telegram's webhooks. View source #serve ( path = \"/\" , host = \"127.0.0.1\" , port = 8081 , ssl_certificate_path = nil , ssl_key_path = nil , no_middleware_check = false ) # Start an HTTP server at the specified host and port that listens for updates using Telegram's webhooks. View source #stop_serving # Stops the webhook HTTP server View source","title":"Server"},{"location":"api_reference/Tourmaline/Server/#Tourmaline::Server","text":"The Server class is a basic webhook server for receiving updates from the Telegram API.","title":"Server"},{"location":"api_reference/Tourmaline/Server/#Tourmaline::Server-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Server/#Tourmaline::Server.new(client)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Server/#Tourmaline::Server-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Server/#Tourmaline::Server#serve(host,port,ssl_certificate_path,ssl_key_path,no_middleware_check,&)","text":"Start an HTTP server at the specified host and port that listens for updates using Telegram's webhooks. View source","title":"#serve"},{"location":"api_reference/Tourmaline/Server/#Tourmaline::Server#stop_serving","text":"Stops the webhook HTTP server View source","title":"#stop_serving"},{"location":"api_reference/Tourmaline/ShippingAddress/","text":"class Tourmaline::ShippingAddress inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #city : String # View source #country_code : String # View source #post_code : String # View source #state : String # View source #street_line1 : String # View source #street_line2 : String # View source","title":"ShippingAddress"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress","text":"","title":"ShippingAddress"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#city","text":"View source","title":"#city"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#country_code","text":"View source","title":"#country_code"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#post_code","text":"View source","title":"#post_code"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#state","text":"View source","title":"#state"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#street_line1","text":"View source","title":"#street_line1"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#street_line2","text":"View source","title":"#street_line2"},{"location":"api_reference/Tourmaline/ShippingOption/","text":"class Tourmaline::ShippingOption inherits Reference # Included modules JSON::Serializable Constructors # .new ( id : String , title : String , prices : Array ( LabeledPrice )) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #id : String # View source #prices : Array ( LabeledPrice ) # View source #title : String # View source","title":"ShippingOption"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption","text":"","title":"ShippingOption"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption.new(id,title,prices)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption#prices","text":"View source","title":"#prices"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/ShippingQuery/","text":"class Tourmaline::ShippingQuery inherits Reference # Included modules JSON::Serializable Constructors # .new ( id : Strig , from : User , invoice_payload : String , shipping_address : ShippingAddress ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #from : User # View source #id : String # View source #invoice_payload : String # View source #shipping_address : ShippingAddress # View source","title":"ShippingQuery"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery","text":"","title":"ShippingQuery"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery.new(id,from,invoice_payload,shipping_address)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery#from","text":"View source","title":"#from"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery#invoice_payload","text":"View source","title":"#invoice_payload"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery#shipping_address","text":"View source","title":"#shipping_address"},{"location":"api_reference/Tourmaline/Sticker/","text":"class Tourmaline::Sticker inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #animated? : Bool # View source #custom_emoji_id : String? # View source #emoji : String? # View source #file_id : String # View source #file_size : Int32? # View source #file_unique_id : String # View source #height : Int32 # View source #mask_position : MaskPosition? # View source #premium_animation : TFile? # View source #set_name : String? # View source #thumbnail : PhotoSize? # View source #type : Type # View source #video? : Bool # View source #width : Int32 # View source","title":"Sticker"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker","text":"","title":"Sticker"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#animated?","text":"View source","title":"#animated?"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#custom_emoji_id","text":"View source","title":"#custom_emoji_id"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#emoji","text":"View source","title":"#emoji"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#height","text":"View source","title":"#height"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#mask_position","text":"View source","title":"#mask_position"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#premium_animation","text":"View source","title":"#premium_animation"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#set_name","text":"View source","title":"#set_name"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#thumbnail","text":"View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#type","text":"View source","title":"#type"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#video?","text":"View source","title":"#video?"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#width","text":"View source","title":"#width"},{"location":"api_reference/Tourmaline/Sticker/Format/","text":"enum Tourmaline::Sticker::Format # Members # Static = 0 # Animated = 1 # Video = 2 # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #animated? # View source #static? # View source #to_json ( json : JSON :: Builder ) # Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source #video? # View source","title":"Format"},{"location":"api_reference/Tourmaline/Sticker/Format/#Tourmaline::Sticker::Format","text":"","title":"Format"},{"location":"api_reference/Tourmaline/Sticker/Format/#Tourmaline::Sticker::Format-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/Sticker/Format/#Tourmaline::Sticker::Format::Static","text":"","title":"Static"},{"location":"api_reference/Tourmaline/Sticker/Format/#Tourmaline::Sticker::Format::Animated","text":"","title":"Animated"},{"location":"api_reference/Tourmaline/Sticker/Format/#Tourmaline::Sticker::Format::Video","text":"","title":"Video"},{"location":"api_reference/Tourmaline/Sticker/Format/#Tourmaline::Sticker::Format-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Sticker/Format/#Tourmaline::Sticker::Format.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Sticker/Format/#Tourmaline::Sticker::Format-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Sticker/Format/#Tourmaline::Sticker::Format#animated?","text":"View source","title":"#animated?"},{"location":"api_reference/Tourmaline/Sticker/Format/#Tourmaline::Sticker::Format#static?","text":"View source","title":"#static?"},{"location":"api_reference/Tourmaline/Sticker/Format/#Tourmaline::Sticker::Format#to_json(json)","text":"Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source","title":"#to_json"},{"location":"api_reference/Tourmaline/Sticker/Format/#Tourmaline::Sticker::Format#video?","text":"View source","title":"#video?"},{"location":"api_reference/Tourmaline/Sticker/Type/","text":"enum Tourmaline::Sticker::Type # Members # Regular = 0 # Mask = 1 # CustomEmoji = 2 # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #custom_emoji? # View source #mask? # View source #regular? # View source #to_json ( json : JSON :: Builder ) # Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source","title":"Type"},{"location":"api_reference/Tourmaline/Sticker/Type/#Tourmaline::Sticker::Type","text":"","title":"Type"},{"location":"api_reference/Tourmaline/Sticker/Type/#Tourmaline::Sticker::Type-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/Sticker/Type/#Tourmaline::Sticker::Type::Regular","text":"","title":"Regular"},{"location":"api_reference/Tourmaline/Sticker/Type/#Tourmaline::Sticker::Type::Mask","text":"","title":"Mask"},{"location":"api_reference/Tourmaline/Sticker/Type/#Tourmaline::Sticker::Type::CustomEmoji","text":"","title":"CustomEmoji"},{"location":"api_reference/Tourmaline/Sticker/Type/#Tourmaline::Sticker::Type-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Sticker/Type/#Tourmaline::Sticker::Type.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Sticker/Type/#Tourmaline::Sticker::Type-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Sticker/Type/#Tourmaline::Sticker::Type#custom_emoji?","text":"View source","title":"#custom_emoji?"},{"location":"api_reference/Tourmaline/Sticker/Type/#Tourmaline::Sticker::Type#mask?","text":"View source","title":"#mask?"},{"location":"api_reference/Tourmaline/Sticker/Type/#Tourmaline::Sticker::Type#regular?","text":"View source","title":"#regular?"},{"location":"api_reference/Tourmaline/Sticker/Type/#Tourmaline::Sticker::Type#to_json(json)","text":"Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source","title":"#to_json"},{"location":"api_reference/Tourmaline/StickerSet/","text":"class Tourmaline::StickerSet inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #animated? : Bool # View source #name : String # View source #sticker_type : Sticker::Type # View source #stickers : Array ( Sticker ) # View source #thumbnail : PhotoSize? # View source #title : String # View source #video? : Bool # View source","title":"StickerSet"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet","text":"","title":"StickerSet"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#animated?","text":"View source","title":"#animated?"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#name","text":"View source","title":"#name"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#sticker_type","text":"View source","title":"#sticker_type"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#stickers","text":"View source","title":"#stickers"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#thumbnail","text":"View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#video?","text":"View source","title":"#video?"},{"location":"api_reference/Tourmaline/SuccessfulPayment/","text":"class Tourmaline::SuccessfulPayment inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #currency : String # View source #invoice_payload : String # View source #order_info : OrderInfo? # View source #provider_payment_charge_id : String # View source #shipping_option_id : String? # View source #telegram_payment_charge_id : String # View source #total_amount : Int32 # View source","title":"SuccessfulPayment"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment","text":"","title":"SuccessfulPayment"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#currency","text":"View source","title":"#currency"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#invoice_payload","text":"View source","title":"#invoice_payload"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#order_info","text":"View source","title":"#order_info"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#provider_payment_charge_id","text":"View source","title":"#provider_payment_charge_id"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#shipping_option_id","text":"View source","title":"#shipping_option_id"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#telegram_payment_charge_id","text":"View source","title":"#telegram_payment_charge_id"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#total_amount","text":"View source","title":"#total_amount"},{"location":"api_reference/Tourmaline/TFile/","text":"class Tourmaline::TFile inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #file_id : String # View source #file_path : String? # View source #file_size : Int64? # View source #file_unique_id : String # View source #link # View source","title":"TFile"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile","text":"","title":"TFile"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile#file_path","text":"View source","title":"#file_path"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/TFile/#Tourmaline::TFile#link","text":"View source","title":"#link"},{"location":"api_reference/Tourmaline/Update/","text":"class Tourmaline::Update inherits Reference # This object represents a Telegram user or bot. # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #animation? # View source #anonymous_admin_message? # View source #audio? # View source #basketball? # View source #bold_entity? # View source #bot_command_entity? # View source #bot_message? # View source #bowling? # View source #callback_query : CallbackQuery? # Optional. New incoming callback query View source #callback_query? # View source #caption? # View source #cashtag_entity? # View source #channel_chat_created? # View source #channel_forward_message? # View source #channel_message? # View source #channel_post : Message? # Optional. New incoming channel post of any kind \u2014 text, photo, sticker, etc. View source #channel_post? # View source #chat_join_request : ChatJoinRequest? # Optional. A request to join the chat has been sent. The bot must have the can_invite_users administrator right in the chat to receive these updates. View source #chat_member : ChatMemberUpdated? # Optional. A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify \u201cchat_member\u201d in the list of allowed_updates to receive these updates. View source #chat_member? # View source #chats ( & block : Chat -> ) # Yields each unique chat in this update to the block. View source #chats # Returns all unique chats included in this update View source #chosen_inline_result : ChosenInlineResult? # Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot. View source #chosen_inline_result? # View source #code_entity? # View source #connected_website? # View source #contact? # View source #dart? # View source #delete_chat_photo? # View source #dice? # View source #document? # View source #edited_channel_post : Message? # Optional. New version of a channel post that is known to the bot and was edited View source #edited_channel_post? # View source #edited_message : Message? # Optional. New version of a message that is known to the bot and was edited View source #edited_message? # View source #email_entity? # View source #football? # View source #forum_topic_closed? # View source #forum_topic_created? # View source #forum_topic_reopened? # View source #forwarded_message? # View source #game? # View source #group_chat_created? # View source #hashtag_entity? # View source #inline_query : InlineQuery? # Optional. New incoming inline query View source #inline_query? # View source #invoice? # View source #italic_entity? # View source #left_chat_member? # View source #location? # View source #media_group? # View source #mention_entity? # View source #message : Message? # Optional. New incoming message of any kind \u2014 text, photo, sticker, etc. View source #message? # View source #message_auto_delete_timer_changed? # View source #migrate_from_chat_id? # View source #migrate_to_chat_id? # View source #my_chat_member : ChatMemberUpdated? # Optional. The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user. View source #my_chat_member? # View source #new_chat_members? # View source #new_chat_photo? # View source #new_chat_title? # View source #passport_data? # View source #phone_number_entity? # View source #photo? # View source #pinned_message? # View source #poll : Poll? # Optional. New poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot View source #poll? # View source #poll_answer : PollAnswer? # Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself. View source #poll_answer? # View source #pre_checkout_query : PreCheckoutQuery? # Optional. New incoming pre-checkout query. Contains full information about checkout View source #pre_checkout_query? # View source #pre_entity? # View source #proximity_alert_triggered? # View source #reply_markup? # View source #reply_message? # View source #shipping_query : ShippingQuery? # Optional. New incoming shipping query. Only for invoices with flexible price View source #shipping_query? # View source #slot_machine? # View source #soccerball? # View source #spoiler_entity? # View source #sticker? # View source #strikethrough_entity? # View source #successful_payment? # View source #supergroup_chat_created? # View source #text? # View source #text_link_entity? # View source #text_mention_entity? # View source #thread_message? # View source #underline_entity? # View source #update? # View source #update_actions : Array ( UpdateAction ) # View source #update_id : Int64 # The update\u2018s unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you\u2019re using Webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially. View source #url_entity? # View source #user_message? # View source #users # Returns all users included in this update as a Set View source #users ( & block : User -> ) # Yields each unique user in this update to the block. View source #venue? # View source #via_bot? # View source #video? # View source #video_chat_ended? # View source #video_chat_participants_invited? # View source #video_chat_scheduled? # View source #video_chat_started? # View source #video_note? # View source #voice? # View source #web_app_data? # View source","title":"Update"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update","text":"","title":"Update"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update--this-object-represents-a-telegram-user-or-bot","text":"","title":"This object represents a Telegram user or bot."},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#animation?","text":"View source","title":"#animation?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#anonymous_admin_message?","text":"View source","title":"#anonymous_admin_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#audio?","text":"View source","title":"#audio?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#basketball?","text":"View source","title":"#basketball?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#bold_entity?","text":"View source","title":"#bold_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#bot_command_entity?","text":"View source","title":"#bot_command_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#bot_message?","text":"View source","title":"#bot_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#bowling?","text":"View source","title":"#bowling?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#callback_query","text":"Optional. New incoming callback query View source","title":"#callback_query"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#callback_query?","text":"View source","title":"#callback_query?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#caption?","text":"View source","title":"#caption?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#cashtag_entity?","text":"View source","title":"#cashtag_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#channel_chat_created?","text":"View source","title":"#channel_chat_created?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#channel_forward_message?","text":"View source","title":"#channel_forward_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#channel_message?","text":"View source","title":"#channel_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#channel_post","text":"Optional. New incoming channel post of any kind \u2014 text, photo, sticker, etc. View source","title":"#channel_post"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#channel_post?","text":"View source","title":"#channel_post?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chat_join_request","text":"Optional. A request to join the chat has been sent. The bot must have the can_invite_users administrator right in the chat to receive these updates. View source","title":"#chat_join_request"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chat_member","text":"Optional. A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify \u201cchat_member\u201d in the list of allowed_updates to receive these updates. View source","title":"#chat_member"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chat_member?","text":"View source","title":"#chat_member?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chats(&)","text":"Yields each unique chat in this update to the block. View source","title":"#chats"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chosen_inline_result","text":"Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot. View source","title":"#chosen_inline_result"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chosen_inline_result?","text":"View source","title":"#chosen_inline_result?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#code_entity?","text":"View source","title":"#code_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#connected_website?","text":"View source","title":"#connected_website?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#contact?","text":"View source","title":"#contact?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#dart?","text":"View source","title":"#dart?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#delete_chat_photo?","text":"View source","title":"#delete_chat_photo?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#dice?","text":"View source","title":"#dice?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#document?","text":"View source","title":"#document?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#edited_channel_post","text":"Optional. New version of a channel post that is known to the bot and was edited View source","title":"#edited_channel_post"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#edited_channel_post?","text":"View source","title":"#edited_channel_post?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#edited_message","text":"Optional. New version of a message that is known to the bot and was edited View source","title":"#edited_message"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#edited_message?","text":"View source","title":"#edited_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#email_entity?","text":"View source","title":"#email_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#football?","text":"View source","title":"#football?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#forum_topic_closed?","text":"View source","title":"#forum_topic_closed?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#forum_topic_created?","text":"View source","title":"#forum_topic_created?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#forum_topic_reopened?","text":"View source","title":"#forum_topic_reopened?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#forwarded_message?","text":"View source","title":"#forwarded_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#game?","text":"View source","title":"#game?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#group_chat_created?","text":"View source","title":"#group_chat_created?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#hashtag_entity?","text":"View source","title":"#hashtag_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#inline_query","text":"Optional. New incoming inline query View source","title":"#inline_query"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#inline_query?","text":"View source","title":"#inline_query?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#invoice?","text":"View source","title":"#invoice?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#italic_entity?","text":"View source","title":"#italic_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#left_chat_member?","text":"View source","title":"#left_chat_member?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#location?","text":"View source","title":"#location?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#media_group?","text":"View source","title":"#media_group?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#mention_entity?","text":"View source","title":"#mention_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#message","text":"Optional. New incoming message of any kind \u2014 text, photo, sticker, etc. View source","title":"#message"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#message?","text":"View source","title":"#message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#message_auto_delete_timer_changed?","text":"View source","title":"#message_auto_delete_timer_changed?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#migrate_from_chat_id?","text":"View source","title":"#migrate_from_chat_id?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#migrate_to_chat_id?","text":"View source","title":"#migrate_to_chat_id?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#my_chat_member","text":"Optional. The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user. View source","title":"#my_chat_member"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#my_chat_member?","text":"View source","title":"#my_chat_member?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#new_chat_members?","text":"View source","title":"#new_chat_members?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#new_chat_photo?","text":"View source","title":"#new_chat_photo?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#new_chat_title?","text":"View source","title":"#new_chat_title?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#passport_data?","text":"View source","title":"#passport_data?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#phone_number_entity?","text":"View source","title":"#phone_number_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#photo?","text":"View source","title":"#photo?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#pinned_message?","text":"View source","title":"#pinned_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#poll","text":"Optional. New poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot View source","title":"#poll"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#poll?","text":"View source","title":"#poll?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#poll_answer","text":"Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself. View source","title":"#poll_answer"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#poll_answer?","text":"View source","title":"#poll_answer?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#pre_checkout_query","text":"Optional. New incoming pre-checkout query. Contains full information about checkout View source","title":"#pre_checkout_query"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#pre_checkout_query?","text":"View source","title":"#pre_checkout_query?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#pre_entity?","text":"View source","title":"#pre_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#proximity_alert_triggered?","text":"View source","title":"#proximity_alert_triggered?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#reply_markup?","text":"View source","title":"#reply_markup?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#reply_message?","text":"View source","title":"#reply_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#shipping_query","text":"Optional. New incoming shipping query. Only for invoices with flexible price View source","title":"#shipping_query"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#shipping_query?","text":"View source","title":"#shipping_query?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#slot_machine?","text":"View source","title":"#slot_machine?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#soccerball?","text":"View source","title":"#soccerball?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#spoiler_entity?","text":"View source","title":"#spoiler_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#sticker?","text":"View source","title":"#sticker?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#strikethrough_entity?","text":"View source","title":"#strikethrough_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#successful_payment?","text":"View source","title":"#successful_payment?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#supergroup_chat_created?","text":"View source","title":"#supergroup_chat_created?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#text?","text":"View source","title":"#text?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#text_link_entity?","text":"View source","title":"#text_link_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#text_mention_entity?","text":"View source","title":"#text_mention_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#thread_message?","text":"View source","title":"#thread_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#underline_entity?","text":"View source","title":"#underline_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#update?","text":"View source","title":"#update?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#update_actions","text":"View source","title":"#update_actions"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#update_id","text":"The update\u2018s unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you\u2019re using Webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially. View source","title":"#update_id"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#url_entity?","text":"View source","title":"#url_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#user_message?","text":"View source","title":"#user_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#users","text":"Returns all users included in this update as a Set View source","title":"#users"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#venue?","text":"View source","title":"#venue?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#via_bot?","text":"View source","title":"#via_bot?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#video?","text":"View source","title":"#video?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#video_chat_ended?","text":"View source","title":"#video_chat_ended?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#video_chat_participants_invited?","text":"View source","title":"#video_chat_participants_invited?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#video_chat_scheduled?","text":"View source","title":"#video_chat_scheduled?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#video_chat_started?","text":"View source","title":"#video_chat_started?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#video_note?","text":"View source","title":"#video_note?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#voice?","text":"View source","title":"#voice?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#web_app_data?","text":"View source","title":"#web_app_data?"},{"location":"api_reference/Tourmaline/UpdateAction/","text":"enum Tourmaline::UpdateAction # The available event types for EventHandler . Members # Update = 0 # Message = 1 # ThreadMessage = 2 # ReplyMessage = 3 # EditedMessage = 4 # ForwardedMessage = 5 # CallbackQuery = 6 # InlineQuery = 7 # ShippingQuery = 8 # PreCheckoutQuery = 9 # ChosenInlineResult = 10 # ChannelPost = 11 # EditedChannelPost = 12 # MyChatMember = 13 # ChatMember = 14 # ViaBot = 15 # Text = 16 # Caption = 17 # Animation = 18 # Audio = 19 # Document = 20 # Photo = 21 # Sticker = 22 # Video = 23 # Voice = 24 # Contact = 25 # Location = 26 # Venue = 27 # MediaGroup = 28 # NewChatMembers = 29 # LeftChatMember = 30 # NewChatTitle = 31 # NewChatPhoto = 32 # DeleteChatPhoto = 33 # GroupChatCreated = 34 # MessageAutoDeleteTimerChanged = 35 # MigrateToChatId = 36 # SupergroupChatCreated = 37 # ChannelChatCreated = 38 # MigrateFromChatId = 39 # PinnedMessage = 40 # Game = 41 # Poll = 42 # VideoNote = 43 # Invoice = 44 # SuccessfulPayment = 45 # ConnectedWebsite = 46 # PassportData = 47 # PollAnswer = 48 # ProximityAlertTriggered = 49 # ForumTopicCreated = 50 # ForumTopicClosed = 51 # ForumTopicReopened = 52 # VideoChatScheduled = 53 # VideoChatStarted = 54 # VideoChatEnded = 55 # VideoChatParticipantsInvited = 56 # WebAppData = 57 # ReplyMarkup = 58 # Dice = 59 # Dart = 60 # \ud83c\udfb2 Basketball = 61 # \ud83c\udfaf Football = 62 # \ud83c\udfc0 Soccerball = 63 # \u26bd\ufe0f SlotMachine = 64 # \u26bd\ufe0f but American Bowling = 65 # \ud83c\udfb0 BotMessage = 66 # UserMessage = 67 # ChannelMessage = 68 # ChannelForwardMessage = 69 # AnonymousAdminMessage = 70 # MentionEntity = 71 # TextMentionEntity = 72 # HashtagEntity = 73 # CashtagEntity = 74 # BotCommandEntity = 75 # UrlEntity = 76 # EmailEntity = 77 # PhoneNumberEntity = 78 # BoldEntity = 79 # ItalicEntity = 80 # CodeEntity = 81 # PreEntity = 82 # TextLinkEntity = 83 # UnderlineEntity = 84 # StrikethroughEntity = 85 # SpoilerEntity = 86 # Class methods # .from_update ( update : Tourmaline::Update ) # Takes an Update and returns an array of update actions. View source .to_a # View source Methods # #animation? # View source #anonymous_admin_message? # View source #audio? # View source #basketball? # View source #bold_entity? # View source #bot_command_entity? # View source #bot_message? # View source #bowling? # View source #callback_query? # View source #caption? # View source #cashtag_entity? # View source #channel_chat_created? # View source #channel_forward_message? # View source #channel_message? # View source #channel_post? # View source #chat_member? # View source #chosen_inline_result? # View source #code_entity? # View source #connected_website? # View source #contact? # View source #dart? # View source #delete_chat_photo? # View source #dice? # View source #document? # View source #edited_channel_post? # View source #edited_message? # View source #email_entity? # View source #football? # View source #forum_topic_closed? # View source #forum_topic_created? # View source #forum_topic_reopened? # View source #forwarded_message? # View source #game? # View source #group_chat_created? # View source #hashtag_entity? # View source #inline_query? # View source #invoice? # View source #italic_entity? # View source #left_chat_member? # View source #location? # View source #media_group? # View source #mention_entity? # View source #message? # View source #message_auto_delete_timer_changed? # View source #migrate_from_chat_id? # View source #migrate_to_chat_id? # View source #my_chat_member? # View source #new_chat_members? # View source #new_chat_photo? # View source #new_chat_title? # View source #passport_data? # View source #phone_number_entity? # View source #photo? # View source #pinned_message? # View source #poll? # View source #poll_answer? # View source #pre_checkout_query? # View source #pre_entity? # View source #proximity_alert_triggered? # View source #reply_markup? # View source #reply_message? # View source #shipping_query? # View source #slot_machine? # View source #soccerball? # View source #spoiler_entity? # View source #sticker? # View source #strikethrough_entity? # View source #successful_payment? # View source #supergroup_chat_created? # View source #text? # View source #text_link_entity? # View source #text_mention_entity? # View source #thread_message? # View source #to_s # Returns a String representation of this enum member. In the case of regular enums, this is just the name of the member. In the case of flag enums, it's the names joined by vertical bars, or \"None\", if the value is zero. If an enum's value doesn't match a member's value, the raw value is returned as a string. Color :: Red . to_s # => \"Red\" IOMode :: None . to_s # => \"None\" ( IOMode :: Read | IOMode :: Write ) . to_s # => \"Read | Write\" Color . new ( 10 ) . to_s # => \"10\" View source #underline_entity? # View source #update? # View source #url_entity? # View source #user_message? # View source #venue? # View source #via_bot? # View source #video? # View source #video_chat_ended? # View source #video_chat_participants_invited? # View source #video_chat_scheduled? # View source #video_chat_started? # View source #video_note? # View source #voice? # View source #web_app_data? # View source","title":"UpdateAction"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction","text":"The available event types for EventHandler .","title":"UpdateAction"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Update","text":"","title":"Update"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Message","text":"","title":"Message"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ThreadMessage","text":"","title":"ThreadMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ReplyMessage","text":"","title":"ReplyMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::EditedMessage","text":"","title":"EditedMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ForwardedMessage","text":"","title":"ForwardedMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::CallbackQuery","text":"","title":"CallbackQuery"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::InlineQuery","text":"","title":"InlineQuery"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ShippingQuery","text":"","title":"ShippingQuery"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PreCheckoutQuery","text":"","title":"PreCheckoutQuery"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChosenInlineResult","text":"","title":"ChosenInlineResult"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChannelPost","text":"","title":"ChannelPost"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::EditedChannelPost","text":"","title":"EditedChannelPost"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::MyChatMember","text":"","title":"MyChatMember"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChatMember","text":"","title":"ChatMember"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ViaBot","text":"","title":"ViaBot"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Text","text":"","title":"Text"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Caption","text":"","title":"Caption"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Animation","text":"","title":"Animation"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Audio","text":"","title":"Audio"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Document","text":"","title":"Document"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Photo","text":"","title":"Photo"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Sticker","text":"","title":"Sticker"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Video","text":"","title":"Video"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Voice","text":"","title":"Voice"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Contact","text":"","title":"Contact"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Location","text":"","title":"Location"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Venue","text":"","title":"Venue"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::MediaGroup","text":"","title":"MediaGroup"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::NewChatMembers","text":"","title":"NewChatMembers"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::LeftChatMember","text":"","title":"LeftChatMember"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::NewChatTitle","text":"","title":"NewChatTitle"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::NewChatPhoto","text":"","title":"NewChatPhoto"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::DeleteChatPhoto","text":"","title":"DeleteChatPhoto"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::GroupChatCreated","text":"","title":"GroupChatCreated"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::MessageAutoDeleteTimerChanged","text":"","title":"MessageAutoDeleteTimerChanged"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::MigrateToChatId","text":"","title":"MigrateToChatId"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::SupergroupChatCreated","text":"","title":"SupergroupChatCreated"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChannelChatCreated","text":"","title":"ChannelChatCreated"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::MigrateFromChatId","text":"","title":"MigrateFromChatId"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PinnedMessage","text":"","title":"PinnedMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Game","text":"","title":"Game"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Poll","text":"","title":"Poll"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::VideoNote","text":"","title":"VideoNote"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Invoice","text":"","title":"Invoice"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::SuccessfulPayment","text":"","title":"SuccessfulPayment"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ConnectedWebsite","text":"","title":"ConnectedWebsite"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PassportData","text":"","title":"PassportData"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PollAnswer","text":"","title":"PollAnswer"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ProximityAlertTriggered","text":"","title":"ProximityAlertTriggered"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ForumTopicCreated","text":"","title":"ForumTopicCreated"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ForumTopicClosed","text":"","title":"ForumTopicClosed"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ForumTopicReopened","text":"","title":"ForumTopicReopened"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::VideoChatScheduled","text":"","title":"VideoChatScheduled"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::VideoChatStarted","text":"","title":"VideoChatStarted"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::VideoChatEnded","text":"","title":"VideoChatEnded"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::VideoChatParticipantsInvited","text":"","title":"VideoChatParticipantsInvited"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::WebAppData","text":"","title":"WebAppData"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ReplyMarkup","text":"","title":"ReplyMarkup"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Dice","text":"","title":"Dice"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Dart","text":"\ud83c\udfb2","title":"Dart"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Basketball","text":"\ud83c\udfaf","title":"Basketball"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Football","text":"\ud83c\udfc0","title":"Football"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Soccerball","text":"\u26bd\ufe0f","title":"Soccerball"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::SlotMachine","text":"\u26bd\ufe0f but American","title":"SlotMachine"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Bowling","text":"\ud83c\udfb0","title":"Bowling"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::BotMessage","text":"","title":"BotMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::UserMessage","text":"","title":"UserMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChannelMessage","text":"","title":"ChannelMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChannelForwardMessage","text":"","title":"ChannelForwardMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::AnonymousAdminMessage","text":"","title":"AnonymousAdminMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::MentionEntity","text":"","title":"MentionEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::TextMentionEntity","text":"","title":"TextMentionEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::HashtagEntity","text":"","title":"HashtagEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::CashtagEntity","text":"","title":"CashtagEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::BotCommandEntity","text":"","title":"BotCommandEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::UrlEntity","text":"","title":"UrlEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::EmailEntity","text":"","title":"EmailEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PhoneNumberEntity","text":"","title":"PhoneNumberEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::BoldEntity","text":"","title":"BoldEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ItalicEntity","text":"","title":"ItalicEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::CodeEntity","text":"","title":"CodeEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PreEntity","text":"","title":"PreEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::TextLinkEntity","text":"","title":"TextLinkEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::UnderlineEntity","text":"","title":"UnderlineEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::StrikethroughEntity","text":"","title":"StrikethroughEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::SpoilerEntity","text":"","title":"SpoilerEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction.from_update(update)","text":"Takes an Update and returns an array of update actions. View source","title":".from_update"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction.to_a","text":"View source","title":".to_a"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#animation?","text":"View source","title":"#animation?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#anonymous_admin_message?","text":"View source","title":"#anonymous_admin_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#audio?","text":"View source","title":"#audio?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#basketball?","text":"View source","title":"#basketball?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#bold_entity?","text":"View source","title":"#bold_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#bot_command_entity?","text":"View source","title":"#bot_command_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#bot_message?","text":"View source","title":"#bot_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#bowling?","text":"View source","title":"#bowling?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#callback_query?","text":"View source","title":"#callback_query?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#caption?","text":"View source","title":"#caption?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#cashtag_entity?","text":"View source","title":"#cashtag_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#channel_chat_created?","text":"View source","title":"#channel_chat_created?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#channel_forward_message?","text":"View source","title":"#channel_forward_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#channel_message?","text":"View source","title":"#channel_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#channel_post?","text":"View source","title":"#channel_post?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#chat_member?","text":"View source","title":"#chat_member?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#chosen_inline_result?","text":"View source","title":"#chosen_inline_result?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#code_entity?","text":"View source","title":"#code_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#connected_website?","text":"View source","title":"#connected_website?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#contact?","text":"View source","title":"#contact?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#dart?","text":"View source","title":"#dart?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#delete_chat_photo?","text":"View source","title":"#delete_chat_photo?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#dice?","text":"View source","title":"#dice?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#document?","text":"View source","title":"#document?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#edited_channel_post?","text":"View source","title":"#edited_channel_post?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#edited_message?","text":"View source","title":"#edited_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#email_entity?","text":"View source","title":"#email_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#football?","text":"View source","title":"#football?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#forum_topic_closed?","text":"View source","title":"#forum_topic_closed?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#forum_topic_created?","text":"View source","title":"#forum_topic_created?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#forum_topic_reopened?","text":"View source","title":"#forum_topic_reopened?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#forwarded_message?","text":"View source","title":"#forwarded_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#game?","text":"View source","title":"#game?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#group_chat_created?","text":"View source","title":"#group_chat_created?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#hashtag_entity?","text":"View source","title":"#hashtag_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#inline_query?","text":"View source","title":"#inline_query?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#invoice?","text":"View source","title":"#invoice?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#italic_entity?","text":"View source","title":"#italic_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#left_chat_member?","text":"View source","title":"#left_chat_member?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#location?","text":"View source","title":"#location?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#media_group?","text":"View source","title":"#media_group?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#mention_entity?","text":"View source","title":"#mention_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#message?","text":"View source","title":"#message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#message_auto_delete_timer_changed?","text":"View source","title":"#message_auto_delete_timer_changed?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#migrate_from_chat_id?","text":"View source","title":"#migrate_from_chat_id?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#migrate_to_chat_id?","text":"View source","title":"#migrate_to_chat_id?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#my_chat_member?","text":"View source","title":"#my_chat_member?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#new_chat_members?","text":"View source","title":"#new_chat_members?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#new_chat_photo?","text":"View source","title":"#new_chat_photo?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#new_chat_title?","text":"View source","title":"#new_chat_title?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#passport_data?","text":"View source","title":"#passport_data?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#phone_number_entity?","text":"View source","title":"#phone_number_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#photo?","text":"View source","title":"#photo?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#pinned_message?","text":"View source","title":"#pinned_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#poll?","text":"View source","title":"#poll?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#poll_answer?","text":"View source","title":"#poll_answer?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#pre_checkout_query?","text":"View source","title":"#pre_checkout_query?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#pre_entity?","text":"View source","title":"#pre_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#proximity_alert_triggered?","text":"View source","title":"#proximity_alert_triggered?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#reply_markup?","text":"View source","title":"#reply_markup?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#reply_message?","text":"View source","title":"#reply_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#shipping_query?","text":"View source","title":"#shipping_query?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#slot_machine?","text":"View source","title":"#slot_machine?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#soccerball?","text":"View source","title":"#soccerball?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#spoiler_entity?","text":"View source","title":"#spoiler_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#sticker?","text":"View source","title":"#sticker?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#strikethrough_entity?","text":"View source","title":"#strikethrough_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#successful_payment?","text":"View source","title":"#successful_payment?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#supergroup_chat_created?","text":"View source","title":"#supergroup_chat_created?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#text?","text":"View source","title":"#text?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#text_link_entity?","text":"View source","title":"#text_link_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#text_mention_entity?","text":"View source","title":"#text_mention_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#thread_message?","text":"View source","title":"#thread_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#to_s","text":"Returns a String representation of this enum member. In the case of regular enums, this is just the name of the member. In the case of flag enums, it's the names joined by vertical bars, or \"None\", if the value is zero. If an enum's value doesn't match a member's value, the raw value is returned as a string. Color :: Red . to_s # => \"Red\" IOMode :: None . to_s # => \"None\" ( IOMode :: Read | IOMode :: Write ) . to_s # => \"Read | Write\" Color . new ( 10 ) . to_s # => \"10\" View source","title":"#to_s"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#underline_entity?","text":"View source","title":"#underline_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#update?","text":"View source","title":"#update?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#url_entity?","text":"View source","title":"#url_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#user_message?","text":"View source","title":"#user_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#venue?","text":"View source","title":"#venue?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#via_bot?","text":"View source","title":"#via_bot?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#video?","text":"View source","title":"#video?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#video_chat_ended?","text":"View source","title":"#video_chat_ended?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#video_chat_participants_invited?","text":"View source","title":"#video_chat_participants_invited?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#video_chat_scheduled?","text":"View source","title":"#video_chat_scheduled?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#video_chat_started?","text":"View source","title":"#video_chat_started?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#video_note?","text":"View source","title":"#video_note?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#voice?","text":"View source","title":"#voice?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#web_app_data?","text":"View source","title":"#web_app_data?"},{"location":"api_reference/Tourmaline/User/","text":"class Tourmaline::User inherits Reference # This object represents a Telegram user or bot. # Included modules JSON::Serializable Constructors # .new ( id : Int64 , bot : Bool , first_name : String , last_name : String? = nil , language_code : String? = nil , can_join_groups : Bool? = nil , can_read_all_group_messages : Bool? = nil , supports_inline_queries : Bool? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #added_to_attachment_menu? : Bool? # View source #bot? : Bool # View source #can_join_groups? : Bool? # View source #can_read_all_group_messages? : Bool? # View source #first_name : String # View source #full_name # View source #id : Int64 # View source #inline_mention ( name ) # View source #language_code : String? # View source #last_name : String? # View source #premium? : Bool? # View source #scam? : Bool? # View source #supports_inline_queries? : Bool? # View source #username : String? # View source #verified? : Bool? # View source","title":"User"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User","text":"","title":"User"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User--this-object-represents-a-telegram-user-or-bot","text":"","title":"This object represents a Telegram user or bot."},{"location":"api_reference/Tourmaline/User/#Tourmaline::User-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User.new(id,bot,first_name,last_name,language_code,can_join_groups,can_read_all_group_messages,supports_inline_queries)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#added_to_attachment_menu?","text":"View source","title":"#added_to_attachment_menu?"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#bot?","text":"View source","title":"#bot?"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#can_join_groups?","text":"View source","title":"#can_join_groups?"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#can_read_all_group_messages?","text":"View source","title":"#can_read_all_group_messages?"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#first_name","text":"View source","title":"#first_name"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#full_name","text":"View source","title":"#full_name"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#id","text":"View source","title":"#id"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#inline_mention(name)","text":"View source","title":"#inline_mention"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#language_code","text":"View source","title":"#language_code"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#last_name","text":"View source","title":"#last_name"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#premium?","text":"View source","title":"#premium?"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#scam?","text":"View source","title":"#scam?"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#supports_inline_queries?","text":"View source","title":"#supports_inline_queries?"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#username","text":"View source","title":"#username"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#verified?","text":"View source","title":"#verified?"},{"location":"api_reference/Tourmaline/UserProfilePhotos/","text":"class Tourmaline::UserProfilePhotos inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #photos : Array ( Array ( PhotoSize )) # View source #total_count : Int32 # View source","title":"UserProfilePhotos"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos","text":"","title":"UserProfilePhotos"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos#photos","text":"View source","title":"#photos"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos#total_count","text":"View source","title":"#total_count"},{"location":"api_reference/Tourmaline/Venue/","text":"class Tourmaline::Venue inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #address : String # View source #foursquare_id : String? # View source #foursquare_type : String? # View source #google_place_id : String? # View source #google_place_type : String? # View source #location : Location # View source #title : String # View source","title":"Venue"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue","text":"","title":"Venue"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#address","text":"View source","title":"#address"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#foursquare_id","text":"View source","title":"#foursquare_id"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#foursquare_type","text":"View source","title":"#foursquare_type"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#google_place_id","text":"View source","title":"#google_place_id"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#google_place_type","text":"View source","title":"#google_place_type"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#location","text":"View source","title":"#location"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#title","text":"View source","title":"#title"},{"location":"api_reference/Tourmaline/Video/","text":"class Tourmaline::Video inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #duration : Int32 # View source #file_id : String # View source #file_name : String? # View source #file_size : Int64? # View source #file_unique_id : String # View source #height : Int32 # View source #mime_type : String? # View source #thumbnail : PhotoSize? # View source #width : Int32 # View source","title":"Video"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video","text":"","title":"Video"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#duration","text":"View source","title":"#duration"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#file_name","text":"View source","title":"#file_name"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#height","text":"View source","title":"#height"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#mime_type","text":"View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#thumbnail","text":"View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#width","text":"View source","title":"#width"},{"location":"api_reference/Tourmaline/VideoChatEnded/","text":"class Tourmaline::VideoChatEnded inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #duration : Int32 # View source","title":"VideoChatEnded"},{"location":"api_reference/Tourmaline/VideoChatEnded/#Tourmaline::VideoChatEnded","text":"","title":"VideoChatEnded"},{"location":"api_reference/Tourmaline/VideoChatEnded/#Tourmaline::VideoChatEnded-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/VideoChatEnded/#Tourmaline::VideoChatEnded.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/VideoChatEnded/#Tourmaline::VideoChatEnded-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/VideoChatEnded/#Tourmaline::VideoChatEnded#duration","text":"View source","title":"#duration"},{"location":"api_reference/Tourmaline/VideoChatParticipantsInvited/","text":"class Tourmaline::VideoChatParticipantsInvited inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #users : Array ( User ) # View source","title":"VideoChatParticipantsInvited"},{"location":"api_reference/Tourmaline/VideoChatParticipantsInvited/#Tourmaline::VideoChatParticipantsInvited","text":"","title":"VideoChatParticipantsInvited"},{"location":"api_reference/Tourmaline/VideoChatParticipantsInvited/#Tourmaline::VideoChatParticipantsInvited-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/VideoChatParticipantsInvited/#Tourmaline::VideoChatParticipantsInvited.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/VideoChatParticipantsInvited/#Tourmaline::VideoChatParticipantsInvited-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/VideoChatParticipantsInvited/#Tourmaline::VideoChatParticipantsInvited#users","text":"View source","title":"#users"},{"location":"api_reference/Tourmaline/VideoChatScheduled/","text":"class Tourmaline::VideoChatScheduled inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #start_date : Time # View source","title":"VideoChatScheduled"},{"location":"api_reference/Tourmaline/VideoChatScheduled/#Tourmaline::VideoChatScheduled","text":"","title":"VideoChatScheduled"},{"location":"api_reference/Tourmaline/VideoChatScheduled/#Tourmaline::VideoChatScheduled-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/VideoChatScheduled/#Tourmaline::VideoChatScheduled.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/VideoChatScheduled/#Tourmaline::VideoChatScheduled-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/VideoChatScheduled/#Tourmaline::VideoChatScheduled#start_date","text":"View source","title":"#start_date"},{"location":"api_reference/Tourmaline/VideoChatStarted/","text":"class Tourmaline::VideoChatStarted inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source","title":"VideoChatStarted"},{"location":"api_reference/Tourmaline/VideoChatStarted/#Tourmaline::VideoChatStarted","text":"","title":"VideoChatStarted"},{"location":"api_reference/Tourmaline/VideoChatStarted/#Tourmaline::VideoChatStarted-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/VideoChatStarted/#Tourmaline::VideoChatStarted.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/VideoNote/","text":"class Tourmaline::VideoNote inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #duration : Int32 # View source #file_id : String # View source #file_size : Int32? # View source #file_unique_id : String # View source #length : Int32 # View source #thumbnail : PhotoSize? # View source","title":"VideoNote"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote","text":"","title":"VideoNote"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#duration","text":"View source","title":"#duration"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#length","text":"View source","title":"#length"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#thumbnail","text":"View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/Voice/","text":"class Tourmaline::Voice inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #duration : Int32 # View source #file_id : String # View source #file_size : Int64? # View source #file_unique_id : String # View source #mime_type : String? # View source","title":"Voice"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice","text":"","title":"Voice"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#duration","text":"View source","title":"#duration"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#file_id","text":"View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#file_size","text":"View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#file_unique_id","text":"View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#mime_type","text":"View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/WebAppData/","text":"class Tourmaline::WebAppData inherits Reference # Included modules JSON::Serializable Constructors # .new ( data : String , button_text : String ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #button_text : String # View source #data : String # View source","title":"WebAppData"},{"location":"api_reference/Tourmaline/WebAppData/#Tourmaline::WebAppData","text":"","title":"WebAppData"},{"location":"api_reference/Tourmaline/WebAppData/#Tourmaline::WebAppData-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/WebAppData/#Tourmaline::WebAppData.new(data,button_text)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/WebAppData/#Tourmaline::WebAppData-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/WebAppData/#Tourmaline::WebAppData#button_text","text":"View source","title":"#button_text"},{"location":"api_reference/Tourmaline/WebAppData/#Tourmaline::WebAppData#data","text":"View source","title":"#data"},{"location":"api_reference/Tourmaline/WebAppInfo/","text":"class Tourmaline::WebAppInfo inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( url : String ) # View source Methods # #url : String # View source","title":"WebAppInfo"},{"location":"api_reference/Tourmaline/WebAppInfo/#Tourmaline::WebAppInfo","text":"","title":"WebAppInfo"},{"location":"api_reference/Tourmaline/WebAppInfo/#Tourmaline::WebAppInfo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/WebAppInfo/#Tourmaline::WebAppInfo.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/WebAppInfo/#Tourmaline::WebAppInfo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/WebAppInfo/#Tourmaline::WebAppInfo#url","text":"View source","title":"#url"},{"location":"api_reference/Tourmaline/WebhookInfo/","text":"class Tourmaline::WebhookInfo inherits Reference # Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #allowed_updates : Array ( String )? # View source #has_custom_certificate : Bool # View source #ip_address : String? # View source #last_error_date : Time? # View source #last_error_message : String? # View source #last_synchronization_error_date : Time? # View source #max_connections : Int32? # View source #pending_update_count : Int32 # View source #url : String # View source","title":"WebhookInfo"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo","text":"","title":"WebhookInfo"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#allowed_updates","text":"View source","title":"#allowed_updates"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#has_custom_certificate","text":"View source","title":"#has_custom_certificate"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#ip_address","text":"View source","title":"#ip_address"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#last_error_date","text":"View source","title":"#last_error_date"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#last_error_message","text":"View source","title":"#last_error_message"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#last_synchronization_error_date","text":"View source","title":"#last_synchronization_error_date"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#max_connections","text":"View source","title":"#max_connections"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#pending_update_count","text":"View source","title":"#pending_update_count"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#url","text":"View source","title":"#url"},{"location":"resources/faq/","text":"Frequently Asked Questions # This is an FAQ for Tourmaline, but the answers should be generalized enough to use as a general FAQ for Telegram bots. Why isn't my bot responding? # Well first of all, have you programmed it? I know it might sound crazy, but 99% of the people that ask this question didn't actually program their bot. Rather they just created a bot with BotFather and expected things to magically work. If the answer to that question is \"yes\", as I hope it is, then there are a few things to try. First of all, make sure you are using the correct API token for the bot you're trying to access. If you have multiple bots it can become pretty easy to accidentally grab the wrong token. Assuming you have the right token, be sure to check that your bot is actually running and that you have a working internet connection. Try running your bot with the LOG_LEVEL environement variable set to DEBUG and check the logs. When running in polling mode you should see a whole bunch of calls to getUpdates . If that didn't work, you may need to check if group privacy mode is turned on. Go to BotFather, send the command /mybots , select your bot, go to Bot Settings > Group Privacy > Turn off . This should only be necessary if your bot is running in groups and you're using non-standard command prefixes, or other handlers like the HearsHandler . Lastly be sure to check the commands you're trying to send. The standard CommandHandler will only respond to commands with the / prefix. Also be sure to remember that command names should be unprefixed. For example: - @[Command(\"/echo\")] + @[Command(\"echo\")] What messages can my bot see? # Depends partially on whether group privacy mode is turned on or not. As a general rule your bot will not see messages sent by other bots. There is no way around this. If your bot is an admin in the group it will see all messages, except those sent by other bots. With group privacy mode turned on (the default) you bot will receive: Commands explicitly meant for them (e.g., /command@this_bot ). General commands from users (e.g. /start ) if the bot was the last bot to send a message to the group. Messages sent via this bot. Replies to any messages implicitly or explicitly meant for this bot. Additionally all bots, regardless of the group privacy mode will receive: All service messages. All messages from private chats with users. All messages from channels where they are a member. Note Eeach particular message can only be available to one privacy-enabled bot at a time, i.e., a reply to bot A containing an explicit command for bot B or sent via bot C will only be available to bot A. Replies have the highest priority. Can bots delete messages? # Yes, under 2 conditions: The bot must have the Delete Messages permission The message must be less than 48 hours old How can I add my bot to a group? # Same way you add any other user. On the desktop client this can be done by clicking the ellipses in the top right corner while viewing your group, clicking Info , and then clicking the Add button. If your bot is meant to be added to groups you can make this a bit easier by giving users a link to do so. The URL for the link should be http://telegram.me/BOT_NAME?startgroup=botstart where BOTNAME is the username of your bot. How can I get a user's information? # Bots are not capable of accessing a user's information soley based off of their user id or username, however there are some ways around this. The simplest is to keep a record of each user your bot comes in contact with by watching incoming messages for the user that sent them. An example of this could be as follows: @[ On ( :message ) ] def persist_users ( update ) if message = update . message # Convenience method to get all users from a message users = message . users # ... add them to a database end end The one exception to this rule is chat members . If you know the user's id or username and a group that they belong to which your bot also belongs to, you can use #get_chat_member to get their ChatMember record. I have a question not listed here, where can I ask? # Feel free to join the official Tourmaline/Proton Chat on Telegram and ask away.","title":"FAQ"},{"location":"resources/faq/#frequently-asked-questions","text":"This is an FAQ for Tourmaline, but the answers should be generalized enough to use as a general FAQ for Telegram bots.","title":"Frequently Asked Questions"},{"location":"resources/faq/#why-isnt-my-bot-responding","text":"Well first of all, have you programmed it? I know it might sound crazy, but 99% of the people that ask this question didn't actually program their bot. Rather they just created a bot with BotFather and expected things to magically work. If the answer to that question is \"yes\", as I hope it is, then there are a few things to try. First of all, make sure you are using the correct API token for the bot you're trying to access. If you have multiple bots it can become pretty easy to accidentally grab the wrong token. Assuming you have the right token, be sure to check that your bot is actually running and that you have a working internet connection. Try running your bot with the LOG_LEVEL environement variable set to DEBUG and check the logs. When running in polling mode you should see a whole bunch of calls to getUpdates . If that didn't work, you may need to check if group privacy mode is turned on. Go to BotFather, send the command /mybots , select your bot, go to Bot Settings > Group Privacy > Turn off . This should only be necessary if your bot is running in groups and you're using non-standard command prefixes, or other handlers like the HearsHandler . Lastly be sure to check the commands you're trying to send. The standard CommandHandler will only respond to commands with the / prefix. Also be sure to remember that command names should be unprefixed. For example: - @[Command(\"/echo\")] + @[Command(\"echo\")]","title":"Why isn't my bot responding?"},{"location":"resources/faq/#what-messages-can-my-bot-see","text":"Depends partially on whether group privacy mode is turned on or not. As a general rule your bot will not see messages sent by other bots. There is no way around this. If your bot is an admin in the group it will see all messages, except those sent by other bots. With group privacy mode turned on (the default) you bot will receive: Commands explicitly meant for them (e.g., /command@this_bot ). General commands from users (e.g. /start ) if the bot was the last bot to send a message to the group. Messages sent via this bot. Replies to any messages implicitly or explicitly meant for this bot. Additionally all bots, regardless of the group privacy mode will receive: All service messages. All messages from private chats with users. All messages from channels where they are a member. Note Eeach particular message can only be available to one privacy-enabled bot at a time, i.e., a reply to bot A containing an explicit command for bot B or sent via bot C will only be available to bot A. Replies have the highest priority.","title":"What messages can my bot see?"},{"location":"resources/faq/#can-bots-delete-messages","text":"Yes, under 2 conditions: The bot must have the Delete Messages permission The message must be less than 48 hours old","title":"Can bots delete messages?"},{"location":"resources/faq/#how-can-i-add-my-bot-to-a-group","text":"Same way you add any other user. On the desktop client this can be done by clicking the ellipses in the top right corner while viewing your group, clicking Info , and then clicking the Add button. If your bot is meant to be added to groups you can make this a bit easier by giving users a link to do so. The URL for the link should be http://telegram.me/BOT_NAME?startgroup=botstart where BOTNAME is the username of your bot.","title":"How can I add my bot to a group?"},{"location":"resources/faq/#how-can-i-get-a-users-information","text":"Bots are not capable of accessing a user's information soley based off of their user id or username, however there are some ways around this. The simplest is to keep a record of each user your bot comes in contact with by watching incoming messages for the user that sent them. An example of this could be as follows: @[ On ( :message ) ] def persist_users ( update ) if message = update . message # Convenience method to get all users from a message users = message . users # ... add them to a database end end The one exception to this rule is chat members . If you know the user's id or username and a group that they belong to which your bot also belongs to, you can use #get_chat_member to get their ChatMember record.","title":"How can I get a user's information?"},{"location":"resources/faq/#i-have-a-question-not-listed-here-where-can-i-ask","text":"Feel free to join the official Tourmaline/Proton Chat on Telegram and ask away.","title":"I have a question not listed here, where can I ask?"},{"location":"usage/","text":"Introduction # Bots are the figurative workhorses of Telegram's platform, allowing for everything from group management to file conversion and more; but how does one make a bot? Well that is the question I aim to answer in this brief introduction. If you already know how to make a bot, and would like to focus more on how to make a bot with Tourmaline, feel free to skip to the Getting Started . The BotFather # Every journey has to start somewhere, and for the would-be Telegram bot developer that is BotFather . BotFather itself is a Telegram bot which allows you to create and manage your own bots. As is convention, you can start BotFather by starting a conversation and pressing the \"Start\" button or sending the /start command. To create a new bot, just send the /newbot command. BotFather will then ask a couple questions which sometimes confuse people. Alright, a new bot. How are we going to call it? Please choose a name for your bot.\" The first question is asking for the screen name of your bot. This is the name that will appear when it sends messages and not its username. Good. Now let's choose a username for your bot. It must end in bot . Like this, for example: TetrisBot or tetris_bot. Now this is your bot's username. As it states, your bot's username must end with the word \"bot\". Capitalization doesn't matter, but ending with the word \"bot\" is pertinant. I won't go into more detail as to how to setup a bot here as you can just run /help to see all of the available commands, but once you finish the bot creation you will be presented with an API Token. KEEP THIS SAFE . Your token is for your eyes and your eyes only, as anyone with half a brain can take your token and use it to control your bot maliciously. We will also need this token later, so keep it handy. Running Your Bot # A bot is nothing more than code running on a computer somewhere. In most cases during development and testing that computer will probably be your own, but what happens when you're ready to share your bot with the world? At that point, running your bot on your own local machine isn't the best idea. Personal computers need to sleep, be restarted every now and then, and have more important jobs than hosting a bot 24/7. Enter the VPS. If you already have a server on which to run your bot, or are at least familiar with how to deploy your bot elsewhere you can probably skip this section. For anyone left remaining, you need a server. Far and away the most affordable method of getting your own server is by using a VPS, or virtual private server. Providers like AWS, DigitalOcean, Vultr, and Hetzner (my personal favorite) provide these for as little as $2-5/mo. To use a VPS you will need some knowledge of Linux, including how to use ssh to remotely access a server. If Linux is foreign to you I highly recommend getting aquainted, as it's going to be very important going forward. We will go into more detail about how to actually run your bot on your VPS later in this guide. Avoiding Limits # Telegram bots are heavily limited in what they can, and cannot do. The good news is that these limits are mostly documented when it comes to bots, so avoiding them is completely in your control. For more information on the current limits I recommend reading \"My bot is hitting limits, how do I avoid this?\" from the Telegram FAQ.","title":"Usage"},{"location":"usage/#introduction","text":"Bots are the figurative workhorses of Telegram's platform, allowing for everything from group management to file conversion and more; but how does one make a bot? Well that is the question I aim to answer in this brief introduction. If you already know how to make a bot, and would like to focus more on how to make a bot with Tourmaline, feel free to skip to the Getting Started .","title":"Introduction"},{"location":"usage/#the-botfather","text":"Every journey has to start somewhere, and for the would-be Telegram bot developer that is BotFather . BotFather itself is a Telegram bot which allows you to create and manage your own bots. As is convention, you can start BotFather by starting a conversation and pressing the \"Start\" button or sending the /start command. To create a new bot, just send the /newbot command. BotFather will then ask a couple questions which sometimes confuse people. Alright, a new bot. How are we going to call it? Please choose a name for your bot.\" The first question is asking for the screen name of your bot. This is the name that will appear when it sends messages and not its username. Good. Now let's choose a username for your bot. It must end in bot . Like this, for example: TetrisBot or tetris_bot. Now this is your bot's username. As it states, your bot's username must end with the word \"bot\". Capitalization doesn't matter, but ending with the word \"bot\" is pertinant. I won't go into more detail as to how to setup a bot here as you can just run /help to see all of the available commands, but once you finish the bot creation you will be presented with an API Token. KEEP THIS SAFE . Your token is for your eyes and your eyes only, as anyone with half a brain can take your token and use it to control your bot maliciously. We will also need this token later, so keep it handy.","title":"The BotFather"},{"location":"usage/#running-your-bot","text":"A bot is nothing more than code running on a computer somewhere. In most cases during development and testing that computer will probably be your own, but what happens when you're ready to share your bot with the world? At that point, running your bot on your own local machine isn't the best idea. Personal computers need to sleep, be restarted every now and then, and have more important jobs than hosting a bot 24/7. Enter the VPS. If you already have a server on which to run your bot, or are at least familiar with how to deploy your bot elsewhere you can probably skip this section. For anyone left remaining, you need a server. Far and away the most affordable method of getting your own server is by using a VPS, or virtual private server. Providers like AWS, DigitalOcean, Vultr, and Hetzner (my personal favorite) provide these for as little as $2-5/mo. To use a VPS you will need some knowledge of Linux, including how to use ssh to remotely access a server. If Linux is foreign to you I highly recommend getting aquainted, as it's going to be very important going forward. We will go into more detail about how to actually run your bot on your VPS later in this guide.","title":"Running Your Bot"},{"location":"usage/#avoiding-limits","text":"Telegram bots are heavily limited in what they can, and cannot do. The good news is that these limits are mostly documented when it comes to bots, so avoiding them is completely in your control. For more information on the current limits I recommend reading \"My bot is hitting limits, how do I avoid this?\" from the Telegram FAQ.","title":"Avoiding Limits"},{"location":"usage/getting_started/","text":"Getting Started with Tourmaline # Time to create your first bot with Tourmaline! Installing Tourmaline # This guide assumes that you have Crystal installed and are at least semi-familiar with the syntax. The first thing we are going to need is a fresh Crystal project, so go ahead and run crystal init app your_bot_name , making sure to replace \"your_bot_name\" with whatever you want to call your bot. I'm going to use the famous echo_bot example. Once it's finished, cd into the project directory. Now, open shard.yml and add the following lines anywhere in the file (probably at the end): 1 2 3 dependencies : tourmaline : github : protoncr/tourmaline Save the file, and run shards install . That's it! Tourmaline is now installed. Creating Your Bot # Now it's time to write some code. Open src/echo_bot.cr or whatever file was generated for you, and paste in the following code. The code is annotated so you can understand what's going on every step of the way. 1 2 3 4 5 6 7 8 9 10 11 12 require \"tourmaline\" # (1) client = Tourmaline :: Client . new ( ENV [ \"BOT_TOKEN\" ] ) # (2) echo_handler = Tourmaline :: CommandHandler . new ( \"echo\" ) do | ctx | # (3) text = ctx . text . to_s ctx . reply ( text ) unless text . empty? # (4) end client . register ( echo_handler ) # (5) client . poll # (6) First we have to import Tourmaline into our code. In Crystal this is done with the require statement. Next we create a new Client object. This is the main object that we will be using to interact with the Telegram Bot API. Into the Client we pass our bot's API token, which we will be getting from the BotFather. We will be storing this in an environment variable, so we use ENV[\"BOT_TOKEN\"] to get the value of the BOT_TOKEN environment variable. If you are not familiar with environment variables, you can read more about them here . Tourmaline uses a system of handlers to handle different types of events. In this case we are creating a CommandHandler which will handle the /echo command. The first argument to the CommandHandler is the name of the command, and the second argument is a block of code that will be executed when the command is received. The block of code is passed a Context object, which contains information about the command and the message that triggered it. The Context object has a text property which contains the text of the message that triggered the command. We can use this to get the text of the message and reply with it. We use the reply method to send a message back to the chat that the command was sent in. We also check to make sure that the message isn't empty, because if the user just sends /echo without any text, the message will be empty. Now that we have created our handler, we need to register it with the Client so that it can be used. This is done with the register method. Finally, we call the poll method on the Client to start the bot. This method will block the current thread, so it is important that you call it at the end of your code. And that's really all their is to it. Now we can run our code! export LOG_LEVEL = info # by default you won't see any logs, so we set the log level to info export BOT_TOKEN = YOUR_BOT_API_TOKEN crystal run ./src/echo_bot.cr If all goes well, you should see something like this: 2023 -03-23T00:17:53.778090Z INFO - tourmaline.poller: Polling for updates...","title":"Getting Started"},{"location":"usage/getting_started/#getting-started-with-tourmaline","text":"Time to create your first bot with Tourmaline!","title":"Getting Started with Tourmaline"},{"location":"usage/getting_started/#installing-tourmaline","text":"This guide assumes that you have Crystal installed and are at least semi-familiar with the syntax. The first thing we are going to need is a fresh Crystal project, so go ahead and run crystal init app your_bot_name , making sure to replace \"your_bot_name\" with whatever you want to call your bot. I'm going to use the famous echo_bot example. Once it's finished, cd into the project directory. Now, open shard.yml and add the following lines anywhere in the file (probably at the end): 1 2 3 dependencies : tourmaline : github : protoncr/tourmaline Save the file, and run shards install . That's it! Tourmaline is now installed.","title":"Installing Tourmaline"},{"location":"usage/getting_started/#creating-your-bot","text":"Now it's time to write some code. Open src/echo_bot.cr or whatever file was generated for you, and paste in the following code. The code is annotated so you can understand what's going on every step of the way. 1 2 3 4 5 6 7 8 9 10 11 12 require \"tourmaline\" # (1) client = Tourmaline :: Client . new ( ENV [ \"BOT_TOKEN\" ] ) # (2) echo_handler = Tourmaline :: CommandHandler . new ( \"echo\" ) do | ctx | # (3) text = ctx . text . to_s ctx . reply ( text ) unless text . empty? # (4) end client . register ( echo_handler ) # (5) client . poll # (6) First we have to import Tourmaline into our code. In Crystal this is done with the require statement. Next we create a new Client object. This is the main object that we will be using to interact with the Telegram Bot API. Into the Client we pass our bot's API token, which we will be getting from the BotFather. We will be storing this in an environment variable, so we use ENV[\"BOT_TOKEN\"] to get the value of the BOT_TOKEN environment variable. If you are not familiar with environment variables, you can read more about them here . Tourmaline uses a system of handlers to handle different types of events. In this case we are creating a CommandHandler which will handle the /echo command. The first argument to the CommandHandler is the name of the command, and the second argument is a block of code that will be executed when the command is received. The block of code is passed a Context object, which contains information about the command and the message that triggered it. The Context object has a text property which contains the text of the message that triggered the command. We can use this to get the text of the message and reply with it. We use the reply method to send a message back to the chat that the command was sent in. We also check to make sure that the message isn't empty, because if the user just sends /echo without any text, the message will be empty. Now that we have created our handler, we need to register it with the Client so that it can be used. This is done with the register method. Finally, we call the poll method on the Client to start the bot. This method will block the current thread, so it is important that you call it at the end of your code. And that's really all their is to it. Now we can run our code! export LOG_LEVEL = info # by default you won't see any logs, so we set the log level to info export BOT_TOKEN = YOUR_BOT_API_TOKEN crystal run ./src/echo_bot.cr If all goes well, you should see something like this: 2023 -03-23T00:17:53.778090Z INFO - tourmaline.poller: Polling for updates...","title":"Creating Your Bot"}]}